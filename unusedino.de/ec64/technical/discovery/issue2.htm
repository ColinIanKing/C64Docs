<html>

<head>
<title>Issue #2</title>
</head>

<body bgcolor="#a098ff" text="#000000" link="#ffffff" alink="#ffffff" vlink="#404040">
<center><table><tr><td><pre>

        __  __             ______
       |  ||__|  ______   /  __  \   ______   __  __   ______    ____   __  __
   ____|  | __  /  __  \ |  |  |__|_/  __  \ |  ||  | /  __  \  /    \ |  ||  |
  /  __ / ||  ||  |__|__||  | |____/  |  |  ||  ||  ||  |__|  ||  ||__||  ||  |
 |  |  |  ||  |`\____  \ |  | |____\  |  |  ||  ||  ||   _____||  |  W |  ||  |
 |  |__|  ||  ||  |__|  ||  |__|  ||  |__|  ||  ||  ||  |__|  ||  |  a |  ||  |
 `\_______||__|`\______/'`\______/'`\______/'`\____/'`\______/'| /'  D `\    /'
          _     _  _ __ ___ ____ ______________________________|/________|  |
           _     _  _ __ ___ ____ _________________________________________/'


             The   Journal   of   the   Commodore   Enthusiast


                     I s s u e  2  :  October 1, 1996


                             P R E A M B L E


We greet you to the second issue of disC=overy, the Journal of the Commodore
Enthusiast.  Our inspiration for launching this work derives from you, the
ones who still hold our beloved 8-bit machines in high regard and respect.
In honor of your committment to these classic platforms we have pledged
ourselves to assemble this entire journal on modest C64 and C128 systems.
It is our sincerest hope that you will find our efforts to be of interest
and special joy.  We thank you from the bottom of our hearts and look forward
to forging a solid productive relationship with the C= 8-bit community.

  - Mike Gordillo, Steven Judd, Ernest Stokes, and the authors of disC=overy.


                A R T I C L E S    O F    O P E R A T I O N


Article 1 : Mission Statement
 
Our intent is to present useful information in order to enhance and preserve
the knowledge base of the Commodore 8-bit domain, including, but not limited
to, the Commodore 64 and Commodore 128 home computers.  To this end, we shall
require that every article contain what in our discretion should be a viable
Commodore 8-bit hardware and/or software point of relevance.  Likewise, each 
issue should include material that can both potentially enlighten the most
saavy of users as well as the layman.  We intend to complement and assist all
others engaged in similar endeavours.  We believe it is of paramount concern
to stave off entropy as long as possible.
 
 
Article 2 : disC=overy Staff
 
The current staff of disC=overy, the Journal of the Commodore Enthusiast,
is as follows:
 
      Editor-in-Chief       : Mike Gordillo  (s0621126@dominic.barry.edu)
      Associate/Tech Editor : Steven Judd    (judd@nwu.edu)
      Webmaster             : Ernest Stokes  (drray@eskimo.com)

      disC=overy, issue 2 logo by 'WaD'
 
We invite any and all interested parties to join us as authors, panelists,
and staff members.
 
 
Article 3 : General Procedures

- Submission Outline -

a. Articles may range in size from 1 kilobyte and up.  Approximately 15
   kilobytes of text is the preferred length, including any software present.

b. Sufficient technical content about Commodore 8-bit home computers,
   concerning software and/or hardware relevant to these systems, is a 
   requirement.  What constitutes a sufficient amount of 'technical
   content' is left to the discretion of the Editor-in-Chief and/or the
   review panel (see below).


- Staff Priorities -

The Editor-in-Chief shall supervise the organization of each issue in regards
to grammatical and syntactical errors, flow of content, and overall layout of
presentation.  The Editor-in-Chief and Associate Editor shall form a review
panel whose function it shall be to referee literary work which the Editor
in-Chief has deemed to be of advanced technical merit.  The Editor-in-Chief
iand disC=overy, the Journal of the Commodore Enthusiast, shall retain
copyright solely on the unique and particular presentation of its included body
of literary work in its entirety.  Authors shall retain all copyrights and
responsibilities with regards to the content of their particular literary
work.  Authors shall be required to submit their works to the Editor-in-Chief
approximately two weeks prior to publication.


Article 4 : Peer Review
 
To the best of our knowledge, disC=overy shall be the first Commodore 8-bit
journal with a review panel dedicated to uphold the technical integrity and
legitimacy of its content.  The Editor-in-Chief and the Associate Editor
shall be responsible for the formation of the panel.  The appointed
panelists shall have the option of anonymity if desired.  The panel shall
review works primarily for technical merit if the Editor-in-Chief and
the Associate Editor deem it necessary.  Authors may be asked to modify
their works in accordance with the panel's recommendations.  The Editor-in-
Chief shall have final discretion regarding all such &quot;refereed&quot; articles.


Article 5 : Distribution

Although we welcome open distribution by non-commercial organizations, there
are currently three &quot;secure&quot; distribution channels available to interested
parties.  This journal may be obtained by directly mailing the Editor-in-Chief
or via the World Wide Web at http://www.eskimo.com/~drray/discovery.html and
at FTP site : ftp.eskimo.com - directory /u/t/tpinfo/C64/Magazines/discovery
Several versions of this journal may be available for your convenience, please
check with the aforementioned sources.


Article 6 : Disclaimers
 
The Editor-in-Chief and disC=overy, the Journal of the Commodore Enthusiast,
retain all copyrights regarding the presentation of its articles.  Authors
retain all copyrights on their specific articles in and of themselves,
regarding the full legal responsibility concerning the originality of their
works and its contents.

The Editor-in-Chief and disC=overy, the Journal of the Commodore Enthusiast,
grants the reader an exclusive license to redistribute each issue in its
entirety without modification or omission under the following additional
stipulations:
 
      - If distribution involves physical media and is part of a commercial,
        not-for-profit, or PD distribution, the maximum allowable monetary
        charge shall not exceed $4 1996 United States Dollars per issue
        unless more than one issue is distributed on a single media item
        (i.e., two or more issues on one disk), in which case maximum
        allowable charge shall not exceed $4 1996 United States Dollars per
        media item.  All dollar values given assume shipping costs are
        -included- as part of the maximum allowable charge.
 
      - If distribution involves non-physical media and is part of a
        commercial, not-for-profit, or PD distribution, the maximum
        allowable charge shall be limited to the actual cost of the
        distribution, whether said cost be in the form of telephony or
        other electronic means.

**!** - Software included within articles (as text) may be subject to separate
        distribution requirements as binary executables.  Please check directly
        with authors regarding distribution of software in binary form.

It is understood that distribution denotes acceptance of the terms listed and
that under no condition shall any particular party claim copyright or public
domain status to disC=overy, the Journal of the Commodore Enthusiast, in its
entirety.
 
The Editor-in-Chief and disC=overy, the Journal of the Commodore Enthusiast,
reserve the right to modify any and all portions of the Preamble and the
Articles of Operation.


:::::::::::d:i:s:C=:o:v:e:r:y:::::::::::::::::i:s:s:u:e::2::::::::::::::::::::
::::::::::::::::::::::T A B L E  O F  C O N T E N T S:::::::::::::::::::::::::
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 


-Software Section-

/S01 - &quot;Innovation in the 90s : The Super Hi-Res Flexible Line
$d000    Interpretation Technique&quot;
        by Roland Toegel and 'Count Zero'

/S02 - &quot;Scrollies exposed : A look at simple scroll-text routines&quot;
$d000   by 'XmikeX', with contributions from Asger Alstrup

/S03 - &quot;The Raster StarterKit, A classic 'slice' of VIC-II code&quot;
$d000   by 'XmikeX' and 'Dokken'

/S04 - &quot;Heaven in the net, an unedited excerpt of IRC on #c-64&quot;
$d000   by Mike Gordillo

/S05 - &quot;A demo of 'disC=overy', The exploration of rotation&quot; 
$d000   by John Kaiser

/S06 - &quot;SID Primer: The Working Man's Guide to SID&quot;
$d400   by Stephen L. Judd

/S07 - &quot;Progenitor of the SID : An interview with Bob Yannes&quot;
$d400   by Andreas Varga

/S08 - &quot;Z80, The basics of it&quot;
0100h   by 'Raver'


-Hardware Section-

/H01 - &quot;Charger up!  The VIC-20 to ATARI 2600 'Ram Cartridge' Programmer&quot;
        by Ravid Noam

/H02 - &quot;The 8 bit Modplay 128 Board, a three-diode addition&quot;
        by Nate Dannenberg

/H03 - &quot;The Virtual PLUS/4 : Upgrading your C16 to 64 Kilobytes!&quot;
        by Martin Gierich

/H04 - &quot;Continued Lt. Kernal Hard Drive Support&quot;
        by Ron Fick

/H05 - &quot;The Metal Shop&quot;
        with SMS Mike Eglestone


-Corrections-

$2bad - E R R A T A


:::::::::::d:i:s:C=:o:v:e:r:y:::::::::::::::::i:s:s:u:e::2::::::::::::::::::::
/S01::$d000:::::::::::::::::::S O F T W A R E:::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 
 
                        : Innovation in the 90s :
 
     The Super Hi-Res Interlace Flexible Line Interpretation Technique
 
         by  Roland Toegel (Crossbow/Crest) and Count Zero/TRC*SCS
 
 
Prelude from Count Zero
--------+--+--+--------

First seen earlier this year, the new SHIFLI video technique that is described
in this article is -the- paramount example of programming brilliance.  The
inventor of the technique, Roland Toegel (Crossbow of Crest), was helpful
in providing the original SHIFLI documentation, which I translated from the
German into the English text that follows for the exclusive use of the
disC=overy journal.

So without further ado, let us now learn from Mr. Toegel how to achieve
the award winning :
 
   'Super Hires InterLace Flexible Line Interpretation' Graphics mode !
 
Please note that the technique is described primarily for Commodore computers
based on the European/Australian PAL TV standard. NTSC-based Commodore machines
require an extra 2 cycles per line.  This may require the programmer to time
out the routines by hand, but this should not be a major obstacle to overcome.
 
Count Zero
--
 
i.      Forward
 
As the inventor of the SHI-FLI mode, I am pleased to have the services of
Count Zero and the disC=overy journal for the dissemination of my technique
into the English language.  I must add that the text below does require the
reader to be already familiar to a high degree with VIC-II programming on the
C64.  I would suggest books such as 'Mapping the 64' and the programming texts
found at ftp.funet.fi /pub/cbm ..etc., for a solid base of instruction.  Also,
some terms used in this document (e.g., mix-color) are meant to be uniquely
descriptive and hence, will not be found in any 'standard' programming text.
The terminology is a result of the strain that occurs when new methodology
meets old semantics.  However, the experienced programmer should find the
words to be self-evident in the context which they are used.
--
 
1.      Introduction to Super Hires
 
Super-Hires Interlace FLI : The absolute successor of the Super-Hires-Modes.
Just like normal Super-Hires, the width is 96 Hires Pixels, which is equal to
12 Characters or 4 Sprites next to each other.  For visual enjoyment this
area is centered though using Char-Position 15 to 26 (included) on the
screen.  The Y-Axis is 167 pixels high having nearly 21 Character lines or
8 Sprites and to have as much flexibility as possible on choosing colors or
pixels, 2 sprites are overlayed, 4 times next to each other (8 sprites on
the rasterline) over the bitmap graphics.  Due to the fact that all 8 sprites
are used for a 96 * 21 pixel-wide area, a small multiplexer is needed to
juggle all 8 sprites for 8 times (every 21 rasterlines and with individual
patterns).  We thereby win 2 colors plus the 2 normal colors of the Hires-
Bitmap Mode in an 8*8 pixel block.  Please note that the 2 additional colors
are the same throughout the whole picture.
 
 
2.      Super Hires with FLI !?!
 
FLI is for most coders still quite hard. Sprites over FLI for most quite
impossible. Maybe one or two sprites, but 8 !?! next to each other and
still FLI in each rasterline!  Hard to believe, eh?
 
First of all you need to know how to do FLI and what it does and also
what effect sprites have on it.
 
 
2.1     Normal FLI
 
On each eighth rasterline (the Badlines, the first rasterline of each charline)
the VIC stops the processor for 40-43 cycles to read the new Characters and
colors of the video and color-ram.  This is the case when the bits 0-2 of the
registers $D011 and $D012 are the same.  Now if you change on each rasterline
the bits 4-7 of $D018, which holds the length of the video-ram (handling the
colors on bitmap graphics) and set the bits 0-2 of $D011 to get a badline on
each rasterline, you will get new colors on each rasterline in the bitmap
graphics.  The only condition to be followed is that on each rasterline 23
cycles are used whereby for the *used cycles - 22* char of the textline the
next 3 chars the byte $FF (light grey) is read from the video ram and the
FLI effect starts after that (the FLI bug).  In the multicolor mode for the
color-ram the next byte in the program after writing to $D011 is chosen as
the color.  As we are using the Hires Mode here, this is irrelevant.
 
&gt; NOTE: The last 3 sentences were pretty hard to translate and I advise you
&gt;       to read other articles about FLI aswell, if you want to know more
&gt;       about Multicolor FLI. (CZ)
 
 
2.2     Sprites over FLI
 
So what does a sprite do over FLI?  Pretty simple, as it just eats up some
cycles.  All 8 sprites use 19 cycles per rasterline, meaning in case we code
our FLI routine without loops, we just need 2 LDA, STA commands (for $D018
and $D011), using 12 cycles per rasterline.  All together with the 8 used
sprites that makes 31 cycles.  Thus, the 'light grey' FLI-Bug occurs on
char-positions 9,10 and 11 and from char 12+, the FLI effect comes up.  This
doesn't matter much to us, as the Super Hires Picture starts at Char-Pos 15.
We therefore get 3 cycles per rasterline for other commands.

 
3.      Mulitplexing over FLI
 
Now we rather have to increase the Y-Coordinates of the sprites by 21 pixels
each 21 rasterlines and give them new patterns.  As we use 8 different
video-rams on FLI for the colors and the sprite-pointers are always at the
end of the video-ram, we are supposed to write 8 * 8 values for the patterns
plus 8 values for the Y-Coordinates, resulting in 72 different addresses.
Thats far too much for a single rasterline and adding the FLI routine will
bust the limits.  Therefore we have to do a little trick.
 
 
3.1     Changing the sprite-pointers

The trick is not to change anything at all!  On the other hand we don't want
the patterns to look the same everywhere.  Luckily, the height of a sprite
(21 pixels) is not capable of being divided by the height of a textline
(8) and the smallest mutual multiple is 168 (meaning 21 * 8).  As we are
writing (due to the FLI) a new value to $D018 on each rasterline and we use
8 video rams, we can abuse this and have different sprite-pointers on every
video-ram.  The handling of where the graphics for the sprite-patterns are
located becomes a little bit confusing, but it doesn't eat up any rastertime
as we don't have to change the pointers.


3.1.1   Table to illustrate the sprite pattern-handling
 
Spriteline      Video-Ram     Screenline (NOT equal to rasterline!)
 
1               1             1
2               2             2
3               3             3
4               4             4
5               5             5
6               6             6
7               7             7
8               8             8
 
9               1             9
10              2             10
11              3             11
12              4             12
13              5             13
14              6             14
15              7             15
16              8             16
 
17              1             17
18              2             18
19              3             19
20              4             20
21              5             21
--------------------------------
1               6             22
 
2               7             23
3               8             24
 
4               1             25
.               .             .
.               .             .
.               .             .
20              1             41
21              2             42
--------------------------------
1               3             43
2               4             44
3               5             45
.               .             .
.               .             .
.               .             .
 
 
3.1.2   Example
 
Small example for Sprite 0 under the following conditions:
 
Used 8 Video-Rams            : $4000 - $5FFF
content of the sprite-pointer: $43F8  80 00 00 00 00 00 00 00
                               $47F8  81 00 00 00 00 00 00 00
                               $4BF8  82 00 00 00 00 00 00 00
                               $4FF8  83 00 00 00 00 00 00 00
                               $53F8  84 00 00 00 00 00 00 00
                               $57F8  85 00 00 00 00 00 00 00
                               $5BF8  86 00 00 00 00 00 00 00
                               $5FF8  87 00 00 00 00 00 00 00
 
Thus the Sprite-Patterns are in memory from $6000-$61FF.
 
Therefore the pattern-handling looks like this:
 
Screenline      Memorylocation
 
1               $6000-$6002
2               $6043-$6045
3               $6086-$6088
4               $60C9-$60CB
5               $610C-$610E
6               $614F-$6151
7               $6192-$6194
8               $61D5-$61D7
9               $6018-$601A
10              $605B-$605D
11              $609E-$60A0
12              $60E1-$60E3
13              $6124-$6126
14              $6167-$6169
15              $61AA-$61AC
16              $61ED-$61EF
17              $6030-$6032
18              $6073-$6075
19              $60B6-$60B8
20              $60F9-$60FB
21              $613C-$613E
22              $6180-$6182
23              $61C3-$61C5
.               .
.               .
.               .
 
 
3.1.3   Remark to the display-routine of the editor
 
As the changing of the video-ram on the editor-routine happens inside of the
textscreen (but the spritepointers are read inside the sideborder), the change
takes effect one rasterline later.  This means that whenever the colors for
the bitmap of color ram 2 are read, the sprite pointers or video ram 1 are
still active.  This is the reason why the editor uses only 167 screenlines
(instead of 168) and why the first textline of the first video-ram and the
first rasterline of the bitmap stays empty.

 
3.2     Changing the Sprite Y-Values
 
As the changing of the sprite pointers more or less happens by itself, we just
have to make sure the correct Y-Value comes into the game.  These are still
8 values, but they don't have to be set in one rasterline and we got 21
rasterlines to set them.  As we have just 3 cycles left on each rasterline on
the FLI routine described and that wouldn't be enough for a simple LDA : STA,
we have to change the FLI routine a little bit.
 
 
3.2.1   Load new sprite Y-Value
 
As the height of all sprites is the same, we just have to do a single
LDX #$VALUE.  Therefore, 2 of the 3 free cycles are used and we cannot do
anything else with the last free cycle.
 
LDX #$VALUE
LDA #$08
STA $D018
LDA #$38
STA $D011
 
 
3.2.2   Load next but one $D011 value
 
As a STA $SPRITE0Y needs 4 cycles, we cannot include it in the next rasterline,
but we can already load the next $D011 value into the Y-Register.  The free
cycle stays unused.

LDY #$3A
LDA #$18
STA $D018
LDA #$39
STA $D011
 
 
3.2.3   Write new Sprite Y-Value
 
As we already did the loading of the $D011 value for the next line, we now
have 5 cycles left and therefore enough time for a STA $SPRITE0Y.
 
STX $SPRITE0Y
LDA #$28
STA $D018
STY $D011
 
Now plot 3.2.2 and 3.2.3 have to be repeated for the remaining 7 sprites with
changed values for $D011 and $D018.  So there is now 1 rasterline for loading
the new sprite Y-value and 8 * 2 rasterlines to write the new sprite Y-Value.
We now have 17 rasterlines and the 4 remaining ones just need an additional
NOP so that all rasterlines use the same amount of cycles.
 
 
3.2.4   Remark to the Display-routine of the editor
 
For simplification of the routine, which generates the FLI routine, in the
remaining 4 rasterlines an LDX #$VALUE was used instead of an NOP.
 
 
4.      Memory-allocation

Now video-rams, the bitmap, and the sprites have to be placed reasonable in
a VIC-Bank.  As the banks from $0000 - $3FFF and $8000 - $BFFF are useless
for graphics due to the overlay of the Char-rom we choose the back from
$4000 - $7FFF for now.
 
 
4.1     Video-rams
 
The 8 video-rams need $2000 Bytes.  They are located from $4000 - $5FFF.

 
4.2     Bitmap
 
The bitmap needs $1F40 Bytes.  It's located at $6000 - $7F3F.
 
 
4.3     Sprites
 
As we need 2 sprites overlayed (four times next to each other and 8 times
below each other), we need 2 * 4 * 8 sprites, meaning 64 overall.  We need
$1000 bytes for the sprites.  We check what the video-rams and the bitmaps
already allocate and recognize that only $7F40 - $7FFF, enough memory for
3 sprites, is left open.  How do we rectify this situation?
 
As the video-rams and the bitmap just need a small part for displaying the
picture, the sprites can be put into the spare parts of the video-rams and
the bitmap.  They have to be masked by choosing the right color in the video-
rams.
 
A textline of a bitmap covers $140 bytes.  Our Super Hires cutout just needs
$60 bytes though and is centered.  Thus the first and the last $70 bytes of
a textline of the bitmap is free.  As a sprite needs $40 bytes, we can put 2 
sprites in each textline of the bitmap (one to the left and one to the right).
Due to the height of the picture (21 textlines), this results in space for
42 sprites.  From textline 22 on (in memory from $7A40) we can use the whole
textline for sprites, resulting in 5 sprites per line.  Continuing this until
textline 24 (included), we have space for 15 additional sprites.  So overall
we already have 57 sprites and just 7 are missing now.  These we could place
in the remaining free area of the bitmap ($7E00-$7FFF), but that's not very
efficient as we have some space left in the video-rams.
 
The Textline of a video-ram contains $28 bytes.  The Super Hires cutout just
needs the middle $0C bytes.  As the sprites we put to the left and to the right
of the picture are supposed to be invisible, we need to set a background-color
in the video-ram (in our case, the color light-grey $FF).  So we don't have
enough spare room for the sprites to the left and the right of the picture
in the video-ram.

If we finish the FLI Routine from textline 22 on and keep the video-ram on
until the end of the screen (filling the this area ($4370-$43E8) with the
backgroundcolor $FF to hide the sprites) we can use the remaining 7 video-rams
from textline 22 (from $4770, $4B70, $4F70, $5370, $5770, $5B70, $5F70) for
one sprite each.  Now we have placed all 64 sprites and the allocation of the
sprite pointers looks like this:
 
$43F8  80 84 85 89 8A 8E 8F 93
$47F8  94 98 99 9D 9E A2 A3 A7
$4BF8  A8 AC AD B1 B2 B6 B7 BB
$4FF8  BC C0 C1 C5 C6 CA CB CF
$53F8  D0 D4 D5 D9 DA DE DF E3
$57F8  E4 E8 E9 EA EB EC ED EE
$5BF8  EF F0 F1 F2 F3 F4 F5 F6
$5FF8  F7 1E 2E 3E 4E 5E 6E 7E
 
The pointers from $80 to $E4 are the 2 sprites which are left and right
next to the picture in the bitmap.
 
The pointers from $E8 to $F7 are the sprites from textline 22 to 24 below
the picture in the bitmap.
 
The pointers from $1E to $7E are the sprites from textline 22 to 24 below
the picture in the video-rams.
 
 
5.      Interlace
 
Until now we had the normal Super Hires FLI mode, supplying the basics for
interlace.  For the interlace mode we need 2 pictures of this kind switching,
displayed 25 times per second (PAL).  As such a picture fits into the VIC-Bank
from $4000 - $7FFF and we have another VIC-Bank ($C000-$FFFF) with the same
assumptions we can easily place the 2nd picture there.
 
We had in the Super Hires FLI mode (on a 8 * 1 pixel-area) the choice between
4 colors (2 sprite-colors, being the same for the whole picture + 2 FLI
colors).  Now, in the interlace mode, we have the choice between 16 mix-colors,
meaning the combined 4 colors from picture one and two.  When using interlace,
mix-colors are created except for the case when the same colors are used for
both pictures on the same 8 * 1 pixel-area (Check the following example) :
 
 
      Pic2 -&gt;        Sprite1:$E [ Sprite2:$0 [ FLI1:$6 [ FLI2:$9
----------------------------------------------------------------
Pic1    Sprite1:$1  [   $1E     [    $10     [   $16   [   $19
  [     Sprite2:$3  [   $3E     [    $30     [   $36   [   $39
  V     FLI1   :$E  [   $EE     [    $E0     [   $E6   [   $E9
        FLI2   :$6  [   $6E     [    $60     [   $66   [   $69
 
 
This results in the following 16 mixcolors:
 
 1. White-Lightblue
 2. Cyan-Lightblue
 3. Lightblue-Lightblue (pure Lightblue)
 4. Blue-Lightblue
 5. White-Black
 6. Cyan-Black
 7. Lightblue-Black
 8. Blue-Black
 9. White-Blue
10. Cyan-Blue
11. Lightblue-Blue
12. Blue-Blue (pure Blue)
13. White-Brown
14. Cyan-Brown
15. Lightblue-Brown
16. Blue-Brown
 
 
When choosing the colors you should take care that the brightness-values of
the 2 mix-colors are about the same and that they do not differ by more than
2 brightness steps, as things otherwise start to flicker too much.
(e.g. Black-White flickers a lot).
 
Here is a table with brightness-values from light to dark.
(Colors on the same line have the same brightness)
 
$1     : White
$7, $D : Yellow, Lightgreen
$3, $F : Cyan,   Lightgrey
$5, $A : Green,  Lightred
$C, $E : Grey,   Lightblue
$4, $8 : Lilac (Purple), Orange
$2, $B : Red ,   Darkgrey
$6, $9 : Blue,   Brown
$0     : Black
 
 
6.      Additional Graphics (Not handled by the editor)
 
We found out that on the left or right of the picture in the bitmap, $70 bytes
was left for spritedata.  We used just $40 bytes of that space, meaning we
still have $30 bytes (6 Chars or 48 Pixels) left to both sides of the picture.
 
 
6.1     Left to the picture
 
Our Super Hires Picture starts at position 15.  The spare $30 bytes are from
position 9 to 14.  As we use 14 cycles in our FLI routine and the 8 sprites use
19 cycles per rasterline, the light-grey FLI Bug now uses the chars 11, 12, 14.
Thus meaning we could use char 14 for Hires FLI.  On chars 9 and 10 we could
just use 2 different colors (respectively 4 mix-colors for interlace) on the
height of 21 textlines in the bitmap, as the FLI effect starts from Char 14 and
before that no new data (colors in this case) are read from the video-ram.
The colors are in the first video-ram in memory from $4008+$4009 respectively
$C008+$c009.
 
 
6.2     Right to the picture
 
Our Super Hires Picture lasts until char-position 26.  The spare $30 bytes in
the bitmap are from position 27 - 32.  Here we could use all 6 chars for Hires
FLI (or Interlace Hires FLI).
 
 
7.      Memory-allocation of a picture startable with RUN
 
The included SHIFLI picture, once unpacked, can be easily modified for your own
use, as follows :
 
$0801-$080C Basic Startline
$080D-$0860 Routine for copying the Graphic-data to the correct memory area
$0861-$095B Routine which is setting the I/O registers and creates the
            display-routine (from $085F-$10FB)
$095C-$475B Data of the 1. Picture (to be copied to $4000)
$475C-$855B Data of the 2. Picture (to be copied to $C000)

 
8.      Conclusion
 
That's it ... for further information check the editor code and other sources,
most likely available at ftp sites such as ftp.funet.fi /pub/cbm ..etc., etc.
Included is the uuencoded version of the X96 Graphics C-64 Contest Winner by
Deekay/Crest.  It was NTSC/PAL-fixed by the people of the American MegaGroup,
Style.
--
For questions or comments concerning this article :
Roland Toegel is available at      : toegelrd@trick.informatik.uni-stuttgart.de
Count Zero/TRC*SCS is available at : count0@mail.netwave.de


begin 644 x96-winner
M 0@+&quot;,8'GC(P-3D H@!XA@&amp;]'0B=^P&quot;:Z-#V3  !UJY9W$&amp;]W4&amp;=\ &gt;]_4&amp;=
M$ CHT/&amp;@ (3WA/@@@0$F]] &quot;D HF^&quot;&quot;! ;#P(*H!J0&quot;%]H7YA?H@@0$J\ DP
M!2&quot;! ;#SYO9I H7WH@,@@0$F]LK0^*;VO=X!JO *(($!)ODF^LK0]J7V*0?P
M&quot;N;YT +F^L;V$-X8I?QE^87YI?UE^H7Z(+T!\(X&amp;^] D2*  L?ZD_M &quot;QO_&amp;
M_L#OT ZD_\ 'T BI-X4!6$P-&quot;#@JA?MH8#BE_N7WA?F%_J7_Z0&quot;%^N7XA?^D
M]_ 2I?PXY?&gt;%_+ &quot;QOVQ^9'\B-#YQ/CP!L;ZQO@0[6 # 0$! 0 ! 00! 0$!
M @(!^&lt;8\QC[L=?)@( &lt;(&gt;.X:T.X-W*DRC1)$M96MC10#HA!X&quot;@.I&lt;3[0G3;0
M..D8RLK@&quot;-#QACRB7X8[Z([_#Z(4J=B ?B^P&quot;8HI ?8I#6GCC5EM;_#0&quot;JD!
M;?@I#XWQ ;W;N? 0D3O(R='0]I@893N0 N8\A3NMKMT6C&gt;#&lt;[! 8:0$I!PDX
MC&gt;40K6%?:1 I?XW;X /G$(WT$,H0I*W6$6D5R=O0 JDSC=D0R4C0D(X5T(X@
MT%CP_J($ZLK0_&quot;!?&quot;*U&lt;72D&quot;20*- -VJH .]Z* G)]&quot;]Z4.9*]&quot;($/'N&amp;=!,
M@&gt;JB2'@MH* ]9H2I/(U[C@_0J1B-&amp;-&quot;,$00W-VKAG5VE=FCF=G1Y)&quot;(+SZNK
MUL3K;&lt;ID:YE4*/G!PO-.26V9.JNTB;#?LG*B] 7U&gt;_W;&quot;,_7W&quot;IOIY]&gt;)ND-
M0Y2.%=Z'5QTJO-&amp;WH:0AA&amp;E&amp;_8J%'&lt;UG'NJGJ&lt;);R^IWGO0]6(?I&quot;-/.*M= 
M:&lt;E[$+;]MA6&gt;''?5&gt;)*H_V&lt;+@$&quot;&lt;PMM#V%;AK:%6FL.[M8DQ_K6N\#S22BV+
M2BI,S9A\6X7WG&gt;XS&lt;3+5&amp;.'IFZ \OU=X:]]D&gt;A;O/&amp;_RSLFT+7H9RG.KA7=;
M9N-=&gt;&amp;).MHE3K=6%D_&amp; W[7BW7=X'&lt;4[-=?*4B6&lt;3,_AQJ[*R=2:PK0[&gt;,'8
M^]S)ZG14X:T[ *#4Z98X&gt; /@1U\9Q1 *Q@%7?ED:X:#LT?!3%IX4(!G$K%=X
M$&amp;  6)NF+P PRZ7P_ERK#]S=1Q=F&gt;_+\LDD3=W=ISRN\[;52 W&gt;WK59ZK/#4
M8BO/VYT7=06*+V]WYPK/FZUL$-[O:;M3 ^&amp;PU92&gt;O#VB=L8G[^W;G89-38Q9
M+;PMFR*FILQL9;3PS;\\QU:_VFO2/.%]KO#TS8+'%\BSU978^T2KLNE&quot;*Y.%
MIP9:7;6[M6S2_=K&quot;VSX%/#?TDZD@ L&quot;@3J)KLU9^&amp;)F$&quot;B (]VD-=68;YP-D
M!@ CZC'H&quot;PA\&amp;!H,SK/&quot;\U/P7N&amp;]7;OS$[VT07E_HM4&amp;3FH3[2R&lt;/%EX:J_5
M!EX,?-HL/#79RJ.$]VMHZS2)=IHMO(W;G6NS]PP7WI&amp;#&amp;2V\SR\NO-Q\LU:8
MYD_=;Y7#PX#YI;&lt;Z=!F%IQ[) R)S8+(BSVVU%BGO?JM,JP^W&lt;HN%]V'(*T/&gt;
MN5UW&quot;F\#&quot;!7L$#@U&amp;C7UH0&amp;^ W4#V&lt;\0SE5..SN$W1TYC ^[R%T!LZU7O@?M
MD$ZEA\CE9=3.$.RDF*7&quot;^T.C=]SNME=X:[=5K?#&gt;NMT=E?F3I[&gt;S+M!JDX7G
MC5&quot;;*CR_;]+HY+GG3%;0SF]1GALHO/6^W55)FHYJX6F6Z=9&gt;X;F54[7P-(-2
MP+I%]K1M=QXN/&quot;,QW^[,F]1HX7G&gt;[BZW\C[3=0OO5BO=9N%]!^*D[5;V1C4+
M[\$&lt;&lt;RNE[$Y*(&amp;!%-YW&gt;0&amp;!F;@TSJ&lt;\53&lt;V8 4 @HTM[_#. &lt;XF^!5T6HYNA
M+4X&lt;QCL;? (9L\+S@ZW69.&amp;I-&lt;KS,Y%HM6W3&amp;V1EL94;.5EI%2EE3:I-NU/]
M'\TUZ]0:VH5-U@IO-6UW:K?P/F&amp;\POL#=U&lt;UK199P&amp;VUW7WD9*;59E!9P-^=
MK]V]]&lt;(7?#-WN]L$VGVX\#Y,&gt;&lt;;?&lt;/+&amp;9E:OY&lt;+SP,8&lt;6JW=PO.6TMDTO3I6
MD9X'K80$&amp;'#5&quot;.&gt;NO(!B+)%FQ&amp;DB#AEV/C&gt;K'(&quot;KQ&quot;&amp;(E:_'!@[,\V@ ^,[%
MQ#Q:&quot;V]/1!Q4M?#V:-B%;]*R*,9SGC@5L\[K)F^(NG&quot;R9DIJMSL-RIQUQ#-&lt;
M&gt;!QNE^F8W&gt;TV*&lt;^S)NT4WG_4=&quot;'O&gt;H7W6[:[O6?2).39,+R3IC+)GDF3@AB&gt;
M,;QKP[&gt;[RB\Q/,/*EMONWGKAK7V[^\DVD\F7F0F^S&gt;2!R)FV V%XVNRX?.&amp;I
M&lt;&quot;667](Y;9&amp;5R$)5F@$8( -0#!BQ1SU?51,62F 'E7NG&quot;$3,&lt;:TZ&lt;TR6&gt;C!8
MA/V@S&amp;X#)&quot;#E%S[VPM/;(I?GN0.&amp;MR;#SB2D%Y[&gt;M;N.X;).CXF0=KV2T;K-
MA=S6&lt;&quot;[D#AC&gt;P;:Y7(C$0DX-W9V&gt;#3G-9UVT\/XO.T-.S_7&lt;ID-NTVCWI&gt;8J
MI!F&gt;MR]ATKE-1]#P?!?.T/!.A]S/Q68.IL?%S_1B&gt;'Y7ZTI+9]-PAK&gt;!:+C&lt;
M9; A]P9@P,UIM'1@%FW=V9#[3LC=U;J4X:E\QWFAG6]3SCN_HNJH@MT%-Q,(
ML\X5A_!8@\#=?V (8_J%F$=1V:GT&quot;(=#.'6]6)H1WJ[F'3/T7&lt;7\@C@&quot;FH#]
M #&quot; -]9_',V*PYD@_&amp;*,&lt; &quot;&amp; )% &gt; C@@ F__\RUT'+311H.0KU@A[QLFN&amp;A
M';D-HAVA )\,S@1I^C&gt;3&lt;Y+*[U]$:@\% 0L#C0#W_9F)\H*% !5P!?&quot;]^/70
MW0MOG&quot;_M0V@&amp;%CHR93\*%79'_'[,P?A:.^C\J[-WH1;9%F!J.1&amp;+R/!#4,S#
MB12PNA)X&gt;%A'1S-F?@0PF_^KL!K#\RCZ5Z7$2T7,NIYERGP&amp;?Q9T,KP PI#X
MTZ\!/#QX5/J[LDM'\,$O3CX@0#NM'PT(9X26CGP4,Q@*&amp;+,-#.\' R,?*R\M
M)RDH$7Z-R]OSLYN8[?6:_IE PP+E'K#_]_CZ9J&gt;_F9&amp;[*_#4W+0D%!2(7BN)
M2]-&gt;TVBG#,^\'L/; *]7#&quot;H5P21.L?!?J_Q&quot;5:PG\']5ORK4QBGK3^ NP^N7
M+06C^S&quot;H+\P8/Z.Z0!A!OX%9I4^WPNR0,V+V\829#C%&amp; &amp;'6KZ&amp;)-J&gt;ED$XO
M1GMHJ#^ .(X0J68)*LN@&lt;#ND #A$U2L/S 9C*S*]H.M@Z=)4H60Z(@!@I&quot;PM
MW4\3L DLMKL.HCL#8'7^WMS&lt;_WO[=_?W]^&lt;C(T,#AZ&gt;7]QLC8CIL2%!7]N%!
M23X3/[Q^^ZZ#0]TKX ?^[K^S0P&lt;!P,;ROL_7GXC(V,1&amp;7#82&quot;NK$Q,+ X&gt;7I
M65WUWM_NG#[G7 ???U7(.\E/9D8TE.#[F5F637(_!\&lt;$\%0T?A['' !KU @X
M83J5(&quot;2X7V;R&quot;MD/=HI8\W(,3* *3RM0KF#$[ASDM93A$EX9V0^:MH@B8:P 
MU^8W*WLL03$]BTTD D #=(@@!TQA/M8'RP&quot;# T/TD,CLKQ P-C^YP*&amp;82*6]
M\27V@$R $21L_K+&lt;&amp;L28*S&lt;0YV) =(\PP_\O^QLSS&gt;QG9VU-75E;&lt;^UK&amp;SMK
M^]Q\CM70_?OSXPH_XA'_O_A_::N_G)ZW0\'F9O;RNIK:SD2WKO3?V#Q6-^=&amp;
M7@SAU/\Y.1D9&amp;!CX!3)I&gt; 0]WQ&lt;S/ NB%_;-?W\\Z]'PXA_XZSJ__K*S!+. 
M)K.#V*'/RY&gt;=&quot;U615S4]TYZ(6Y?MPZXW)?U.)/[BHI!!D&lt;?_$ZLS/&amp;W5&quot;'!:
M%*\L&gt;&amp;&gt;J@'T(2CM328(SPS-&amp;XN$4L&amp;8N5-W@NNL6$;?_$()6NY_=@OA _&gt;A9
MCJ&lt;!MM,!^@$_R0;T]-S&gt;Z^_IJ?+VY.+^R],&lt;U6,_/CL_O[W[UH%5:[ZP ?_O
MO\L%&quot;S[[_H*$B)&quot;(B&lt;IO3V\G1W_3R^,O+SL[EY&gt;7H[X&amp;0%Z7P&amp;#AB&quot;=0WJ\^
M38#8&lt;9X5]9&quot;;G]T%=K9;EC*\'QX&lt;#&amp;^MXK)K&lt;%5 .!.FH1XEM8&quot;&gt;9IIR:A Q
MYB?S(=;S /B5+V4:+5RT(?I70E89WM8@B&amp;:3&quot;KP,/XS3'L+\ UV'@)X!8P-_
M&amp;&quot;!I&quot;;(: E&lt;0WF;)L$C($J#R@V6$&quot;T(1\@KC#.\1,3$Q(V/\&lt;8&lt;/#VJYT='3
MT=U38&lt;?MS=B?,39J^WL[VWN#8S/]C1/[^[J_N__CT__]__CN+;GY]?O^E&gt;OS
MX[&gt;S&amp;_F,;%:=^XOSN\NJ[AS5\6KA?34(*[&quot;[C.K&quot;J]OL,-,&amp; __70EK^K&amp;YV
M&quot;9PRO+5VJ0,(6@X0-/4H)'6Q ;X!5='I9H@ RD'I#'[F(-T-EL7I 5V9P^G_
M[8A[0=W&gt;0!\!JP8GFI1&gt;0,B/2EDHZ5L[H0&lt;:7OTQ3RFYL $@&amp;.Q=:28)CS1I
M)L%6PZ%5 LL\Q8QA8V)&quot;]&lt;?GH0\&quot;H )* ] 2M[V_;&amp;MXL*%F1__?G[N_/!\'
M4.T-ZF'&gt;4W#O\BQG]KC=$^O'KAVY^.B''S]&quot;?\1FXO_Y.1U]?-WU[&gt;G'A@V%
M\$ %0)&lt;'&quot;TC&amp;1D+8&amp;V-6PP&lt;&gt; P&lt;&lt;\#L_:!4JW&amp;5\4L/3FC$?&quot;%:=&gt;&amp;$ZC5+W
MX+RI^@$BMT2@?^J9SS$T7M4/%&amp;/6BD @'*6]@&amp;.[^L5^ C[E(?X(S%2H$.AS
M&quot;30!ZX F\YX/?D4G-TAGK;K@&quot;E8^9TSJ53V7V&gt;9EU&gt;(SXT!@3OX&lt;R\A 4.&quot;G
M)A,LD&quot;U7P[,(?D'PA$#+]@8;%0-&gt;!K&quot;IL7ET^AP6H]_0QZR/B&amp;._[?&lt;_ 1OL
M3&gt;A*2HRCQ7=W&gt;&gt;)BHAHHO]^RJ%*3E]IX^ 5*BBIWM_ ]#94-&amp;BZ; GB ^AJ&gt;
M:,#Y;)]-P]M,ZT5?JU&gt;O7Z_!9SYM;_S^YDP&quot;\QJ&gt;-&lt;/'/S]_^O4@.6J(,S\+
M+]'L^J9 )F&lt;&amp;[F&lt;@1KY,3&lt;M\SQ)I/IBL U&lt;.8B&gt;#B'9MK##*PH$7.+WOZLS,
MSIL9AQ/CPU0[R#T&gt;S3. +L.#E?B TR K.+TPBHA=?%IYT&quot;$?PGHTNY#!W*KT
MV(L&amp;A)D)':4&lt;#AP,'M;:VK^_[\ [6_&lt;,)@&lt;3@82 W_T_;X\'NO/&amp;D15&gt;ZS^T
MTL3&gt; M?&amp;W!Y\+@4J&amp;&quot;7B7P#O/&amp;S\_( _?&quot;L;.G3L]G[^&gt;+@P%]W6\#!X,H@A
M\U&quot;PU57XG2.L2-Z)]ID X;DW/Q^J%1?_^JQ?W.[J$H]4@ 5@F&gt;9# !HS$Y^9
MG!!9^7!&lt;_9&gt;1OI#%!_ &lt;,])?9=9@I7HP=BD%GM2JME6XLTPO&lt;W8W#4^X:YU5
M6 @?B @\I5Q)(=L/X ,_D#AY$&quot;K2&amp;U^-PQ#.S-=CX5&lt;K #?=&amp;EY@!&lt;YJ&gt;*8N
M!OK&quot;PL*Z]B,-(\&lt;&amp;_/LF[(8-&amp;54,&amp;Q@(X&lt;PG:$&amp;-ZVEX;=J'&gt;;T&quot;!$CX&lt;.!@
MXUO#*XP&quot;K*4'Y@#I&quot;Q8OWXNP(/[W&quot;!-9CVIK4#.1K!6 X&quot;OK2%&gt;^0T-#/D&amp;M
MK1^S$LJ#I?^TAH!0EPW5,H\%63YA?F?R&quot;E!7IKHL/%&gt;L2&gt;HL/*P)&amp;#_A&gt;1./
MO(/&lt; :*!D ',21V=9/4=#':EZ0&lt;^ BB9UA!#^(01/&lt;SN1,,[6B7%[%(48G: 
M&lt;&amp;:D-@@K[&quot;].I8&quot;Q,[VMNS(#*KU&gt;)J#@!I^&amp;=S;'SCJQ_,;'Q^=C8V%A#LPZ
M8PL+&quot;0+S]U$3)('&quot;XUC&lt;K9@07:N!#VQ@Y.8$%8K[+ H&amp;AD(&quot;OC]8G6,P(!QI
MP?AL3@#_J!$?(2.['.@- /!@@J) M&lt;&lt;-'W!PUN\FT-&quot;00&amp;/CX^?&amp;QH;&gt;WX89
MGAJ=,;_8&gt;R J94#J_V#SWG=&amp;7]4'D1D29L&gt;?9RA2O_*BB*'.C1,LB%5Z4!@!
M F:-^_Q6[5= ;1+'!^&quot;!4 X!(:&quot;C!!1PDI$1.+E8 (9 @B3*.XZ9_@R%$0^C
M_\@R$;*3'$ (?((A6&quot;)A9 (9YYY C437O&lt;A4*K.*!SN&gt;054P\-&quot;3&gt;^/%!&quot;TM
M)A8&gt;&lt;5+Y_ L'X\.#/.'QSN_XKO:Z\L$']^@WZ0]'ZS^7MG3_V.&quot;BPX#6K]=O
MXL\'X/RN3L8\AX]S]R]3/GJ_/]#@A^/S-R&quot;TO&amp;1@&gt;(*,C P/&quot;QB2?&gt;ES#&lt;\!
M&gt;W^O5RH5 &quot;F&gt;&amp;U5&gt;D:H%_NP$@A3KCB3-+MI'FB)=4V249,RBC3F]8S,+G5X*
M\^R#V94YO=.&amp;$ EWYK_4CLPK_4!_\G=EU.PYQT&quot;QCQC [-^H@'LZ/Z=GI^EL
MGYRQ(/@A$##YH++,X+H.'T$7H#&amp;$UKX3/C(G?[F&gt;9_Z.!YH2&lt;=E6+U[Y 8N!
MQ\3P\6'^H6)@8L!R E=FW0W/?O=&lt;&lt;&quot;Y:&lt;_^OWZO_^?[O]ZTCTY_XH0N+.PT#
M\?&amp;_X_M@P/=86(0%:@-?^A&lt;?&gt;&gt;?$-S8\!K7?\.J&amp;I\#\.&lt;^LAIEG6!YB2K ?
MBN%@JLAF26&amp; 8QEU$K881=OQ#2^&amp;_HH9(- .]J]L&amp;)T!4&lt;'BBU(&quot;(*P;.584
M*N L$Y #=\,#R#L+D*P8^?#QKPX6?^SY5O(?J7]EB^H06N%-S!B&gt;C!MFQ9QX
MAR[Q=@. @9B8F)G9. _A?T\X\/T?\_T&gt;92]&gt;/-[[($9\E=&quot;9_H\O?V\_+[W^
M?;S%&gt;QL V;XT/:-?K/\-S[B&lt;4 5K%R_XWW_X\UJO/[P:BT T_?SG_O(YG^D_
MP &amp;!&amp;1D9F9M9(P('!@:D 0[ELSEK*0L&lt;/P+^7H\[X/#@E9=V)-=/OP&lt;_ 2NT
M\C@A_O/)FP,( N.&lt;&amp;/&amp;- #BYI]$5%2L@ =E(+&amp;U0A16$C0X(EA;(70&lt;S9Q=G
M!&gt;B&quot;&gt;2&amp;,E^&gt;]9RT8P[+9HR=)*&quot;;X/&quot;P;&gt;P469L;T3HR&gt;Y4/  J9/6A9])-6\
MH)@DLD]0S&lt;WL[.SD9*2L];^/PW ,27G&amp;NM_O_0_#__M]O9_'BX,]E6&quot;_-'\&amp;
M H$I7S?&lt;%0.C RCP@SU0X,*A9GOMRUM0:ILAX(/Y&quot;9YC7?OWO_##-:_]\&lt;,.
M,)*SLS&lt;W-R&lt;F)33ZO^$,6:XJ#'JAY\M7^#]_0%=7_0%F&amp;R&lt;&lt;GDD\U%&lt;*U 60
M R#5X?/50&gt;&amp;)62@0$GZ!OF87.@'1* (#6+LA!:RM]@R@9![2X?#.Q[%TEX[\
MHK.6L&lt;S! &quot;,!^I9&amp;I*&quot; D @4 2!^[)^'&quot;TD!O@N\!$&quot;5X^P53.0F&gt;1* K/4&amp;
MDF14,I,S +:V*D*&quot;1 B42$A(Z&quot;@H*&amp;SCNK,\7R_?+]&quot;I#@?9F+?O+&lt;J__H*!
MP/#^]'C77W\7&quot;D&gt;7_OT:O^J@/HY0-?\!S1L_&amp;S5PX)L9[?=G34,\^O3[]!(2
M$A&lt;4%!0V;6U40D$B$&quot;FOW&gt;KP'FSXN=;5@ 4J5[W_WSX *N4V_OC@H#.:@ (X
M5VFYRM\?U0C,PQA\0#\J&gt;06?18,9KO#2T^&quot;K1,L@+AHQ 8M-KO;8-KL!BP[/
M$!H&lt;(U]ZFOS9Y4!O,1&amp;8F. :WKBWY:D;1!V.!&amp;;7[4SM8 %Q$F%8&lt;\!*P&amp;Y-
M9J6&quot;%_ YQ-JZ]/#Q]_?V]N;FRLW,C0[/5PKZT/@&lt;#@;43AT?#@\#!K_]ZZP;
MQEV9O-E&quot;10?W2UY9UZO7_U?YI[CD?KCX&lt;/#3=GKJ4%\+'SAP8%.S\=X== ^/
M[^]O;V=GC#H:GH-Z@T&amp; (K@JO0BHS?35#/9GGMG+.KLSM@P=7KN5$0L'9F59
MRZ7.[L&amp;(@:X.SP-8')E9$&amp;S[*((V71H9=7?H\.Y&quot;$-'ZU9#,$[[,!]:% &amp;8 
M&amp;^!L]G-F9P5W&quot;14-%0F C0;%#@2JE1P=?GC\SGYB\/KHU]/A15#]H1X6I:G$
M3O^^?S\T;CC[2&quot;!7+#BX&lt;6&quot;@T*C0A&gt;T?^WUFYFP.[_(H%3L5T(##3Z-4E&amp; $
M75/$H%3EKNL;VE7V0&quot;CW930'&amp;9@=&gt;UCAXP.\'&gt;O0@ '8NR?9@.L_N[PN,W9V
M S&quot;S?UT/Z$$O(VU&amp;$LCC#W9AB['7B&amp;CPRH\$##)CFP/ RUO798 2=J_+6-+R
MI..@P E,%[\[!B=G(S,S,S$S$6H-; L/!Q^/!H8&amp;@M9&quot;CY\9-C5;9V^7]JBS
MV/CTY0*J/%Z@;\&quot; ^1O&gt;%P\7'668;*S:YO;I[V!A++&gt;B +-000+H]!7X\&gt;3F
MQ,S,S(S7VAN&gt;)9!?_#MGJ*M1_FZ39&gt;! EB&lt;&amp;AP*H)=7'U?J9C&lt;3\S1 5 *)!
M /SEO C$[$(_UY^JU^2HD :0V4O%91)FA7F$\TD4@5='O JB2)2%9#$!H&quot;Y3
M0D4:HZ&quot;,H#.GMN@UA@C:9 54!,&quot;9H:U8LE+5%IC9 0625K^E9[=D$G,%$3,3
M$Z6K&amp;8^/AX&gt;#A?$=@(+%&quot;H+@PG#.O/#\&quot;/CA^'EF7Q,SYX8607BEW\4:EL \
M93]_:D&gt;A_W]^\3,=#L]S/0\_-)&lt;!#D$!EP$#00/Y^8'YOG*(S,BZB)A8&quot;:DL
MY@65A@I5KW],6\&gt;J7S-?NF4@S_4&gt;OO6J58&quot;E 0!0J+SO$729!!%GS@(&amp;7$@X
M!?AE7A=N $SFE'G?DS@!IF4?H\+L,55PF 4U I 7&gt;XXZG)S9H]^&gt;FGQU+&lt;!S
M/)Y%60TY!3',6$&amp;.+FB&quot;!Y=AYMD^ B)EF'D ^&amp;)VUG3(H#=W&gt;G&quot;$%WE&gt;G&amp;V)
M8XS %W@Q X&lt;/0&gt;+ XM/J]?^M9]C51.YG4_B=9&gt;!@8.# 8.CX)W4U/!_K#&amp;\M
MTIS_,#!#:0-'RU&gt;O@&quot;V!@X.!@9F9D80Z,6 TO#RJ)(U84P\ 9@%QI1L%RL&amp;J
M0\HV&lt;0)V3)U5IF=X,EHKLBBT&quot; '#_,YF! Q.ZK'JF*GL2&gt;D#.-O[*^^#&quot;$,&gt;
M#&lt;^&amp;MC@C* IK,?;))@PSTY,#!P&amp;S_\K3*GRDHI@S7N^=E .2 #DY7,QCLSX!
M&gt;?5&amp;84[!\N)U&quot;Y3&lt;&amp;C.ZCC&quot;#WQROG0_91/8P,! ?@*G3HT;2E&gt;P%$P+2IE3.
M\#0W-MMKRFN&amp;N+ \&gt;2E/HM?&lt;8%V%Y977SB9G3%L41K(4@^!LP&gt;&quot;,AG=/U$&gt;\
M&quot;(&quot;@H!BV#F[9@8&quot;.=3$X=/U) )!T@1L@$&quot;&quot;(:2)S#4!&quot;@.D:JBXQ-;\#) J 
M$+09)9:(JLRXA -Y[D/..@Z25;O9&amp;PDU1E[DB&quot;@L3XRX (*9&amp;\F(6&lt;LKQ)BO
MN!@%42FWF%I$$EP$TL/R/'O2CN6[[4S:&gt;B&lt;)8BB[RUK7\ S4G D(%] &lt;U/3#
M&gt;Z:8T/R$2Q&lt;G]'.W&amp;3'\6HX8^6-YES: &amp;[ZNUT/47(KF(&quot;KH8*X98:C 2MV%
MD6PVO+9D&quot;L,D R&quot;\BAS,.485 0JBP+-QY.SALFQX$E&lt;&lt;P&lt;&quot;#]P!G;I!M&gt;(D 
M.YUHS0%0&quot;$&gt;TR]O_N+DYEL,Q5E&lt;(+C\-3(\&amp;J#6\!$@X/$T/JR,^F=O,&quot;^@0
M+RLX  X /X$9F1[=W&gt;3-AF&lt;F8HR8&amp;'%I9;: OLPC 'W83':Z.%P^8H28!CW=
MG1!2 Q7I_[&quot;JY C, A$L/1&quot;*9OZ EP'CH$)/=P2P=TX,3+/'DERP=P/,&quot;,:9
MQP&amp;W[LN@O  #O5*O*[45=Y;$P F'\P,SR)D!L5,PQ Z[0;;0$A@  RBAK]6U
M2=840(AX&lt;AD (@!&gt;VA9J1 HY QAQT.&quot;((W64M0QDMC N7=8P3L+X;=8U$L [
MP $PEC='/#HK8$0 *-&gt;1TP7Z# $$+F_#,;.6 4,(GYBV@H8L!2TSITL;W@U5
M-C-U=]?)@ UFMF0((Q  9_I,7&lt;+H4SH*+B4WJ%BL' &quot;8 *[ ?=Z &lt;U5CU0# 
M0+LA^#&amp;&lt;N&amp;[=#&lt;VO'NZ@  FWTO7O&lt;LJ.@/A&quot;&quot;&amp;&quot;&lt;9IX;GC:=J[Z=R^1BFKG-
M59\JE1'F1TNF6^K8D=(G8CS-M*KJLNA 2&gt;TB[&amp;V4MGZP$^TQ2VD3)[.\:@L8
M*]!LU4Q)DPC+E#2&lt;RT8=S%.Z&lt;&lt;I2J;YJ&quot;Z^TP*H&lt;L'BDE#:^:L7-,V 7RL75
M4&lt;D,)9GLQ[M6V3-9G_365QTRF5M&gt;]2V3?:1D:966(52&gt;R1&gt;T&amp;^9=3-NH_S &amp;
MZ$&gt;+.X2%B8J.CY.M7UJY4=/'6OUY5ZNO9$QSY/0PHU?=D_EAT\9/MD9-:@-E
MAD*AAVB3S3:9CK8*!(L/YTM]T\63%4[=C6W=M&amp;42:/7:;+%5:BKQNF_ZOI8&gt;
MOE,&gt;IVNM/($RK9PRK*X K(&amp;R?,M/YB9C-4X'89#&amp;6GG&amp;R&lt;2I;_)@JQLG\P$+
MG#;/JXA'\')SK;1^LC?72A.8&amp;?- *TNG0&quot;L[)\V3S&amp; K[&quot;X=&lt;SIJ4O@0;C)X
M _  @]&lt;6R!CX!\B4+=1PV3JT[L8&gt;V3=SEN+6B9HPQ1@0S#&amp;7$%&lt;KE)B9G9ZB
MHZ&gt;E9JWV&amp;,),G*X&quot;K-E*[67LJ\3LKG.H6UXK/&lt;CT=NV)DT''8*LWF&gt;=!BPG3
MXLERJ$PKOR,S37I.@DV? ,OST#.]H5V6,J;G3&gt;$5X8@49L(B'-8'61S9;-64
M2:.RR0(&gt;O&lt;N.**C+&lt;&amp;5E[*Y)*_BYR,C.QB_4:]H(DJUN0C:O7&lt;Y*ZR!YE4^Q
M5L\7;CXW#W85M@9;J3%(Q:59D]95F3/I[;VFBQ=*/&quot;,8-'LGG0%!H$3IX#Y(
M$*I+7A^@*#+IR&lt;L,PP^^8S;= PC.5&amp;\'#&amp;88&amp;+:A/@&quot;HK*VQLK:WN^%VK=X/
MW^QEQ.E *E 73IMQS+8ZULM&lt;J]RW7F&amp;73WW39WBU0@%&gt;+Z^?LTEOM5)/;6OE
M%R*UE;?O&lt;&amp;\KM6?2PNG[I\S&quot;FB:[,*K1OHPZ]4&quot;U9;QIS8SZ%!TRMKT:HZ0&gt;
MSK#&amp;Z9BMOGQ\C,5I\Z^.YW$9P&lt;?!&lt;)XGFC*7Q4L;KOH*%VMP==G)GF&quot;T&amp;(X@
MK@)YQFD+&quot;SMRTE@KK[=RP^V0Z*05;(A2V)=-JN&amp;;/^P9+VNZRQ= 'X$; 0@A
M@&quot;#L0!@$@#U^S[,*SU[L@'X&quot;F0?-]Q_=V'YC$);_!3^#N 27]B9A2TZ\C&lt;7&amp;
MRLO/E[U;;&lt;%5O)6F;G4@($!:!:,B&lt;J; R7JKC3ZA5EMNI49+7A 5U*-Y:&lt;ND
MC5.OSU6W:&lt;VX3TXROU8:&lt;:6-D_=;K;'?RW#:.B_M_/+0R;&amp;2DT&lt;AB=&gt;FH]BG
MFFY%-$D+P=$-+%7BM%9-=DY:,92K?*XS2)A:I?S%(J[ OD./N_!&lt;T1UZ-*S*
MR2/(Y2D(83A4X/0&amp;7+TE7HV36KFU49.EQJ;IJ*S]LM%PO0$QGZQ$*QLGS\I.
M3GB&lt;RZ#P98BT#6'$(\^&amp;,8IALSN]Y0IC@);GR(3F,&gt;QS82#]*)&lt;L  &amp;E8)5V
M PE#D #Z 98\ -#4U=G:WM_CL]6ZE=^&quot;H)/62&gt;.D'%&gt;[,@V\E1XWI5O]&lt;9*=
MD]J362=-N!RRZ;3VG1S,%&gt;U+#8;3DW7:8E,)M:73QXX=2@NNL;2_E9=.W@5E
MZJ15.IRD&lt;3OIM(E5]DFIE;&amp;3J58=4F;&amp;PVZU'&gt;!5%&lt;#&lt;4N:MM$0LY\A\L6]\
MR&amp;6^&gt;&lt;IIK;9Z*Z?'QS5C4[756SO%6VD-50K5$91;&gt;9NQ=7&quot;Z&amp;P:U^@XB&quot; &amp;/
M8H2'# B &gt;$W/[P6&quot;M-;OTT(9&quot;^9*Y% #&gt;7F^064IT@_  2$4;)];! X&gt; (7M
M)?R6/@#DZ.GJZ^SM[J-/)TU$&amp;'&amp;2D_&gt;)B4@4NX8Y:2Y5T+1\-&lt;&lt;TG3E9)F9.
M]J !+U-GU(*FW+M*UF#@=%H&amp;Q&quot;%A27&amp;=I-3,-T[OY399H2Y$=Q_RFE3]'7.Z
M$*)QE:9629PR IHT&amp;19'C5/&quot;3UADF.D6Q,*,N$FSI ,X;?*&amp;##=I WF3M&lt;HW
M+[5&amp;GAS8;1T4&amp;,O&lt;'#+&gt;9*P&quot;XL7(3&quot;Y6%]S(Q49_4^?IF+04*0/+D%2F'^((
M-VD$81R9VN25QZ3)!DP&amp;:W++R#&amp;]R&lt;@NDP7&amp;M&amp;E;KEHFW4 C,/&quot; $,( U&amp;40
M, .@'L].:,M?@(&quot;@7#\A&quot;S?6@] 0W+6(9Y7;P7/@.$R&gt;4S51&lt;($EH98_ ._P
M\?+S]/7VUM_!_QGX+,' $!!2&amp;C&quot;1'T@0$!='-!#ZD&amp;GO_7+#'&quot;4&lt;I ]:!AV$
M 5[!P&lt;$,TA9:9![(#+%?&quot;,P,#T)&quot;H#,TW 93P2DH&amp;WHI&amp;B'-; F[,,TA)57O
M4A!&amp;D#@&quot;C+#DT.\985PR&quot;!(D)&amp;+&gt;)-#%'&gt;UBDYJQ3]!&quot;&amp;L3&lt;BI@01M]+1=Q4
M0: 0T='1'=PV,&gt;\&amp;4HC)?/R. 1VI?,G!(D_D,BS'EQU!0=%Q&lt;&lt;_@8T^C+Q0?
MRK0=2A?*R2+O[&gt;WOTB#-8,[&amp;9L? 8,W-#]\=WP\OPQO-H$0NSQ&lt;7.(+-U0]/
M8!E7%S!#D, (5@7D&amp;(0QFD-QT&gt;,$P _M&quot;QH=[8,;PG,7'.PD+E2T#QT=EA;V
M#,&quot;!RP_,%J,E'@SFB!%8U\(G+$J5&lt;8P'?ZR ) -Z ;5'Q.SAX)PLOZ,5HI8&amp;
M)-6'C 5RCKCBD*K[EHB^E(B)]92/CXR@EX&amp;3H(V!A(6@@ID#U0J/DY.&quot;CY&gt;@
M_8:@@Y*%DY2@CXZ@LK*NL;&quot;NN;6#U\7W'BX^3EYN?DE-'G9[=_]&lt;KQR&amp;&amp; +J
MP'SR3L%S@9([@?6(AQR0@6W_&lt;MV \'ZV&amp;[0:$8;&gt;EA&gt;FU&lt;Y\0M(AP4^K)\AQ
M*@RE': .K3-_&amp;/?!7(#.&gt;!G:%S(0%JQQ(T,'YG__3V,X96 5^!7P?-JPD'$#
M.\$J!I^ O/BM-U .?ID/)2$W2XBHW9SG7SRX\%[,&quot;_)*53LV(&quot;S].GE;3@_G
MA0@!5CO? G#,^6W6^O!F'RP!!G,QFL&amp;=WN-.&gt;%;04 &amp;(A-&amp;:#VQLF:XT?Q(R
M72FH:@'G$%WTS3P&lt;_ BN90@PH#Q!S C#_'^57 @H!X2E+R@*'B,(&quot;CB6.%-G
M0\\Z1FH#IAXG+&quot;0H+1!\B$-S,Q,1F &quot;&amp;ZP1JDQ %2GHDI)B0D!$C55C,-&amp;04
MM C P7.-0L?GY2!A)RO)_%0S+I;9 YR_?[]7J@0L;RQ3AL,J*C%E],;/:@E@
M9?RPG?ZJ&quot;)I 112SA_#N$#CU.D &lt;85$W5P,* ,*!SDFAGGU+0^P). QGX8%\
M ;L!/%@MV'MAB!)^ASX#JZP_/2(+U!1*(.!#Z97* DED#C4 5B?VTN)!$(Z3
MAVC19DEK!4$&gt;P*0H.I&quot;I*N.C/&lt;60 !5C*)Z!$C@4_MW+T+C[1F?W[SB-'Y6=
MEQ\18V(R;DQ84IC87'P_.B&gt;\#PO6+/4%(DJ5Z+J[@9Q)&lt;OQ\?GY^_GZ(QD9,
M=C(:RBW516;XJ;GI^.V%LJ(&gt;J?&lt;G&quot;D5&quot;NW^9@6IT%?Y,2P&lt;_EG9F#QQ% /Q0
M #X&gt;#.N7 1Z(E2A!&lt;#5P84B&gt;;  *^FH@P&amp;S,EH6$M@0#H5X,+'EC@H FB5K/
M91 W^1 D;0@5I69:/&gt;7# ^*R-#@UZW&amp;A1F2I!- S1I-@-VR+0):!!8&lt;53X T
M$:P0V$/MXV.']:&gt;*&gt;$NSH24LLU&lt;YW=B&lt;4-&gt;X4##W-;KP@+('!Q\O\DGC^&amp;1D
M) X=;! 1,7@TH1-9X+A^N%?Y\?/# AX^?M.?]Y7K/[Z&lt;G)C,KA\F)B0V.L@(
MB(S@^/38V*BM'^_$KV'&amp;J[L;.1T9'0K6WR&quot;SMK' X.R??M4ZNP^K&lt;L)_?)4+
MK&quot;K1V@'&amp;QH=#$,(L;X@BGIFGUTX&amp;K&quot;($$X &gt;+06&amp;W1IVEJG:;L4MZK8 2 :5
M='&gt;)P[SDKM46^NBL9AMB&amp;/-FZN?G&amp; '[R?@46X W@(K'AQ( Y12W&lt;HQ0.WV5
M0%X)T@(1OT$9S'*.]S&quot;8SOR&quot;2VN?-7 P&lt;&quot;!@*+O] @8'LNN-A3&lt;6.B(C8T%V
M2&lt;+6U$X\/SX_O'C[[J@7 _CON^43!0/A?L]O[_^LK&lt;XL1&amp;.O&amp;8)NDD-K94N5
M&amp;=*8X9B9M&gt; .# X$V:&lt;+YK3P\/C\Z!VJ@0IJ]QY)C.)@9?@&lt;_/^0!&amp;)7_U#-
M%JQ]8$ 8&gt;J XMCT?4$&quot;?\?F&quot;F!E=%C'\_8DJELTX'X4P!MSXJ&quot;&amp; 4':Z8VQ0
MA-E5!&amp;#8M@57&amp;!^$' + (?6/#GFQ&quot;=L!?QAXZ1&lt;I'+!P\%D48X(,0$#I&quot;J&quot;R
M%E8#; 7&amp;&gt;&lt;\*;* 0$! Q,3:W(H&gt;'.8&lt;'#V^ )G_9T5%;47/$C(C613$CXWD[
M&amp;QN)P&lt;'@_/D1$R,B/)N\OA&amp;1F)APZ*RXF)$V[F-C;&quot;,Q$1F)C,3&amp;!P&gt;+8YO*
M@NI4&gt;Y_@X&gt;7&amp;%N&lt;-C(QE%D1S@1&lt;ORDZO^I2% V5 JE7\ -][51;P#UBARNBR
M8%^Y4/7R&quot;/_/&amp;#_GNH 80;A-WP$?7Y0![$D[ND$M+#\#F0HQ3ORH WH&quot;J&gt;AK
M$(+]B$XSQY,&amp;&quot;#^#&amp;6UQ0=:A*\$URZ#R1M,)&amp;6194[*E@,0,CH9CF%ANIP*I
MB#7RT+,B 6!,D-ZP*1',#0 I0Z!5&gt;H%&quot;0D)#0]J AFC@XJ(!T/JCN[.SB0:A
MLL?#;YN?O+R_\'A_R'[OU38&gt;:EY0:OW_U:JYL!.K1ZX=N]__P-_B?\*_X\/V
M6WT]/&gt;V-S&lt;7-UJL!A4T6!T&lt;V&quot;T ^\4+P@)8,,H   P\^^*07G2O\_+SGC?QR
M#QT+#B4'P,$4!W8(&quot;!P$&quot;: FYP\%* 438F.) F3E8N18#OS2B@ )(.A@1$QP
M4DTP[LJB-F! (PJ88 (&lt;%(&quot;I&quot;.JBUQ#+T]0@ @0D[%/@0 +@#!C('5'?@3^!
M/6]UV@&quot;FSD\#PEG%2KN*ENS:=)V $8 &quot;4 $\]?TX[BD5H2W$AB@#Q(2$A-+0
M&amp;Q43%0,7H;&quot;!L(A0&gt;')/+X_1U\3GYR$Q'T'#/ &quot;01E6,&quot;TR.JTUW;_CP;[ 0
MO Q-GKH2-ZQ6PH3!RXLC9^&gt;%#8$-$0H&gt;CDL+6&amp;A(:$#HZ&amp;YC(2,A(2$ [P%V
M%:_W?PHT&gt;PI95\4BK&gt; K72E\F&quot;[!P\\_?]M^_^J/-65$&quot; 4LCXBU!=8FF!4&gt;
M@@'($]8@_1DSV\OL3)(:K/&quot;&quot; &lt;B0U9@)0&quot;8H!Z*4RS!B^1S5N#D0P$ IIJFT
M[QC &amp; #JB/T((,&quot;;@!__Y5@@8LV@,12959T/,3Y;@B$W]3&amp;.WI8G--'&gt;?.L,
ME#8&amp;$Z4.' X&gt;#/I&gt;7#\OK_O_76H'@.IE&quot;8&quot;&quot;B7Y_7X,#G:-(A&gt;P%S+L!0L3+
M)_;/S#X\?&quot;DJ$23Y_Y.X6N3LI1&lt;&lt;&gt;Q\Z&gt;GS4M-Z&gt;-96PN' X&lt;'@P^13F4&quot;BO
M%PNHOX3J]&gt;65L)9 @&amp;%_@RMA*W:!&quot;M(4_?KPJ&amp;A78 ,1[#?559R $G55I:'A
M35''V/.$?XS0 '@4$_ &lt;7V'U5 7TU%&lt;',+G&quot;RI AP $.7S5;5IRSY0Q6F+:J
MK$@/B A$/DY&quot;&lt;R#%BQ#/(I:0*,7J80XVZQ+9GQD^6$&amp;  X2;9C$[ \_WY]&amp;$
M-,*&amp;PH)&quot;'Q??G0H/!@S\VZ;,1HT;$H0*_%3!S$&gt;$0+*ML%CBSD$&amp;_-&gt;&lt;AXQX
M\-GQ()U&lt;,P(%&quot;PH7-_&lt;4U)$C1M^KLJ!^^Q$;$X' 0?C&amp;O8= DX'P(;*-0V%#
M04)L&quot;/KJDU&gt;K8Q&amp;*O=7JPD&gt;N'NJJJ( I+0&amp;JD(FOJAJ+] 5EJ@K7 *LXJ#]0
M%NT %Y08]RT4+Q&amp;_ 5?6X\.@ =E,TAYG%A_=&quot;&quot;C6*P /? =H;&gt;.O[(1[&lt;&lt;2.
M!Q@^ Q1MZQS)^)QJ&lt;HQ*(**XX,, +6&quot;65057M8*. 05E0[3\S0IX&quot;9Z#1]DB
ME!E3I9C/EC1FVT;&amp;0F%!82$-#0&lt;*&quot;QOZ=037UU* 2/O4_DB*II\\] $?9&quot;#D
MY;.[Y%G[#@K1NP8#?%\T4#$P8&amp;'*[(_&gt;_60!_]2&quot;'Z&amp;_@SSM/]'C4N*:'5N5
M%PT:M0G0T)53 $)B8T*&quot;@H:$G_4#;8N.M!-HM,/Q@ I556R#4WV#S54,L.S.
M!HE88FAG4W$&quot;@D#9&amp;:SXPPCALH$U6!W%*)@#(YX])I@#]$] RAE]RY&quot;!$5:P
M4HC%A@)&lt;&lt;;;I,9'D3=\!C &quot;&quot;+$C\,2!3\:0(AQ 3V?M&quot;4BG &amp;;! &quot;:+&gt;?%X&quot;
M@!R/P)BEERE30%4P@+-M2LXPL 9PGPHAU$L0LUP0&amp;)PY##86UE='8E'L!0-1
M@^,\Y?&quot;NW_VUYKKBT0_R4.6WGM??[S?H+?+4PV/4;]]_;_+/#^#?RJ_BS#RG
M#W7[GZDZ?KIWH,&quot;*P&gt;&quot;LGC!L:,:YA'CH&quot;,P(E.'F@0AJGP&gt;T,,A_OU\J%6D/
MX*I5G$4'H$ %DSCNOF\_* 12TAM6&quot;( &amp;M%2GD:V' I: )0@(Z?LP$'LAB&quot;I6
M(3OW,&quot;F+81A9N0?8VOB (8WP3((X@3(.LQGYH)C&gt;^,&quot;^@QO,?;P],ZP'%(9@
M !G _&amp; (8+C5&amp;K3 7C&quot;L@XD_^#G.] BP]7&gt;&lt;/_CX8VAI-_F[ 6#PK&gt;!^A8G%
MAH[HLK=R3&quot;+ 0CH KRA_FOSDDQ+_)???U^_6_^_ -Z8.4 *F!T X.0=['N&amp;_
M=]!@[\R ! &lt;U!S_O%Q]_[XWK-T%U&amp;JA. :Y*H-*@?N#X9'\R1RJ ^#GWM0$'
M+Y5&amp;OOI43'HZ80&amp;,)QMF6PP[Y ?A*OTX8I41K&amp; VAQ/AF0%)TUA8N0-P4,Z@
MT5I.X/6T!4KK@88XA]BR'F0&quot;5# /:6&quot;Q #@%HQP!/),@6#CW38X&quot;&gt; !3F4];
M#3;YRAD1B[9 EC.GPU=1F(B9B7H?YWI_?C_^ #A[13_Y4:+F^$&amp;7^/+Z_/[^
M%G]?/]\Z^WTLFL4XJU7 OW^^6=)!#$B2N$YU)QZ?+XN&gt;_A\5(US^18-'%9?W
M7OYF_/^*IZ01&amp;1&amp;9D?8'08NN#@P,'D!Q \&quot;$5?SXZB7PX.! C[:@#P_RFBB%
MU?;X03(X[JDDV@6?F!][&amp;81_ [X#E2&gt;%@ ',3(0@F?^7HS!-[ 5Z Z@#:H^$
M_,(O&lt;YP #A&quot;E?BI)D?VHE*D!RZ#S-*Y(*&amp;*P&lt;J60S.4.?6%5_LH(00J^&amp;);#
MH. D@9XFADA&gt;^P7)C&lt;ADS&amp;1D9-BUUI_'&gt;0Y)_(12ZO45=^/[_&lt; -?M^&gt;@)&lt;H
M# \GGW6$%4,4N;PJAT&quot;%4($?&amp;ZK4)0M\A&gt;&quot;[ *$&quot;#S]RGGZ#=0$_(4K&amp;;UK?
MO\&lt;;7W_YXYYPDI.Q$R8S)B9Q?4$,! 39):U&quot;**W^H(Y&quot; =:3!PD0\:A0@/VT
MBJ 2 !4 D H0W^5#7(E;V=,I$ )B#&amp;TA%!&lt;8D9H&lt;/)&lt;A*820*.[&quot;H'1P0K'.
M*].NJD@&gt;% .+6;5@4 EE-\!^C&quot; $SDX!P. $E &lt;P1JF;AD(8X,(\*2_V4(C#
M3O^N+B)0UE'%)&quot;C $C*?!)2@I*8F0H($&quot;'[@2$#(0&quot;@H2/,%&quot; &lt;GGR?0&quot; 8#
M 1 6*$(5@L6&quot;P'&quot;NJ/V_DWI%JFDNT/+Z_KSYE*!(@(,''S&lt;;$&amp;&quot;5VUH(:!3^
M9T7D^&gt;0&quot;$@(3 A04$B5E9$)!(! CKNM,#SX0U@I_!P&amp;@ 04*5Z]$[ZA5OLB1
M_/ &lt;?\$F#Q\?!)=X'PZ(DE3T^^H_2H73= -8*49Z']8-6&quot;]B]@$0 8;6@:L2
M@A @M+&quot;4!413-B22LI8197G$&lt; #&lt;UGSL'4!U8_#JE*OA\+%/9&amp;\, *R$/SV;
MP6P]A0(R&quot;. #E&lt;'X5NH;(-8Q,=W@/Q!T^H(7V#J&gt;G./W8/'G]N;TDW?(B(^3
M,P$CI%G@? YH-0TR$1L,#@L$UFO5?W^_?GU1#&gt;O_JO^OZ*L'^UVJ7R'A^W^O
M5J[8['ZP3(C8,'!0(.C0F@&lt;^&lt;/CV$Q'QDG=3!H_G;V&lt;O^?-$&lt;/@FCG*H('&quot;,
M#8&quot;IN!*\AY]C*J?D0:%W=2S/,@ETG%D57MA9 1Q#;P8#X&lt;=Z&lt;U63!O;81'/P
M4NQ' PK(:BX&quot;P(@!@MOQE$&quot;-KB^0A^P!!B.4Y9[D P^0V FK!@W,&gt;](G%^&lt;/
M!MVXCC&lt; &quot;V5/,VIF3@^P9F(\#%@) @8&amp;!@&lt;,&quot;@T4&amp;?H\_+!X\/!Q]=!?H*&quot;@
M4&amp;_M?$ L#Q=L^^]\;WGN]N[WI,9R8#!0L&quot;B8?(&gt;S8&amp;=_9B9R@F9&amp;V#_8B!GU
MJ @CF#[T9&amp;&quot; (D!'_P&gt;JY*,J1S ^ SL&amp;9\]: *Y '5T4 P@/A]48\HW68U57
M-7+J&quot;L?93#&amp;[L'RZMDP*_ &gt;[2C\+J.A!.7E&lt; +*(/%D;6LBP= 5'Z$(B&gt;;*/
M+*)03J9 8:R,[ $E9)QGZL9,,KM)=2K@23(^=C4 8V-C(WPS0&amp;H!!PG\U  &lt;
M!DI!@!DT(5ES9[?G_/S\&gt;+EXN/G@&lt;6TA0 #9!  '&quot;W&lt;&gt;^W?  WM]&gt;CV8+(2:
MSN;MY^@!#@5%  6 QL;&amp;Q,+FS#&quot;&quot; 0I5^O[X5T#W__CP 2JP&quot;0I5JH8EJ&quot;U 
MH$#H_=ET/[)!#C@)@)(#(//Z!$SMI;Y?:2@@ ].NAA1OCS &lt;YD)5PE59!@S@
M&quot;0B $/Q*RLD1&lt;_BH!MI7]AQD2L1M &quot;&lt;!F!Q]9@(6J@@,EIX .&lt; !+EI&amp;!4(9
M+GC@ 200!R1&gt;\,!@,:Z0K+H@@G*A?//:EC( ,S$QRF/1#P,' P,#@X&amp;&amp;@(:]
MV1PGSYS@JB\Y*XVXV?D;L42*!LX:,&lt;A40,# '_\?O?\'!P=^/S_@X&gt;'AP?.Y
M_1:57P!A 6% VEP!4HF *GS,C(PZ;384%2L5Z@55KWO_:0&amp;+_Y(U]/ZR__VH
M((# Y/#DAW6&lt;$!--' '36@/&gt;13MJ1$)'!Z)%-/(DQG4-XJ9(&quot;*0N0V,H9@N)
MLJQ@]I%\+&quot;IC?@1*V-&quot;*F3! 9Y]/4U;[()GA^%I&gt;&amp;,$. !M #^RIK)L&amp;2I_3
M;6 &amp;&amp;=[\(&amp;QQ-B^&lt;P%_DYX07]):4?G&lt;92IB8B(B(8SN#W)*7H,&amp;@T/YE_U-A
M&quot;203F^@34&quot;!@8!#0,.&quot;X2BT/'P\/'A[!P8&amp;!X!XT ,:09^8G X#H!0N6&quot;(&amp;8
MF9D9&amp;1$1$98B^$&gt;C6 H'/_*O$!&lt;&amp;FHC!A4- $Y,78B,.J38P*COC!/#*0R&lt;E
M&amp; 'RJS.C,PQ$&lt;4-WD*:J0,NI.N&quot;S!8,( \*@?8)X(S]2&amp;-9.&quot;F-C;Y]HZ:&gt;'
M 1ANBA:UD+('DQ(&amp;S$\'50 O:_CFKP&quot;#&amp;P(,$0WF0(1(_WF:'X&gt;9&amp;'K8;3&quot;#
M/@+8LE,=)!_:F6/ !A _ YCQ:&amp;:&amp;#/H#.0)J3R_H.1XRXA+,R:)2B&amp;36%3-G
M,NNB59V?#+#,4; CD&amp;&quot;4)B$!99CATSL8QY &quot;&gt;-H62Z&quot;4)8UB41&gt; /-(NTNT 
MH&quot;$LX&amp;P(.@J.@T'@.&gt;IAXTJ9 $D .$ @3-[.4% @K,@$ PIY.X(S @,D $7U
M0+G&quot;0C@8/ &amp;@$##%&gt;SL53@%P@+2?&quot;/T#7 Z&amp;&amp;I:EYAJ$&amp;*B3\,@3!0$Z-PR$
M@D&amp;XGQ,&amp; ?H&gt;)3 S2$ZE &quot;436@#VMH!  CA%U_'ZI !-.30&quot;&quot;83V':4P&amp;:91
MMZ;L&amp;,P90:;&amp;!5*-.UB(-_A[CI@MN #.@GR$,,!W&lt; TW?6R3NWHYW!A!C-B7
M@0'&amp;V0&quot;;M\Y!1GH(Y5R5P/C&lt;0T  S* _*4TF%E/&quot;#$E(GZR( LG@I!R R 41
M/!&quot;(8. ,8%!&quot;!TP)&quot;W5&amp;-];#&quot;'11[@'8%!\/RDVN\)4% ODH0D!MA8&gt;(&quot; !T
M*#  P&quot;.K_D,&gt;&quot;H *L0L'N@A( @SL$!S3Y@ V!W=)BQKL$3AQW@\;70$^ W,#
M&quot;&quot;'^ANZ9C&quot;/&quot;Q-T8.YP &lt;8)] ;$!!(/&gt;V^W97F)H)P&lt;0'P.IMD(72?P%,P*3
M9@!@P,;#2$1CK@!1P$^G!T&gt;% *I[R(4$)C.NF,9!$,!DMB:E$-F5 !3%D 6%
M_&amp;&lt; 0B+@TJ,'&gt;D*&quot; 6 #\M4&quot;@&quot;03B.+A]2&amp;!C=^  X+ 4MC59I$.,4P!X!_$
M&amp;2F8  A(91.&gt;0(*$AP+ACP!-52+SOV#14X&quot;DP &lt;#P 3$D&quot;6&amp;6H\$P! !#1^!
MP#A&quot;2OP@\15$)&gt; !&gt;  8%-*:AL'E0L&amp;6!T)SB7$#!L#$ , &quot;DM  3-&amp;*G_ '
M'B4&lt;(4\P(.B C&amp;C #0((L@ F!P^$&quot;*5T@PGC* %_H+P #43&quot;$+I  )@W_%W6
M]((X&quot;_&lt;RD/B$$( W! $ UJ$08,; _'J,4 $'_IE P A@@!N[^ C&amp;?@B  !W!
M_ ##ZQN&amp;E@8 EJ2](('_J0&quot;-(-&quot;-(=&quot;I :( XSO88-G VH#;!X/Q2(&gt;0!&quot;&quot;(
M006&quot;B00)!KT BIT !\K0Y2#D__#[K38(3! (EKR]E@W&lt;7Q04!&gt;/SR3J6@W\0
M;)$4%&lt;2O%P')2Q .43$P,&quot;6&quot;YJ59+DID)$$(#P7.H4$$&lt;@(4L S[@HDOH9&quot;&amp;
MX@(14#HR,+B3$P$&lt;1&amp;]J0D!&lt;TY68#*B($IP0T3$6&amp;40)AY&lt;*=#FV).&lt;XDQ%Y
M321N30Q&gt;#P\,IR_#1'!)0HR,#6/%48AI QJ)9&quot;,/L049)0LC1UP@&quot;@]R*ND#
M&quot;V B&quot;&quot;X2+G0[&quot;0=\#Q@I2( R#@&lt;@(O0@,B(L$GHV-&quot; 71WH((P,Z&quot;#$D%P4!
M&quot;V,: C4(&quot;08,&quot;2T%! G64Q*6&quot;%P.!,#SX&quot;0@LA$)#07A]0586HTY 0X+&gt;C4-
M%1,N 9 H VDT#A0@&amp;G072Z P#! )A@\4$AF@H4 @$Q ! P4&quot; 4(M!@\2( P/
M!_ [#PXO#P8&amp;(2XNK(U8( @%$@4G$R 4#R !# P@&amp;0\5(! #+0&lt;5&amp;1,AE@0N
ME@ &quot;;B&quot;6&amp;+OX&quot;PC&amp;!YXR,#8QUFM79P&quot;-8BZ-(=&quot;-A@+CR&gt;6B)[VZ9,,$J0^G
MD]C)//()F&quot;@]V43ZHE*@&gt;(0!N5@(F?\$E+VYKUB9 /]!/O?.&amp;:[.20B1=^Y,
M&quot;P63C(6$AX6(KJ&quot;)B&gt;C(L7K EM 23LD T &gt;0#JAHJB!.!8WH!^Y Z@PURN&quot;;
MB-#OS'30S[PG$7HMO&quot;@%E&quot;[ [W(!AJTSK^Y/!= #[E %Q@'JZNKF 6 QLAL8
M+3DV.B $!04+ 1DO Q(%1*HK !@@(&quot; .+Q Z$Q09# 66'P&quot;I&amp;\#J7] @J.5@
M&gt;*DT41N@A*+]($3A!WT@1@BB +UA&quot;)W&lt;0&gt;C0]ZE,C0T(J3&gt;% 5BB'[V,A)TP
;_&gt;S&amp;]TP1EX0\ACX_NH0&gt; USE@*(^L3N1/&lt;C0
 
end


/S02::$d000:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


                               Scrollies exposed :

                      A look at simple scroll-text routines

                                  by XmikeX,

                      with contributions from Asger Alstrup


The first 'effect' I tried to accomplish on the C-64 was a &quot;simple&quot; 1 by 1
(one character wide, one character long :) scroll-text mover.  At first,
even this task was a chore.  With the help of a few friends I was able to
wring it out (thank you Paul G-S) and eventually come up with the source
as listed below.  However, there was more room for improvement.  At the
time, Mr. Asger Alstrup graciously volunteered the suggestions following
the original code.  I would like to thank him for his insights in this
matter.
--

!Simple 1*1 Scrolly - (C) 1994 XmikeX

org $3000 - a fake op...tells the assembler where we want the code to start.
            change this as you see fit, but keep it away from your text data.
         lda #$00  -
         sta $fd   - This is just so that we can do neato ind. index
         lda #$32  - addressing later.. ie., we are setting up the
         sta $fe   - spot where scrolly text will be pulled from !

mainloop ldx #$c7  ; Prepare the scrolly register for a &quot;hard right&quot;
bitloop  stx $d016 ; shove the &quot;hard right&quot; value into scrolly register
         txa       ; Preserve X by shoving onto A
         pha       ; and shove A into the stack (stack = temp storage)

             ;(we need to clear X because we are going to use it in a delay
             ;loop)
             ;(if we don't introduce a delay, the text will scroll by
             ; WAY TOO FAST to READ ! !   Incredible, this 1 Mhz bugger
             ; machine of ours is, eh?) - delays not set in stone, play
             ; with them :)  higher, lower, etc...

         ldx #$05     ; just a delay loop - ldx counted down by dex
waitloop ldy #$ff     ; a delay loop within a delay loop
wl2      dey          ; decrement y in our delay looop
         bne wl2      ; keep counting y down until y = 0
         dex          ; decrement X in our top delay loop
         bne waitloop ; repeat the y loop until x = 0
         pla          ; grab X from the stack and shove it onto A
         tax          ; copy A into X (X = #$c7 from mainloop)
         dex          ; ok, now we countdown X
         cpx #$bf     ; coarse scroll anyone?
         bne bitloop  ; back to bit pushing
         ldx #$00     ; clear X
rt       lda $7c1,x   ; scroll the last screen line one char to the left
         sta $7c0,x   ; we are shuffling one char into another
         inx          ; increment X
         cpx #$28     ; hex $28 = decimal 40 = width of VIC-II screen
         bne rt       ; still in coarse scroll?

         inc $fd      - here is where the indexing pays off, with
         bne ty       - these little lines all we gotta do is stick
         inc $fe      - our scrolly-text data beginning (in this case)
ty       ldy #$00     - at location $3200
         lda ($fd),y  - :))))
         sta $7e7     - shove the data into rightmost corner
         jmp mainloop - let it scrooooolll, baby! (end of loop)


$3200 is 12800 in decimal I believe.  If I wanted to &quot;on the fly&quot; put
some character data there, I would just poke it in.

poke 12800,65 = a   at $3200
poke 12801,66 = b   at $3201

etc
        etc
                etc

I like the code as it is, but I am looking for an even smoother method.
Any suggestions?


[...]

Hello XmikeX,

In regards to your scroll-text routine :
 
&gt;             ;(if we don't introduce a delay, the text will scroll by
&gt;             ; WAY TOO FAST to READ ! !   Incredible, this 1 Mhz bugger
&gt;             ; machine of ours is, eh?) - delays not set in stone, play
&gt;             ; with them :)  higher, lower, etc...
&gt;
&gt;         LDX #$05     ; just a delay loop - ldx counted down by dex
&gt;waitloop LDY #$FF     ; a delay loop within a delay loop
&gt;wl2      DEY          ; decrement y in our delay looop
&gt;         BNE wl2      ; keep counting y down until y = 0
&gt;         DEX          ; decrement x in our top delay loop
&gt;         BNE waitloop ; repeat the y loop until x = 0
 
[even more snipped here]
 
In the following, I'll describe *very* basic features like the
concepts of rasters and frames. This is probably only interesting
for newcomers in the assembly-domain.
 
If you are looking for a smoother scroll, you would use what is commonly
known as &quot;rasters&quot;.
 
Your tv-set displays the image on the screen using an electron-beam
which moves from the top, left corner down towards the lower, right
corner in horizontal lines. If my memory serves my right, PAL (mostly
european) screens have 312 lines, while NTSC (in the USA) screens have
262 lines. We count these lines starting from 0 (263 total), and call them
&quot;raster-lines&quot;, or just &quot;rasters&quot;.
 
The Commodore 64 has a few registers in the VIC (the chip that generates
the video-image) which reflect where the electron-beam is. We have one
register at adress $D012 which contains the first 8 bits of the raster,
and another at adress $D011, where bit 7 describes the 9th bit of the
rastervalue.
 
You can safely regard the rasterline as a Y-coordinate on the screen
that starts from above and works its way down.
 
In this way, you can use this formula to obtain the rastervalue:
 
  raster= peek(53266)+ (peek(53265) and 128) * 2;
 
Note, that this isn't of much use in a basic-program because
basic simply is too slow, and when the calculation is done,
the rasterline has changed so much that the value of &quot;raster&quot;
is more random than useful.
 
Well, the value in $D012 goes from 0 to 255 while $D011 bit 7 is 0,
refrecting that the rasterline goes from 0-255. Then bit 7 in $D011
is set to 1, and $D012 goes from 0 to 55 on a PAL-system, refrecting
that the rasterline is 256-311. This is what is know as a &quot;frame&quot;,
and the cycle starts over with $D012 being 0, and bit 7 in $D011 also
being 0.
 
You can exploit this register to get a smooth scroll in several ways.
I'll describe the most primitive of these techniques in the following.
 
A smooth scroll is achieved, if the text is moved every frame, not
more, not less. In other words, the delay loop in the scroll should
be adjusted so that the entire scroll-loop is performed exactly once
per frame.
 
Okay, that's fine, but how do I achieve this?
 
You simply monitor the rasterline. A simple way of doing this is to
use a bit of code like this, which waits until the rasterline is
at position 0 exactly.
 
wait    lda $d012       ;Wait until the lower bits of the rastervalue
        cmp #0          ;is 0.
        bne wait
 
        lda $d011       ;We also need to check if the high bit of
        and #$80        ;the rastervalue is 0, in order to distinguish
        bne wait        ;raster 0 from raster 256.
 
Another, slighty optimized version, could be:
 
        lda #$ff
wait    cmp $d012
        bne wait
 
which waits until the rasterline is $ff. This one exploits the fact
that the rasterline never exceeds 311, so $d011 bit 7 will always
be 0, when $d012 is &gt;55.
 
You should try to play around with such wait-loops, and with a little
effort you should be able to do a smooth scroll.
 
You can also try to use $d020 to set the border-color at different
rasterlines, like:
 
wait1   lda $d012       ;Wait for rasterline $30
        cmp #$30
        bne wait1
        lda $d011
        bmi wait1
 
        lda #1          ;Set border-color to white
        sta $d020
 
wait2   lda $d012       ;Wait for rasterline $108
        cmp #$08
        bne wait2
 
        lda #0          ;Set border-color to black
        sta $d020
        jmp wait1       ;And keep looping
 
Notice that the second wait-loop exploits that the next
time $d012 will be $08 after rasterline $30, will be
at rasterline $108, which makes a check on $d011 unnecessary.
 
This little program will produce a white stripe in the
border of the screen, but the area where the color
changes will probably &quot;flicker&quot; a bit, i.e. move randomly
around in a small area.
 
This is because we only check when the rasterLINE is right.
Ideally, we would also want to check for the right &quot;raster-
coloumn&quot; to be right, so that the cut could be at our specific
(x,y) point, but unfortunately the c64 doesn't directly provide
such a rastercolumn register, so removing the flicker can be tricky
business.
 
Of course there's much more to it than this. For instance, the
VIC provides a facility to automatically announce to the program
when a certain rasterline arives, so that we needn't check the
rastervalue ourselves in a loop. This technique is known as raster-
interrupts, but I'll leave that subject to another time.
 
Until then, welcome to the world of rasters, and happy hacking!

Asger Alstrup
--
For questions and comments, 'XmikeX' may be reached through the Editor-in-Chief
of disC=overy.


/S03::$d000:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


                           The Raster StarterKit,
  -+-+-+-+-+-+  -+-+-+-+-+-+-+-+-+-+   +-+-+-+-+-+-+-+-+-+-+-+  -+-+-+-+-+-+-
                      A classic 'slice' of VIC-II code

                       by XmikeX and Dokken/Electron


  My early experiences with VIC-II programming on the C64 led me to the
conclusion that being able to manipulate the VIC-II on a rasterline level
is essential to success as a &quot;coder&quot;.  Over the years, 64 coders have moved
far beyond this simple dogma, but it is recognized that all have to start
somewhere.  The following is an example of one of my early attempts.  I
still use this bit of code to form the core of many of my programs.  I
would like at this time to thank Dokken/Electron for his part in providing
the base code that follows.  Please note that for the purposes of proper
instruction to those who might be more familiar with BASIC than ML, the
source below has all values in decimal (same as with BASIC peek/poke).
However, please note that raster programming requires quick action and is
best left to ML code.

*=49152      ; origin at 49152 or whatever free memory location desired

sei
lda #127
sta 56333
lda #18      ; the first 3 STA's just tell the 64 to
sta 53265    ; do IRQ's.  Well, the 53265 hi-byte value
lda #1       ; says to do a IRQ at rasters 0-255, but 
sta 53274    ; whatever
lda #100
sta 53266    ; the IRQ'll happen at raster line 100
lda #&lt;main
sta 788      ; low byte of IRQ routine
lda #&gt;main
sta 789      ; high byte of IRQ routine
cli
 
jkjk
jmp jkjk     ; this just happily jumps back to itself    
             ; whenever we're not in an IRQ
 
main
rol 53273    ; or: lda #1:sta 53273  tell the 64 an IRQ
             ; happened or something goofy like that
ldx #1
jsr rast
ldx #0
jsr rast
 
lda #126     ; this sets up a raster IRQ at scan line 
sta 53266    ; 126 for the 'rain' routine
lda #&lt;rain
sta 788
lda #&gt;rain
sta 789
 
jmp $ea81    ; ok. you can use either $ea81 or $ea31
             ; $ea31 with an RTS where the 'jmp jkjk'
             ; is allows the 64 to process everything
             ; normally.  ie.  you can run a basic 
             ; proggy and have an ML interrupt doing
             ; something on top of it like maybe playing
             ; a happy tune or something.
             ; $ea81 gives you total control with no
             ; overhead.  ($ea31 scans the keyboard
             ; takes a decent chunk of time).  So with
             ; $ea81, if you want to read the keyboard,
             ; you get to do it explicitly.
 
 
rain
rol 53273
 
ldx #6       ; rasterline is now set at color : blue!
jsr rast
ldx #0
jsr rast
 
lda #100     ; this sets up a raster IRQ at scan line 
sta 53266    ; 100 for the 'main' routine
lda #&lt;main
sta 788
lda #&gt;main
sta 789
 
jmp $ea81    
 
 
rast      ; this routine just makes a raster bar out of
lda 53266 ; the value in the x register.  Note that this
rast2     ; only works for 7 of 8 scan lines cuz the
cmp 53266 ; 64 needs to chunk away at graphix
beq rast2
stx 53280
stx 53281
rts
 
 
Try and expand this routine to include many many rasters or color bars,
or anything you dream up.  It would be prudent to point out at this time
that a text such as &quot;Mapping the 64&quot; is extremely useful for delving into
VIC-II chip registers.  &quot;Mapping the 64&quot; in particular, gives a wonderful
description of VIC-II register function.

Goodbye.
--
For more information or general commentary on this article, XmikeX may be
reached through the Editor-in-Chief of disC=overy.


/S04::$d000:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


           Heaven in the net, an unedited excerpt of IRC on #c-64

                            by Mike Gordillo


As a self-proclaimed &quot;demo freak&quot;, the following transcript (largely unedited)
represents one of the most interesting discussions concerning C-64 that I have
ever witnessed on IRC (Internet Relay Chat).  I present this to the reader
in the hopes of encouraging further participation and patronage of IRC channel
#c-64.  We begin with a discussion on raster programming by &quot;Fungus&quot;, &quot;_dW&quot;,
&quot;hld&quot;, &quot;Sorex of WOW&quot;, and &quot;XmikeX&quot;.
--

&lt;[Fungus]&gt; I'd like to know just how to do that. Stable Raster that is. I've
       tried double interrupts and stuff and every now and then I'd get like
       this 1-2 cycle jitter I couldn't get rid of.

&lt;_dW&gt; My raster is completely stable.. or so I think.

&lt;Sorex\WOW&gt; fungus: use nops or something to time it out

&lt;[Fungus]&gt; Sorex : I did and still couldn't get it out. The next routine's
       timing kept changing the original timing.

&lt;_dW&gt; Fungus: it works like this: set up a raster int on line 'n',
       then in the irq code change the $0314-$0315 vector to point to a
       different routine and set a raster to strike on line n+1.. execute
       NOPs 'till it strikes. When the second raster hits, you'll be
       at most 1 cycle off, which can then be corrected by code like
       LDA # n+1 : CMP $d012 : BEQ sync (sync: rest of the code)

&lt;[Fungus]&gt; I 've tried that too, and banking out The Kernal etc... Using fffe
       &amp; ffff.  I still got goofy jitter. It would be totally stable for like
       5 second then screw 1-2 cycles to the left exactly 3 times. Then would
       be stable for another 5 secs. CIA's are Disabled as well as NMI's: NTSC.

&lt;_dW&gt; Fungus: you must have left out something... what method did you use?

&lt;[Fungus]&gt; Tried it both ways.

&lt;_dW&gt; double ints and?

&lt;[Fungus]&gt; Didn't matter, double Interupts VIA 0314 0315 Double Int VIA
       FFFE FFFF too, and yes, all in NTSC R-8 VIC chip so 65 cycles.

&lt;Sorex\WOW&gt; fun:i have a source here from Graham/Oxyron for that 4*4 display
       routine, i uses multiple IRQ's to get the damn thing steady timed
       and nops 
 
&lt;_dW&gt; Fungus: send me mail at agonzalez@nlaredo.globalpc.net   I'll send you
       source code for a double int 0314/15 raster sync. Sorex: 4x4 display?

&lt;Sorex\WOW&gt; dw:you know... that mode everyone uses to get fullscreen effect
       like rotzoomers/plasmas/doomstuff/tunnels/...
 
&lt;_dW&gt; Sorex: the one with the plasma in dawnfall/oxyron?

&lt;Sorex\WOW&gt; dw:yeah, and the fire in 'The Masque' ....

&lt;[Fungus]&gt; You guys wanna idea? Have any of you tried playing with $d012 like
       decrementing it 1 cycle after it changes?

&lt;_dW&gt; Fungus: that could cause an interrupt, if they're enabled and $d019 lsb
       is clear.

&lt;XmikeX&gt; If I could interject a simple question -&gt;  Does the VIC-20 have a
       $d012 equivalent?

&lt;hld&gt; XmikeX - the vic20 has no $d012 equivalent - so you cant tell
       what raster you are on.

&lt;[Fungus]&gt; Hehehe On the contrary. I code stuff on the Vic-20 too. You can just
       poll the raster register and SEI and never clear it. Makes it preety
       easy. It's just that the Vic-20 treats 2 raster lines as one.  I made
       a cool looking 16 color ROL scroller on it once.  (Basically, its $d012
       equivalent does not generate IRQ's like $d012 does on the C-64).
       I prefer to just poll $9004 ($d012) Easy to do. Then you can do
       all sorts of twisted stuff. The VIC is a different Animal. Really
       neat registers. Remove the borders with out an INT even!
       I'd like to see people get interested in the Vic-20. It's capable
       of some cool stuff. You can make the screen scroll in any direction
       really Fast. The Entire screnn too -No borders. Full Charsets and
       big color Memory. Full Screen High res too, no borders.=]

[...]

&lt;_dW&gt; hld: you did real raytracing in your 4k entry?

&lt;hld&gt; dw - yup.. My 4k entry distorted a checker board. The code was about $4f0
       bytes (and 20KB of tables ;)

&lt;_dW&gt; Are you using lots of rom routines?  Any division?

&lt;hld&gt; dw - It uses ROM routines to create the 20KB tables, but it is pure
       integer assembly when running - with very small error rate.
       I have no division at all in this tracer.. only +,*,srqt
       Remember, pre-calcing all the sqrt's takes quite a while and it
       is all pre-calced in floating point, but i do some nifty weird
       things so that it only needs to accumulate integers to do the trace.
       Basically, it does one frame in about 4 seconds where a frame is
       defined as 256x64 monochrome.

[...]

&lt;XmikeX&gt; Wave, how is your plotter routine coming along?

&lt;Waveform&gt; Right now, its &quot;doing&quot; 16*16 character rotation.  Going to optimize
       it a bit and see how far out I can go and still have the routine update
       reasonably fast, but my line vector is under 4k.

&lt;XmikeX&gt; Any drags so far?

&lt;Waveform&gt; The main thing that slows down the vector routine is the clearing
       of the next buffer. Man, that EATS time... but a character or bitmap
       rotation doesn't necessarily need to be cleared first, and even if it
       does, the amount of zeros to stuff into memory is significantly less.

&lt;_dW&gt; Wave: are you doing a complete clear? or a redraw-clear?

&lt;Waveform&gt; Dw: complete zap of memory...but I toyed with re-draw clear idea.

&lt;MrX_TLO&gt; Hmm, nothing really faster than inlined STA  :(

&lt;Waveform&gt; Mr. X : I got a loop like this: 

       lda #$00
       ldy #$00
       sta $2000,y 
       sta $2080,y
       sta $2100,y
       ... &lt;etc&gt; ...
       iny
       bpl &lt;loop&gt;

       Each STA line will zap 128 bytes in that loop... I may unroll it
       further, but I don't know.

&lt;MrX_TLO&gt; How about :

       LDX #0
       LDA #times/4
       Sorry, LDY #0
       STY ....,X
       BNE
       DEX

&lt;MrX_TLO&gt; If you INX, you need a CMP or you waste time going over your area.

&lt;Waveform&gt; ah... you are DEXing from times/4

&lt;MrX_TLO&gt; 1 = 256, 2 = 512, 3=768, 4=1024; none of which is the 800 bytes
       you mentioned.

&lt;Waveform&gt; 2k of zeros; 2k=$800

&lt;MrX_TLO&gt; You should still kill it by pages!

&lt;Waveform&gt; It does kill by pages!

&lt;MrX_TLO&gt; ?? It wasn't clear from the code. How many STA's inside loop?

&lt;Waveform&gt; several

&lt;MrX_TLO&gt; Define several?  It should be like 8 STA to kill 2K : base+0,
       base+256, etc up to base+2K-255

&lt;Waveform&gt; Here is my 'clear' code, Mr. X :

       sta $2000,y
       sta $2080,y
       sta $2100,y
       sta $2180,y
       sta $2200,y
       sta $2280,y
       sta $2300,y
       sta $2380,y
       sta $2400,y
       sta $2480,y
       sta $2500,y
       sta $2580,y
       sta $2600,y
       sta $2680,y
       sta $2700,y
       sta $2780,y
       iny
       bpl &lt;loop&gt;
       rts

       I cover the whole area in one loop, except I kill 128 bytes with
       each STA.

&lt;MrX_TLO&gt; Wave:  But that's way past the point of diminishing returns....
       And why pick 128 bytes?

&lt;Waveform&gt; Because it runs faster than 256 bytes!

&lt;MrX_TLO&gt; So you got, what, 16 STA in your actual code?

&lt;Waveform&gt; if each STA wipes 256 bytes, then the loop runs 256 times. Which
       means that all the loop overhead (agreed - not too much, but there)
       is multiplied by 256.  If you loop 128 times, I would think it should
       reduce the overhead by half.

&lt;MrX_TLO&gt; Have you actually done the math?

&lt;Waveform&gt; I should time it tonight to be sure.

&lt;MrX_TLO&gt; effective cycles  = loop + overhead / total cycles  &lt;-- will give
       an average number for overhead cost.

&lt;Waveform&gt; Well ok, but heck if I'm going to 1:1 unroll it though!  2000 STAs,
       no way...even if I write a program to generate them.

&lt;MrX_TLO&gt; 4K for your clear routine!  hehe  :)  But 1:1 may lead you past the
       point of diminishing returns...

&lt;Waveform&gt; Well, I used 128 because there is only a INY (or DEY depending on
       what you think when you code) and one branch. (BPL or BMI respectively).
       BTW, 256 has the same functionality... Both will set a processor flag.
       Hmmm, actually all numbers will with a DEY.

&lt;MrX_TLO&gt; In general, I DEX BNE, just considering it a good habit, always trying
       by pages.....

&lt;Waveform&gt; But doesn't it stand to reason that a 1:1 is the fastest since it
       has no overhead? So if thats true, if you only looped twice, you'd
       cut out half the STA's, but increase the overhead by a factor or 2.
       The overhead is small though (couple cycles for dey, couple for the
       branch.)

&lt;MrX_TLO&gt; Yeah, the overhead is small.  Your first STA is the &quot;best&quot;, each
       additional one after that gives less and less improvement in speed and
       just takes more space....

&lt;Waveform&gt; And if you need to zap like 2k of memory, there ain't a Bxx
       instruction in 6510 thats going to get you back to the beginning of
       that STA loop. =)  After all, you can only have 40 or 41 STA's to use
       a Bxx instruction.

&lt;MrX_TLO&gt; Time to unroll your loop, Waveform :).

&lt;Waveform&gt; Then I'd get 6144 bytes of code to clear 2048 bytes of buffer. :(
       I can't believe I am thinking of making a 6144 byte clear routine and
       actually, it would have to be 12288 bytes, since I double buffer.
       Three bytes per STA... 2048 bytes to clear... (2048 * 3 = 6144) * two
       buffers doubles that to 12288.

&lt;Waveform&gt; Hmmm...  Loop overhead... Let us see here...
       Each time you gotta INY/DEY and CMP and/or Bxx (branch) or JMP
       at the end of the loop, with the number of times through the loop
       multiplying the overhead.  The less times through the loop, the less
       overhead.

&lt;MrX_TLO&gt; Yes, and DEX  BNE = 2 + 3 = 5  (assuming your smart enought to line
       it up in one page! otherwise 6 cycles)

&lt;Waveform&gt; Yeah, if I completely unroll it, I'll have NO loop overhead
       to deal with at all...  I will certainly have to give this idea some
       further thought.

[...]

&lt;XmikeX&gt; So, did you take MrX's advice?

&lt;Waveform&gt; Yes, I unrolled that clear loop, but I'm not sure how much savings
       I was able to obtain.  I mean I know how much in cycles, but I don't
       see much of a real difference it made to the overall performance of 
       the code.

&lt;XmikeX&gt; Well, there should be a difference.

&lt;Waveform&gt; Yeah, but I'm not seeing THAT much of a diff... hmmm... but it was a
       while inbetween running each version. I should run them one right after
       another and see. So far, to tell the truth, the effect seems neglegible.

&lt;XmikeX&gt; What are your cycle times now?

&lt;Waveform&gt; 10752 for old code - 8192 for new code = 2560 cycles.
       Hmmm, if I am doing my math right, then it is actually 2.5 ms.
       Let's see, NTSC C64 draws a full screen every 1/60, and if one
       raster line is 1/263 of 1/60 sec in NTSC, it takes approx. 0.0000636
       seconds to draw one raster line, and there are 65 cycles per line.
       This means one cycle is more or less .0000009 seconds which
       is approx. NTSC 1Mhz rate.  My calculator lacks the required
       precision here, but enough to give credence to the clock rate. :)
       So if we forget about 'bad lines' (VIC-II DMA), I am saving
       around 2.5 ms per iteration. My code rotates an object around
       its center completely in 8-bit increments, hence the routine is
       called 256 times.

&lt;XmikeX&gt; So 256 * 2.5 ms = 640 ms per 1 complete rotation  (.640 sec! :)

&lt;Waveform&gt; So I lose 12k of RAM for .640 sec..... NOT!  I will rip that code
       out and instead work on speeding up my line drawing code.

&lt;XmikeX&gt; Sigh...plotting...truth tables... blah :)

&lt;Waveform&gt; Hehehe, 0  OR 1 = 1
                   0 AND 1 = 0
                   0 EOR 0 = 0
                   0 EOR 1 = 1
                   1 EOR 1 = 0
       Etc., Etc., Etc...and remember, anytime you got that N in front
       (NAND, NOR, NOT, etc) you just invert the truth table.

&lt;Elwix&gt; Hey gang, wassup?

&lt;Waveform&gt; Wix, right now I am looking at a balance of neatness in programming
       vs speed of execution (plotter)

&lt;Elwix&gt; the age old conflict... speed vs smoothness, how many cycles?

&lt;Waveform&gt; Mine is 70 as it stands.

&lt;Elwix&gt; wave - that's your theta,r plotter right?

&lt;Waveform&gt; Yeah, and the plotter doesn't care where the coords come from, Wix.

&lt;Elwix&gt; yeah, I know, a general point plotter... but where it plots points would
       change the code a bit, no? the plotter takes r,theta and turns the right
       pixel on in the chargrid right?

&lt;Waveform&gt; I coded 3 general purpose routines:

       1&gt; point rotater (basically, change all the thetas)
       2&gt; Resolve r,theta into x,y
       3&gt; plot x,y on charmap

&lt;Elwix&gt; ahhh... ok...  I thought you had said that there was no step 2
       (conversion of r/theta into x/y) ??? the speed of the steps 1-2-3 are
       combined at 76 cycles?

&lt;Waveform&gt; no no no, I don't have inital x,y... no need to convert x,y into
       polar just to rotate it and bring back. 

&lt;Elwix&gt; well I udnerstand you start from polar, but I was imagining you had a
       direct r/theta to bitmap plotter...  that's all

&lt;Waveform&gt; yeah... well I have to resolve into X,Y somewhere, Wix. =)

&lt;Elwix&gt; ok, so your step 1-2-3 combined is 76 cycles?

&lt;Waveform&gt; But the point of the routine is that I don't start in X,Y... Which
       makes the Rotation part very fast... just inc/dec the thetas.

&lt;Waveform&gt; And, no... just the plot into the char map is 70 cycles (as it
       stands, I think I can get it down to below 60 though)

&lt;Elwix&gt; but, yes, you do convert back to x/y to plot. That's your step 2 right?

&lt;Waveform&gt; Wix, yeah.

&lt;Elwix&gt; Wave well, you could do better on the x/y plotter.  But if what you
       have works &amp; looks good... who cares?  At the most I was able to
       achieve 35 cycles onto a full screen bitmap coming from X &amp; Y,
       with an X high bit.  Think for a moment... :)

&lt;Waveform&gt; Oh wait! I've just had a brainstorm. Be right back, getting a pen.

&lt;Waveform&gt; DUDE!!!!!  Woah!!!!!  Just a sec... let me recount this.
 
&lt;Waveform&gt; I -think- I have a 26 cycle plotter now.

&lt;Elwix&gt; 26 should be possible in a right-made chargrid, but not on a bitmap
       I think... 

&lt;Waveform&gt; Perhaps, but I will definately explore this!  In fact, once I'm
       done, I think I'll put this all down in writing. :)

[...end of transcript...]


/S05::$d000:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


       A demo of 'disC=overy',      =
                                  -+*+-
                                    =       The exploration of rotation :)

                        by John Kaiser (Waveform/MLM)


Shoooom! Greetings from the Wave! =)

In this article I am going to talk about a relatively simple two-
dimensional vector routine. Before I dive in, however, I'd like to
give some credit to Steven Judd, who through one of his C= Hacking
articles showed me the way to the core of a fast line drawing routine
as well as an amazing method of quick multiplication.  I'd also like to
give thanks to those 'hard-core coding animals' on IRC channel #c-64
for their most-nifty insight.  Before I forget, to all those who I have
been taunting with my (I think, I hope..) 'super fast pixel plotter', you
are finally able to see the source for it. Its so extremely simple, you'll
probably kick yourself for not coming up with it yourself. 

[Ed. Note : According to S. Judd, the 'quick multiplication' method
 which John is referring to was originally formulated by George Taylor.]

For all of those expecting a full blown demo in this article, I am afraid
I have to disappoint you. The &quot;real world&quot; has been taking a heavy toll on
me during the last month so the amount of time I was able to spend working
on this article was extremely limited. What you will see, however, is a
fully functional rotating vector routine, in a relatively basic form.
There are tons of uses for the routines involved, and infact, my next demo
uses quite a few variations on the code you are about to see. 

It is interesting to note that I did not set out to code a rotating vector
routine. =) I have another project I'm working on that involves some of
the same routines. While working I thought, &quot;Hey, I could probably rotate
a two dimensional shape pretty easy with this.&quot; 

And Voila! You get something like the source code that follows.

Preface To The Code
-------------------
The trick to this code is referencing the endpoints of a line by a radius
and theta, as opposed to regular X and Y. 

The advantage to referencing the endpoints - or even just individual
pixels - like this is that to rotate a point, you merely add or subtract
from the theta value. This process ends up being extremely fast,
especially when compared to taking an X,Y coordinate and sending it
through a whole slew of mathematics just to move it around. Observe a
quick comparison of the steps needed to rotate a number of endpoints about
their geometric center: 

   Old Method:
   -----------
   1. Get an X,Y endpoint
   2. Convert to radius and theta (or some other convenient rotation friendly
      reference)
   3. Apply the rotation
   4. Convert back to X,Y
   5. Store result
   6. Loop back until all endpoints are finished

   Nifty Method:
   -------------
   1. Get a radius,theta endpoint
   2. Apply the rotation
   3. Store result
   4. Loop back until all endpoints are finished

What is missing is the slow, and sometimes bulky conversion routines. Even
if you have a fast conversion routine, this method still is faster because
you have less steps from beginning to end. You have less code to execute
per endpoint. 

One other trick to this particular code is that my circles have 256 units
to them, while most peoples circles have 360 degrees. Rather than have a
boring name like &quot;units&quot; I decided to use the name &quot;byts&quot;. So, by way of
comparison, a normal circle has 360 degrees, while my circles have 256
byts. 

Why use a different unit of measurement? The thinking man will quickly
realize that in our nifty 8bit machines, the largest value a single byte -
register, or memory location - can hold is 255. By using the byt unit of
measurement, we can make an entire circle with just one byte, and not have
to worry about fiddling with high bits. This way of thinking saves many
many processor cycles, and many many hairs on a coder's head. =)

Finally, before I slam you with the source code (which, by the way, is in
TurboAssembler format) there is one more trick to this particular code.
Sometimes the only way to get real speed out of a Commodore is to reduce
the code necessary to perform calculations. How do the great coders do
that? The keyword(s) are LOOKUP TABLES. 

This code uses tables for the plot routine and for the multiplication
routine. I wrote basic programs to create the tables and will do my best
to explain how they work, near the end of this article. As to the tables
themselves, I'll explain how the code uses them when I get to the relevant
section of the source code. 

Wow, what a preface! Now, on to bigger and better things: The documented
and commented Source Code! 

The Source Code - In TurboAssembler Format
-----------------------------------------
Okay, here it is. I'll be commenting on the code throughout the remainder
of the article in hopes to further clarify what the code is doing. 

First, no code is complete without a little self glorification before the
origin and equates are setup... 

                    ;---------------------------------------
                    ;  A Demo of disC=overy - By: Waveform
                    ;
                    ;  (c) 1996 for disC=overy Magazine
                    ;&quot;The Journal of the Commodore Enthusiast&quot;
                    ;---------------------------------------

The afore mentioned origin and equates...

                              *= $0820

                    points     = $033c   ;number of points
                    angleinc   = $033d   ;angle to increment
                    curshape   = $033e   ;current shape
                    theta      = $0340   ;thetas
                    radiu      = $0350   ;radius
                    itheta     = $0360   ;tab of init thetas
                    iradiu     = $0370   ;       init radius

                    scrloc     = 1196    ;location of top
                                         ; left corner of
                                         ; char matrix on
                                         ; screen

                    msin       = $3000   ;table of sines
                    mcos       = $3100   ;         cosines
                    msqr       = $3200   ;         squares
                    lobyte     = $3300   ;lo bytes
                    hibyte0    = $3380   ;hi bytes ($2000+)
                    hibyte1    = $3400   ;         ($2800+)
                    bitmask    = $3480   ;pixel bit mask

Okay: &quot;points&quot; is the number of endpoints for the current displayed shape.
      &quot;angleinc&quot; is the amount to rotate the shape, in byts.
      &quot;curshape&quot; is the number of the current shape. This demonstration 
                 has three predefined shapes. Feel free to experiment 
                 with the ones I included or add your own!
      &quot;theta&quot; is a table of thetas. This code is written such that a 
              shape can have up to 16 endpoints defined. To change this 
              &quot;limitation&quot; simply give yourself more bytes in-between 
              these tables.
      &quot;radiu&quot; is a table of radii. Both &quot;theta&quot; and &quot;radiu&quot; change as the 
              program executes. At any point in time, these two tables 
              hold the current values of all the endpoints for the 
              current shape.
      &quot;itheta&quot; is a table of the initial values of the shapes theta  
               coordinate component.
      &quot;iradiu&quot; is a table of the initial values of the shapes radius 
               coordinate component. Both &quot;itheta&quot; and &quot;iradiu&quot; tables 
               are static and are not changed by the program. It is 
               convenient to have these two tables for when you need to
               alter the coordinates of a endpoint relative to its 
               initial position.
      &quot;scrloc&quot; is used by the routine that places the character matrix on 
               the screen. 1196 places it in the center of the screen.
      &quot;msin&quot; is the base address of the table of sines. Each value 
             represents the sine of the address, relative to the base. So 
             that msin+0 = sine of 0 byts, msin+64 = sine of 64 byts, etc.
      &quot;mcos&quot; is the base address of the table of cosines. Works the same 
             way as the sine table.
      &quot;msqr&quot; is the base address for the table of squares. Works similar 
             to the sine and cosine table, except that this table is a 
             table of squares of both positive and negative numbers. More 
             on this later.
      &quot;lobyte&quot; is the base address of a table of low bytes used by the 
               plot routine as the low byte of the address where the 
               pixel to be plotted lives.
      &quot;hibyte0&quot; is the base address of a table of high bytes used by the 
                plot routine as the high byte in buffer #0 where the 
                pixel to be plotted lives.
      &quot;hibyte1&quot; high byte of the address in buffer #1 where the pixel to 
                be plotted lives.
      &quot;bitmask&quot; is the base address of a table of bit masks applied to 
                the byte where the pixel to be plotted lives.

                    ;---------------------------------------
                    jsr demoinit   ;init for demo
                    ;---------------------------------------

That's just a JSR to the demo initialization routine...

                    main       lda #%11111110 ;scan matrix
                               sta $dc00      ;
                               lda $dc01      ;

                               cmp #%11101111 ;f1
                               beq keyf1
                               cmp #%11011111 ;f3
                               beq keyf3
                               cmp #%10111111 ;f5
                               beq keyf5
                               cmp #%11110111 ;f7
                               beq keyf7
                               cmp #%11111101 ;return
                               beq keyreturn
                    
                               lda #%01111111 ;scan matrix
                               sta $dc00      ;
                               lda $dc01      ;

                               cmp #%11101111 ;space
                               beq keyspace
                               cmp #%01111111 ;return
                               beq keystop

What the above does is scan the keyboard matrix to see if the user has
pressed one of the keys our program is looking for. Later on you'll see
that we disabled the CIA interrupts that cause the computer to scan the
keyboard, so we needed a way to tell if one of our &quot;do-something&quot; keys was
pressed. We &quot;scan&quot; twice since the various keys we are looking for are on
different rows of the keyboard matrix. 

                    reentry    jsr rotate     ;rotate shape
                               jsr drawshape  ;draw shape

                               jmp main       ;loop
                    ;---------------------------------------

The little code snippet above is where the JSRs to the real workhorses
are. As you can see this demo is pretty simple. =) We rotate the current
shape, and then we draw the shape. Then we go back to the beginning and
see if the user wants to do something. 

                    keyf1      jmp rotup
                    keyf3      jmp rotdn
                    keyf5      jmp expup
                    keyf7      jmp expdn
                    keyreturn  jmp newshape
                    keyspace   jmp stoprot
                    keystop    jmp stopdemo
                    ;---------------------------------------

Above is a little jump table to the various little routines that do what
needs to be done when a key is pressed... 

                    rotup      inc angleinc   ;increase
                               jmp reentry
                    ;---------------------------------------
                    rotdn      dec angleinc   ;decrease
                               jmp reentry
                    ;---------------------------------------
                    
The above two &quot;routines&quot; change the value by which the shape rotates per
run-though of the main loop. As you can see, referencing the endpoints as
radius and theta takes alot of the work out of rotating a shape about its
center! Each time the user presses the F1 key, the angle that the shape
rotates per run-though increases. Holding down the F1 key will cause the
shape to spin up quite rapidly. Indeed, if you continue to hold down the
F1 key, the speed of the rotation will appear to increase to the point
where it begins slowing down again. 

Obviously, F1 increases the angle of rotation, and F3 will decrease it. 

                    expup      ldy #$00
                    expup1     lda radiu,y
                               clc
                               adc #$01       ;add one
                               cmp #63        ;at maximum?
                               bcc expup2
                               lda #63
                    expup2     sta radiu,y    ;store
                               iny
                               cpy points     ;do all points
                               bne expup1

                               jmp reentry    ;return
                    ;---------------------------------------
                    expdn      ldy #$00
                    expdn1     lda radiu,y
                               sec
                               sbc #$01       ;subtract one
                               cmp #2         ;at minimum?
                               bcs expdn2
                               lda #2
                    expdn2     sta radiu,y    ;store
                               iny
                               cpy points     ;do all points
                               bne expdn1

                               jmp reentry    ;return
                    ;---------------------------------------

What the above two routines do is expand or shrink the shape. These two
routines work well because of the way our shapes are defined. The shapes
that come with this demo are all equidistant from the objects center. So,
it is easy to change the shapes size by altering all of the shapes radius
coordinate components. Obviously, more detailed shapes that have endpoints
that are at varying radii from the center will need improved routines if
the shape is to maintain its proportions through the expansion and
shrinking. 

Notice the error checking, also. Bad things happen when are radii get too
large or too small for our line drawing routine to handle properly. 

                    newshape   inc curshape
                               lda curshape
                               cmp #3         ;last shape?
                               bne newshape1  ;nope
                               lda #$00       ;select first
                               sta curshape   ; shape

                    newshape1  cmp #2         ;8 point star?
                               bne newshape2
                               jsr initobj20  ;init shape
                               jmp reentry
                    newshape2  cmp #1         ;2 triangles?
                               bne newshape3
                               jsr initobj10  ;init shape
                               jmp reentry
                    newshape3  jsr initobj00  ;1 triangle

                               jmp reentry
                    ;---------------------------------------

The above routine handles the users request to change the displayed shape.
There are better ways to handle this, but since this demo only has three
shapes built in to it, the quick and dirty way suffices without being
extremely bulky. 

                    stoprot    lda #$00       ;stop all
                               sta angleinc   ; rotation
                               jmp reentry    ;
                    ;---------------------------------------

The above little bit of code simply stops the rotation of the current
shape. It merely stores a zero into &quot;angleinc&quot; which controls the amount
of rotation applied to the shape. 

                    stopdemo   lda #$81       ;reset cia
                               sta $dc0d      ; interrupts

                               jmp $fe66      ;exit via
                                              ; kernal warm
                                              ; start
                    ;---------------------------------------

The above code resets the CIA to its default setting so that when our demo
exits back out to basic, the user is able to type something. =) It then
exits via the Kernal warm start vector to reset other important things
like the VIC chip. =)

                    rotate     ldy #$00
                    rotate1    lda theta,y    ;get theta
                               clc
                               adc angleinc   ;add amount
                               sta theta,y    ;store theta
                               iny
                               cpy points     ;do all points
                               bne rotate1

                               rts
                    ;---------------------------------------

Okay, there it is. The code that actually rotates the shape. It takes the
current value of the theta coordinate for each endpoint and adds the value
of &quot;angleinc&quot; to it. Extremely simple and quite fast too. =) You can speed
it up a bit by unrolling this loop, but for this demo, there aren't enough
endpoints to work through to get that much of a savings. 

                    drawshape  ldy #$00       ;first point

                               lda theta,y    ;pass theta &amp;
                               sta gxytheta   ; radius to
                               lda radiu,y    ; getxy for
                               sta gxyradius  ; conversion
                               jsr getxy      ;

                               lda xpos       ;convert polar
                               clc            ; to
                               adc #64        ; Cartesian
                               sta x1         ;
                               lda ypos       ;
                               clc            ;
                               adc #64        ;
                               sta y1         ;

The above code starts off the shape drawing routine. It gets the first
endpoint prior to entering the loop below. The loop below joins endpoint
to endpoint with a line. 

You will notice that we do actually convert from the radius,theta system
to the X,Y system, finally. This is necessary because I haven't yet
written a routine that will draw lines only from radius and theta. =) Also
notice that it adds 64 to both the X and Y coordinate. This is to center
the shape in our character matrix. The routine that converts from
radius,theta to X,Y returns numbers ranging from -63 to +63, so adding 64
also normalizes our coordinates to make them easier to plot in our
character matrix. (It makes the range of possible values equal to 0 to
+127)

                               ldy #$01       ;second point
                    ds2        lda theta,y
                               sta gxytheta
                               lda radiu,y
                               sta gxyradius
                               jsr getxy
                               lda xpos
                               clc
                               adc #64
                               sta x2
                               lda ypos
                               clc
                               adc #64
                               sta y2
                               sty dsy        ;preserve .y
                               jsr drawline   ;draw a line
                               ldy dsy        ;restore .y

                               lda x2         ;make endpoint
                               sta x1         ; of this line
                               lda y2         ; start point
                               sta y1         ; of next line

                               iny            ;do all points
                               cpy points     ;
                               bne ds2        ;

That's the routine that puts the shape on the screen. You may of noticed
that each shape has one extra endpoint. For example, the triangle has four
endpoints. This is to allow the shape drawing routine a place to end the
last line. We of course, want to make the last endpoint equal to the first
endpoint. This causes the routine to complete the shape. 

                               lda $d018      ;show our work
                               eor #%00000010 ;
                               sta $d018      ;

Once we have finished drawing the shape in the buffer, we tell the VIC to
display the buffer. This technique is known as double buffering. We
display one buffer, while we do all our work in the other. When we are
done with the work, we display that buffer, and do all our work in the
first. 

A nifty trick in situations like these is to use the VIC to our advantage.
Since we are using a character matrix to do our drawing in, we make both
of our buffers in sequential character matrix slots in memory. Then to
swap the displayed buffers, we merely toggle a bit in the VIC register
that tells the VIC which matrix to display. =)

A little confused? Well hopefully this will clear things up, at least a
little. We start our program with the VIC pointing at buffer#0 which is at
$2000. Bits 3,2,and 1 of $d018 control which address the VIC finds the
character matrix. Here is a nifty table showing the addresses which
correlate to those bits in $d018: 

   $d018     points to
   -----     ---------
   %xxxx000x $0000
   %xxxx001x $0800
   %xxxx010x $1000
   %xxxx011x $1800
   %xxxx100x $2000 -&gt; This is our Buffer#0
   %xxxx101x $2800 -&gt; This is our Buffer#1
   %xxxx110x $3000
   %xxxx111x $3800

You can see how we can make the VIC do all the work of displaying the
right buffer. All we have to do is toggle bit 1 of $d018 to make the VIC
switch between the character matrix at $2000 and the one at $2800. 
   
                               lda $d018      ;clear the
                               and #%00000010 ; next buffer
                               beq ds4        ; for drawing
                               jsr blank0     ; in
                               jmp ds5        ;
                    ds4        jsr blank1     ;

This code checks which buffer is currently being displayed and the JSRs to
the routine to clear the OTHER one, in preparation for drawing in. 

                    ds5        rts

                    dsy        .byte $00
                    ;---------------------------------------

Finish up... &quot;dsy&quot; is a temporary storage location.

                    getxy      sty gxyy       ;preserve .y
                               sta gxya       ;         .a

                               ldy gxytheta   ;
                               lda mcos,y     ;a
                               sec            ;
                               sbc gxyradius  ;-b
                               tay            ;
                               lda msqr,y     ;f(a-b)
                               sta gxytemp    ;store result

                               ldy gxytheta   ;
                               lda mcos,y     ;a
                               clc            ;
                               adc gxyradius  ;+b
                               tay            ;
                               lda msqr,y     ;f(a+b)
                               sec            ;
                               sbc gxytemp    ;-f(a-b)
                               sta xpos       ;=x coordinate

Ah, now you get to see the fast multiplication in action. This routine is
based heavily on the routine outlined by Steven Judd in C=Hacking. He has
already documented fairly well how the table of squares work, so I'll not
re-invent the wheel by explaining precisely how it works. What I will do
is step you through the steps of what this code does. 

Okay, know that you can arrive at A*B with a function like:

   f(A+B) - f(A-B) when f(x) = (x^2)/4.

I created a table of squares such that the offset from the beginning of
the table was the (x) in the f(x) above. For example, location $3300 + 0 =
0, since obviously (0^2)/4 is still 0. By the same token, $3300 + 9 = 20,
since (9^2)/4 = 20.25. 

In our case, the radius component is the (A) and the (cos (theta))
component is the (B). Those who didn't sleep through trigonometry class
will recall that when converting from radius,theta into X,Y, your X
coordinate is R * cos(theta). Hence, our A*B routine. 

Those that have read ahead, will note that I made some adjustments to the
tables to the effect that the sin and cos tables are multiplied by 64, and
that our table of squares is really the result of a function where f(x) =
(x^2)/4*64. The reason for this is to maintain some level of accuracy in
our tables. If you don't understand why this was done, I'll explain it
further when I detail the basic programs that build our tables. 

                               ldy gxytheta   ;
                               lda msin,y     ;a
                               sec            ;
                               sbc gxyradius  ;-b
                               tay            ;
                               lda msqr,y     ;f(a-b)
                               sta gxytemp    ;store result

                               ldy gxytheta   ;
                               lda msin,y     ;a
                               clc            ;
                               adc gxyradius  ;+b
                               tay            ;
                               lda msqr,y     ;f(a+b)
                               sec            ;
                               sbc gxytemp    ;-f(a-b)
                               sta ypos       ;=y coordinate

                               ldy gxyy       ;restore .y
                               lda gxya       ;restore .a

                               rts
                               ;----------------------------
                    
                    gxyradius  .byte $00
                    gxytheta   .byte $00
                    
                    xpos       .byte $00
                    ypos       .byte $00

                    gxyy       .byte $00
                    gxya       .byte $00
                    gxytemp    .byte $00
                    ;---------------------------------------

The code above does exactly the same thing the last piece of code did,
except this time we were calculating the Y coordinate, and of course, to
be trigonomically correct, our multiplication performs this equation:

   Y = R * sin(theta). 

The labels at the end are for temporary storage of values during the
multiplication routine. 

                    plot       pha            ;preserve .a

                               lda $d018      ;plot in
                               and #%00000010 ; correct
                               bne plot2      ; buffer

                    plot1      lda lobyte,x   ;lo byte
                               sta $02        ;
                               lda hibyte1,x  ;hi byte
                               sta $03        ;
                               lda ($02),y    ;
                               ora bitmask,x  ;turn pixel on
                               sta ($02),y    ;

                               pla            ;restore .a
                               rts
                    ;---------------------------------------
                    plot2      lda lobyte,x   ;lo byte
                               sta $02        ;
                               lda hibyte0,x  ;hi byte
                               sta $03        ;
                               lda ($02),y    ;
                               ora bitmask,x  ;turn pixel on
                               sta ($02),y    ;

                               pla            ;restore .a
                               rts
                    ;---------------------------------------

Shoooom! There it is! If you blinked you may of missed it. The plot
routine is quite small, and its even smaller if your program doesn't need
to decide which buffer it needs to plot in. 

In detail, first it checks which buffer we are working in and branches to
the appropriate plot routine. 

How it works: the X register holds our X coordinate, and the Y register
holds our Y coordinate. Both our X and Y registers hold a value between 0
and 127. Knowing that, we can quickly and easily use some cleverly thought
out planning ahead to make plotting a pixel super fast and very clean. 

Things we planned for ahead of time: We drew our character grid on the
screen such that the addresses that define the character data are laid out
to our advantage. Then we made a couple tables with data that makes it
extremely simple to look up the address of the byte where we want to plot
a pixel. 

Sound a little vague? I'll explain in greater detail when we get to the
basic programs that set up the tables and also the little routine that
lays out our character grid. 

First, it looks up an address based on our X coordinate. Each byte has 8
pixels so, our table looks like this: 

   $3300 $00 $00 $00 $00 $00 $00 $00 $00
   $3308 $80 $80 $80 $80 $80 $80 $80 $80
   $3310 $00 $00 $00 $00 $00 $00 $00 $00
   $3318 $80 $80 $80 $80 $80 $80 $80 $80
     ...

Notice that the values change every eight locations? Each byte has eight
pixels. For example, imagine that the X coordinate is 0. We get the first
(0th) byte from our low byte table and see its a zero. Its easy to see
that we would always be plotting in the first (0th) byte until X is
greater than 7 (i.e.: 8) in which case the value in our low byte table is
$80. $80 is 128 bytes over from our first column of bytes, and holds the
byte that has pixels 8-15 in it. If you are still confused, I will explain
this further when we get to the routine that builds our character grid on
the screen. 

Now that we have the low byte, we need a high byte. Again we look into a
cleverly planned table using X as our index. The high byte table looks
alot like the low byte table except that we change values every sixteen
bytes. Take a look: 

   $3380 $20 $20 $20 $20 $20 $20 $20 $20
   $3388 $20 $20 $20 $20 $20 $20 $20 $20
   $3390 $21 #21 $21 $21 $21 $21 $21 $21
   $3398 $21 #21 $21 $21 $21 $21 $21 $21
     ...

This is because each column only has 128 pixels in it. If the X coordinate
is 0-7, then the byte that holds our pixel is at $2000. When the X
coordinate is 8-15, the byte is at $2080. Only when X is 16-23 does our
high byte change from $20 to, in this example, $21, since the bye we are
looking for would be $2100. 

Now, we got an address based on the value of X. But what about Y? We
aren't always going to be plotting in the first top row of pixels! Since
we were clever in how we laid out our character grid, Y becomes an offset
from our address. We figured our how far to go across in bytes from a
table, but we don't need a table to figure out how far down to go. We
simply address the byte using indexed addressing. =) So, for example if
our Y coordinate was 5, the instruction LDA ($02),Y would get the 5th byte
down from the byte we arrived at earlier. 

Nifty eh?

After we get the byte, we need to turn on a pixel. This is where the
bitmask table comes in. Our bitmask table looks like this: 

   $3480 $80 $40 $20 $10 $08 $04 $02 $01
   $3488 $80 $40 $20 $10 $08 $04 $02 $01
   $3490 $80 $40 $20 $10 $08 $04 $02 $01
   $3498 $80 $40 $20 $10 $08 $04 $02 $01
     ...

It should be obvious how this table works. This table allows us to arrive
at the right pixel to turn on (via ORA) when we plot. Notice that it
repeats every eight bytes, and notice that there are eight pixels in a
byte. =)

                    drawline   sec            ;get dx
                               lda x1         ;
                               sbc x2         ;
                               sta dx         ;

                               sec            ;get dy
                               lda y1         ;
                               sbc y2         ;
                               sta dy         ;

                               clc            ;
                               lda dx         ;
                               bpl drawline2  ;handle -dx
                               eor #%11111111 ;make dx
                               adc #%00000001 ; positive
                               sta dx         ;
                    
                               lda dy         ;
                               bpl drawline1  ;handle -dy
                               eor #%11111111 ;make dy
                               adc #%00000001 ; positive
                               sta dy         ;

                               lda dx
                               cmp dy
                               bcs dl00
                               jmp dl10

                    drawline1  lda dx
                               cmp dy
                               bcs dl20
                               jmp dl30

                    drawline2  lda dy
                               bpl drawline3
                               eor #%11111111
                               adc #%00000001
                               sta dy

                               lda dx
                               cmp dy
                               bcs drawline4   ;dl40
                               jmp dl50

                    drawline3  lda dx
                               cmp dy
                               bcs drawline5   ;dl50
                               jmp dl70
                    el         rts

                    drawline4  jmp dl40
                    drawline5  jmp dl60
                    ;---------------------------------------

The above code determines the slope of the line to be drawn. This is the
part of my code that I *know* in my gut I can improve on, but as of yet
have been unable to. There are eight separate little routines below that
draw a line. Each one is slightly different, they are written to handle
each of the eight possible types of line slopes that can be encountered
when drawing a line between two points. 

The values DX and DY are calculated such that DX=X2-X1, and DY=Y2-Y1.

                    dl00       lda #$00        ;0 - dx
                               sbc dx          ;

                               ldx x1          ;plot first
                               ldy y1          ; pixel
                               jsr plot        ;

                    dl00a      clc             ;step in x
                               inx             ; positive
                               adc dy          ; until time
                               bcc dl00b       ; to take a
                               iny             ; positive
                               sbc dx          ; step in y
                    dl00b      jsr plot        ;
                               cpx x2          ;
                               bne dl00a       ;

                               rts
                               ;----------------------------

All eight of these routines are basically the same with only two real
differences: 

   1) The value which is being stepped through until it's time to step the
      other value.
   2) The direction of the stepping

Here is a step-by-step description of what the above does:

   1. Subtract DX (change in X) from zero
   2. Plot the first pixel
   3. Step upwards in values of X, until it is time to take a step in Y
   4. Plot the pixel
   5. Loop back until we've reached the second endpoint

Each of the following routines works exactly the same way.

                    dl10       lda #$00
                               sbc dy

                               ldx x1
                               ldy y1
                               jsr plot

                    dl10a      clc             ;step +y
                               iny             ; until need
                               adc dx          ; to +x
                               bcc dl10b       ;
                               inx             ;
                               sbc dy          ;
                    dl10b      jsr plot        ;
                               cpy y2          ;
                               bne dl10a       ;
                    
                               rts
                              ;----------------------------
                    dl20       lda #$00
                               sbc dx
                    
                               ldx x1
                               ldy y1
                               jsr plot
                    
                    dl20a      clc             ;step +x
                               inx             ; until need
                               adc dy          ; to -y
                               bcc dl20b       ;
                               dey             ;
                               sbc dx          ;
                    dl20b      jsr plot        ;
                               cpx x2          ;
                               bne dl20a       ;
                    
                               rts
                               ;----------------------------
                    dl30       lda #$00
                               sbc dy
                    
                               ldx x1
                               ldy y1
                               jsr plot
                    
                    dl30a      clc             ;step -y
                               dey             ; until need
                               adc dx          ; to +x
                               bcc dl30b       ;
                               inx             ;
                               sbc dy          ;
                    dl30b      jsr plot        ;
                               cpy y2          ;
                               bne dl30a       ;

                               rts
                               ;----------------------------
                    dl40       lda #$00
                               sbc dx

                               ldx x1
                               ldy y1
                               jsr plot

                    dl40a      clc             ;step -x
                               dex             ; until need
                               adc dy          ; to +y
                               bcc dl40b       ;
                               iny             ;
                               sbc dx          ;
                    dl40b      jsr plot        ;
                               cpx x2          ;
                               bne dl40a       ;
                    
                               rts
                               ;----------------------------
                    dl50       lda #$00
                               sbc dy

                               ldx x1
                               ldy y1
                               jsr plot

                    dl50a      clc             ;step +y
                               iny             ; until need
                               adc dx          ; to -x
                               bcc dl50b       ;
                               dex             ;
                               sbc dy          ;
                    dl50b      jsr plot        ;
                               cpy y2          ;
                               bne dl50a       ;
                    
                               rts
                               ;----------------------------
                    dl60       lda #$00
                               sbc dx
                    
                               ldx x1
                               ldy y1
                               jsr plot

                    dl60a      clc             ;step -x
                               dex             ; until need
                               adc dy          ; to -y
                               bcc dl60b       ;
                               dey             ;
                               sbc dx          ;
                    dl60b      jsr plot        ;
                               cpx x2          ;
                               bne dl60a       ;

                               rts
                               ;----------------------------
                    dl70       lda #$00
                               sbc dy

                               ldx x1
                               ldy y1
                               jsr plot

                    dl70a      clc             ;step -y
                               dey             ; until need
                               adc dx          ; to -x
                               bcc dl70b       ;
                               dex             ;
                               sbc dy          ;
                    dl70b      jsr plot        ;
                               cpy y2          ;
                               bne dl70a       ;

                               rts
                    ;---------------------------------------
                    x1         .byte $00
                    y1         .byte $00
                    x2         .byte $00
                    y2         .byte $00
                    dx         .byte $00
                    dy         .byte $00
                    ;---------------------------------------

The values above are temporary holding places for the values used and
generated by the drawline routines. 

                    demoinit   lda #$06        ;dark blue
                               sta $d020       ; background
                               sta $d021       ; and border

                               lda #147        ;clear screen
                               jsr $ffd2       ;

                               lda #$7f        ;disable cia
                               sta $dc0d       ; time irqs

                               jsr blank0      ;clear both
                               jsr blank1      ; buffers

                               lda #$00
                               sta char

                               ldy #$00        ;dirty way to
                    demoinit4  lda #&lt;scrloc    ; draw a
                               sta $fa         ; character
                               lda #&gt;scrloc    ; matrix on
                               sta $fb         ; the screen
                               ldx #$00        ;
                    demoinit5  lda char        ; the top
                               sta ($fa),y     ; left corner
                               inc char        ; is the
                               lda $fa         ; value in
                               clc             ; scrloc
                               adc #40         ;
                               sta $fa         ;
                               bcc demoinit6   ;
                               inc $fb         ;
                    demoinit6  inx             ;
                               cpx #16         ;
                               bne demoinit5   ;
                               iny             ;
                               cpy #16         ;
                               bne demoinit4   ;

                               ldy #$00        ;fill color
                               lda #$01        ; memory with
                    demoinit10 sta $d800,y     ; white
                               sta $d900,y     ;
                               sta $da00,y     ;
                               sta $db00,y     ;
                               iny             ;
                               bne demoinit10  ;

                               lda $d018       ;point VIC to
                               and #%11110000  ; first
                               ora #%00001000  ; buffer
                               sta $d018       ;

                               jsr initobj00   ;1st shape

                               lda #$00        ;init
                               sta angleinc    ; variables
                               sta curshape    ;

                               rts

                    char       .byte $00
                    ;---------------------------------------

The above initialization routine sets everything up for the demo. In order
of appearance, here is an explanation of what each part of this
initialization does. 

   1. Turn the border and background dark blue.
   2. Clear the screen
   3. Disable the CIA timer IRQs
   4. Clear both of the drawing buffers
   5. Draw our character grid on the screen
   6. Fill Color RAM with WHITE
   7. Point the VIC to the first buffer (Buffer#0)
   8. Initialize the first shape
   9. Initialize the &quot;angleinc&quot; and &quot;curshape&quot; variables.

Drawing the character grid on the screen could possibly of been done a
little better. But as it says in the comments, its quick and dirty, but it
does the job. =)

Using our brains a bit, we draw the character grid on the screen in such a
way that starting with zero (the @ sign) we place sequential characters on
the screen in columns, 16 down, by 16 across. This enables us to use a
very nifty and fast plotter as described above. Laying out our character
grid in this manner, gives us 128 sequential bytes in the first column,
128 sequential bytes in the second, and so on. 

You can make character grids of any size (up to 16*16) in this manner very
easily. A smaller grid frees up characters to be used for other things,
like say a niftycool border or other graphics to be used along side of the
character grid where your vectors are being drawn. You just have to adjust
your low byte and high byte tables accordingly. 

                    blank0     ldy #$00
                               lda #$00
                    blank0a    sta $2000,y
                               sta $2080,y
                               sta $2100,y
                               sta $2180,y
                               sta $2200,y
                               sta $2280,y
                               sta $2300,y
                               sta $2380,y
                               sta $2400,y
                               sta $2480,y
                               sta $2500,y
                               sta $2580,y
                               sta $2600,y
                               sta $2680,y
                               sta $2700,y
                               sta $2780,y
                               iny
                               bpl blank0a
                               rts
                    ;---------------------------------------

Clears the first buffer (buffer#0). Unfortunately, these clear routines
are real cycle hogs. There just aren't many fast ways to zero out 4k of
memory. 

                    blank1     ldy #$00
                               lda #$00
                    blank1a    sta $2800,y
                               sta $2880,y
                               sta $2900,y
                               sta $2980,y
                               sta $2a00,y
                               sta $2a80,y
                               sta $2b00,y
                               sta $2b80,y
                               sta $2c00,y
                               sta $2c80,y
                               sta $2d00,y
                               sta $2d80,y
                               sta $2e00,y
                               sta $2e80,y
                               sta $2f00,y
                               sta $2f80,y
                               iny
                               bpl blank1a
                               rts
                    ;---------------------------------------

The above clears the second buffer (buffer#1)...

                    initobj00  lda #$04
                               sta points

                               ldy #$00
                    initobj01  lda theta00,y
                               sta itheta,y
                               sta theta,y
                               lda radiu00,y
                               sta iradiu,y
                               sta radiu,y
                               iny
                               cpy points
                               bne initobj01
                               rts
                    ;---------------------------------------
                    initobj10  lda #$05
                               sta points

                               ldy #$00
                    initobj11  lda theta10,y
                               sta itheta,y
                               sta theta,y
                               lda radiu10,y
                               sta iradiu,y
                               sta radiu,y
                               iny
                               cpy points
                               bne initobj11
                               rts
                    ;---------------------------------------
                    initobj20  lda #$09
                               sta points

                               ldy #$00
                    initobj21  lda theta20,y
                               sta itheta,y
                               sta theta,y
                               lda radiu20,y
                               sta iradiu,y
                               sta radiu,y
                               iny
                               cpy points
                               bne initobj21
                               rts
                    ;---------------------------------------
                    theta00    .byte 0,86,172,0
                    radiu00    .byte 40,40,40,40

                    theta10    .byte 0,64,192,128,0
                    radiu10    .byte 40,40,40,40,40

                    theta20    .byte 0,96,192,32,128
                               .byte 224,64,160,0
                    radiu20    .byte 40,40,40,40,40
                               .byte 40,40,40,40
                    
The above short routines are the three that define the three shapes I
included in this demo. The initialization for a shape is very simple. You
store the number of endpoints in the &quot;points&quot; variable, and then copy the
information from the appropriate table into the &quot;theta&quot; and &quot;radiu&quot;
tables. I also copy the values into the &quot;itheta&quot; and &quot;iradiu&quot; tables in
case there is a routine that needs to reference the initial values rather
than the current values. 

Also note, that as mentioned before, the last end point is the same as the
first endpoint. This closes off the shape by drawing a line back to the
first endpoint. 

Well, there you have it! Documented source code for a demonstration of a
different way to play with two-dimensional vectors. What follows are the
basic programs used to create the data tables used by the above program,
and of course, the uuencoded programs themselves. 

The BASIC Programs
------------------
The first program is the program which builds the sine, cosine and squares
tables. 

                    1 rem -+-   make sin/cos/sqr 2.0   -+-
                    2 rem -+-                          -+-
                    3 rem -+-  by: waveform            -+-
                    4 rem -+- for: disC=overy magazine -+-
                    5 rem -+-  on: 09-14-96            -+-

                    10 rem ::: make sin and cos tables :::
                    12 ba=12288:bh=int(ba/256):bl=ba-bh*256

&quot;ba&quot; is the starting address for the data created by this program.

                    14 forby=0to255
                    16 de=by*1.407:ra=de*(pi/180)
                    18 s=int((sin(ra)*64)+.5)
                    20 ifs&lt;0thens=255-abs(s)+1
                    22 c=int((cos(ra)*64)+.5)
                    24 ifc&lt;0thenc=255-abs(c)+1
                    26 poke ba + by,s:poke ba + 256 + by,c
                    28 next

The above loop makes both the sine table and the cosine table. Also please
note that in place of the word &quot;pi&quot; in line 16 above, you should instead
use Commodore Basic's pi symbol. 

Step-by-step, the loop does this:

   1. Convert from byts to degrees.
   2. Convert from degrees to radians. This is necessary since Commodore's
      Basic trigonomic functions work with radians.
   3. Calculate the sine of the angle.
   4. If the sine is less than 0 (i.e.. negative) adjust the number.
   5. Calculate the cosine of the angle
   6. If the cosine is negative, adjust the number.
   7. Store both the sine and cosine in their tables.
   8. Loop back until all 256 byts have been calculated and stored in a
      table.

When we calculate the sine or cosine of an angle, it becomes quickly
evident that except when the result is 0 or 1, the result is always a
decimal number. Our Commodores don't have a quick and easy way to store a
decimal number, certainly not in one byte. 

Rather than mess with program code to deal with decimal numbers, we can
resolve this issue rather quickly by some planning ahead here when we
create our tables. 

If we take a decimal number, for instance .707107 (the sine of 45 degrees,
or 32 byts) and multiply that number by a constant, in our case 64, we can
arrive at a number which is much easier for our computers to store: 45.25.
The fractional part of the number is chopped off when we store the value
to memory, but what remains is a value that we can work with. 

Incidentally, we add the .5 to the value to reduce the rounding errors
caused when the fractional portion of the number is chopped off. 

What is this about &quot;adjusting&quot; the number, anyway? Well, we know how to
store a decimal number now, but what about a number that's negative? 

One of the nifty things about the math instructions on a Commodore is that
they work the same for both unsigned and signed arithmetic. But to store a
negative number you have to use twos compliment. To arrive at the twos
compliment (negative) number, you flip all of the bits, and add one.
Commodore basic doesn't have an EOR instruction, so we do the next best
thing: subtract the number from 255. Subtracting a number from 255 has the
same effect as EORing a number by %11111111, which would, of course, flip
all of the bits. We then add one, and POOF, the twos complement of a
number. 

The niftiness about twos compliment and signed values in assembly, is that
it gives us a way to represent negative numbers. When you ADD or SBC with
these numbers, the instructions work just as they did before, but the
perform the task you'd expect by using a negative number. 

Steven Judd talks a bit about this in the same articles for C=Hacking that
he wrote detailing how the table of squares works for fast multiplication.
Also, you can read more about this in virtually any book or reference work
that talks about the 65xx line of microprocessors. 

Having mentioned that, how do we arrive at the right answer later on if
one of our values has been multiplied by a factor of 64? Read on... 

                    50 rem ::: make sqr table :::
                    52 forby=0to127
                    54 sq=(by*by)/(4*64)
                    56 poke ba + 512 +by,sq:next
                    60 forby=0to127
                    62 sq=(by*by)/(4*64)
                    64 poke ba + 512 +255-by,sq:next

The above loop creates a table of squares. I did a little planning ahead
as well, and realized that the table need only be 128 bytes long. Recall
our niftycool formula for fast multiplication: f(a+b) - f(a-b) = a*b. 

When we do the first part of the formula (f(a+b)) you can see from how our
program works that the radius is never larger than 64, and at the most,
the value from our sine table will be is 64. Remember from trig class that
sines and cosines range from 0 to 1. =) Since we multiplied our sine and
cosine values by 64, the largest value we could ever get is 64. 

Well, you say, but since the values you pull from your sine and cosine
table can be negative, what happens if the result of A+B or A-B is
negative? The result of a squaring will always be positive, so we don't
have to store any numbers using twos compliment, but we will end up with
situations where the sum or the difference of A and B will be negative. We
resolve this by building a second table of squares above the first, and we
build it downward in memory. 

Hopefully, this example will clear up any confusion:

If A (our radius) is 20, and the sine of our angle is -40, the sum of A
and B is -20. The value in the register is 236, which means -20 in two
complement. Since we built another table above the first 128 byte table of
squares, we are free and clear. Our foresight put the correct value for
f(-20) in that location. 

Now, there is one more issue to deal with. We multiplied all of our sines
and cosines by a factor of 64. Somewhere we have to divide by 64 to keep
the equation equal (and to not freak out my 7th grade algebra instructor)
so we take a look at the function we have for f(x): 

   f(x)=(x^2)/4

We realize we can do that *divide-by-64* thing here, to arrive at:

   f(x)=(x^2)/4/64

Or, written another way:

   f(x)=(x^2)/4*64 which is also f(x)=(x^2)/128

I left it as 4*64 in the program for clarity sake.

                    100 rem ::: save to disk :::
                    102 open1,8,15,&quot;s0:sin/cos/sqr&quot;:close1
                    104 open2,8,2,&quot;sin/cos/sqr,p,w&quot;
                    106 print#2,chr$(bl)chr$(bh);
                    108 fort=0to767
                    110 print#2,chr$(peek(ba+t));
                    112 next
                    114 close2

The above simply saves the table we created to disk, with a loading
address of $3000. =) Just what the demo needs! =)

Now, on to the second program...

The second program is the program to build the low byte, high byte and
bitmask tables. 

                    1 rem -+- make base/mask table 2.0 -+-
                    2 rem -+-                          -+-
                    3 rem -+-  by: waveform            -+-
                    4 rem -+- for: disC=overy magazine -+-
                    5 rem -+-  on: 09-14-96            -+-

                    10 ba = 13056 : cb=8192

&quot;ba&quot; is the starting address for the data created by this program.
&quot;cb&quot; is the base address for the character matrix used by our demo.

                    12 bh=int(ba/256):bl=ba-bh*256
                    100 c=0:fort=0 to 15
                    102 forq=0to7
                    104 b1=cb+(t*128)
                    106 hb=int(b1/256):lb=b1-hb*256
                    108 poke ba + c,lb:poke ba + 128 + c,hb
                    110 c=c+1:nextq,t

The above loop creates the low byte table as well as the high byte table
for the first buffer (buffer#0)

                    120 c=0:fort=0 to 15
                    122 forq=0to7
                    124 b1=cb+2048+(t*128)
                    126 hb=int(b1/256):lb=b1-hb*256
                    128 poke ba +256 +c,hb
                    130 c=c+1:nextq,t

The above loop creates the high byte table for the second buffer
(buffer#1)

                    150 fort=0 to 15
                    152 forq=0to7
                    154 poke ba + 384+(t*8)+q,2 (7-q)
                    156 nextq,t

The above loop creates the bitmask table.

                    200 open1,8,15,&quot;s0:base/mask&quot;:close1
                    202 open2,8,2,&quot;base/mask,p,w&quot;
                    204 print#2,chr$(bl)chr$(bh);
                    206 fort=0to511
                    208 print#2,chr$(peek(ba+t));
                    210 next
                    212 close2

Here we have a small routine to save the tables created by this program to
disk, with a loading address of $3300. 

UUEncoded Files
---------------
Below you will find the uuencoded files detailed in this article. I
included TurboAssmembler source, Object code (sys 2080 to run), both
tables needed by the program to run, as well as the basic programs used to
create them. 

I will make all of these available in a zip package on my web site:
http://marie.az.com/~waveform

How To Get The Demo To Run
--------------------------
There wasn't enough time to write a loader for this demo before the
deadline, and even though my gracious host allowed me the opportunity to
add one, it is really more trouble than its worth. 

So for those of you explorers who want to know how things are really
done, here's a quick and simple method of launching this demo: 

   Step One:   load &quot;sin_cos_sqr&quot;,8,1 
   Step Two:   load &quot;base_mask&quot;,8,1
   Step Three: load &quot;disc-demo.obj&quot;,8,1
   Step Four:  sys2080

[Ed. Note : To prevent possible compatibility problems with unix file-handling,
  the UUencoded files in this article will extract with filenames as seen
  in the loading sequence above.  If you generate new tables with the basic
  table generators, then the new tables will be named to their original
  designations (i.e., sin/cos/sqr instead of sin_cos_sqr).  Please remember
  to change filenames in your loading procedure to match.]

Demo-Controls
-------------
F1 : increments angle (apparent speed)
F3 : decrements angle
F5 : expands shape
F7 : shrinks shape

&lt;RETURN&gt;   : changes shape
&lt;SPACE&gt;    : resets to default size and angle
&lt;RUN/STOP&gt; : quits the demo

--
For more information or general commentary on this article, Mr. John Kaiser
(Waveform/MLM) may be reached at waveform@az.com


Addenum by S. Judd, Technical Editor
------+------^-------^------+-------

John shrewdly omitted a few &quot;tricks&quot; in order for the code to flow more
clearly as a learning experience.  Once the process is well-understood, a
bit of sneaky optimization can be undertaken, as follows :

[...]

&gt;                     ;---------------------------------------
&gt;                     expdn      ldy #$00
&gt;                     expdn1     lda radiu,y
&gt;                                sec
&gt;                                sbc #$01       ;subtract one
&gt;                                cmp #2         ;at minimum?
&gt;                                bcs expdn2
&gt;                                lda #2
&gt;                     expdn2     sta radiu,y    ;store
&gt;                                iny
&gt;                                cpy points     ;do all points
&gt;                                bne expdn1
 
This can be written more efficiently, as follows :
 
expdn   LDX POINTS      ;Start at top
:L1     LDA RADIU,X
        CMP #3
        BCC :SKIP
        DEC RADIU,X
:SKIP   DEX
        BPL :L1         ;Only allows 128 points though
 
It is always better to start Y large and count downwards when you can.
His loop takes 4+2+3+2+3/(2+2)+4+2+3 = 23/24 cycles per iteration, while
the rewrite takes 4+2+3/(2+7)+2 = 11/17 cycles per iteration, and a few
less bytes too.  Here it is not such a huge deal -- 6 cycles savings
per loop for the one usually used -- but this kind of trick can sometimes
lead to immense savings.

[...]

&gt;                     rotate     ldy #$00
 
In 'sneaky mode' we could start at Y points and go downwards here as well.
 
&gt;                     rotate1    lda theta,y    ;get theta
&gt;                                clc
&gt;                                adc angleinc   ;add amount
&gt;                                sta theta,y    ;store theta
&gt;                                iny
&gt;                                cpy points     ;do all points
&gt;                                bne rotate1
&gt;                                rts

[...]

&gt;                     ;---------------------------------------
&gt;                     plot2      lda lobyte,x   ;lo byte
&gt;                                sta $02        ;
&gt;                                lda hibyte0,x  ;hi byte
&gt;                                sta $03        ;
&gt;
&gt;                                lda ($02),y    ;
&gt;                                ora bitmask,x  ;turn pixel on
&gt;                                sta ($02),y    ;
&gt;
&gt;                                pla            ;restore .a
&gt;                                rts
&gt;                     ;---------------------------------------
 
 
Please note :
 
        1- Using a JSR plot each time adds 12 cycles (JSR + RTS)
 
        2- Most of the time you plot within the same byte.
           That is, reloading $02/$03 each time is redundant by a
           factor of 8 at the very least.  (The x-coordinate is
           not going to change by more than 1 at each iteration!)
 
Every cycle saved in a line drawing routine produces huge dividends.  If
you have an object with just three lines in it, and each line has 100
points in it, you suddenly start saving thousands of cycles, (i.e., using
a JSR adds 3600 cycles immediately).  Those 14 cycles in loading the
coordinate each time translates to many extra thousand cycles too.
In raster time, we're talking well over half the screen here!
 
In general, if it's in a loop, you can't optimize it enough :).
 
Again, though, doing things this way makes things much clearer (which makes
life easier on the programmer too).
--

begin 644 disc-demo.sou
M.RTM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+0T[(&quot;#!
M(,1%34\@3T8@Q$E30SU/5D5262`M(,)9.B#7059%1D]230T[#3L@(&quot;A#*2`Q
M.3DV($9/4B#$25-#/4]615)9(,U!1T%:24Y%#3LBU$A%(,I/55).04P@1D]2
M(,-/34U/1$]212#%3E1(55-)05-44R(-.RTM+2TM+2TM+2TM+2TM+2TM+2TM
M+2TM+2TM+2TM+2TM+2TM+2TM+0T@(&quot;`@(&quot;`@(&quot;`@(&quot;H](&quot;0P.#(P#0U03TE.
M5%,@(&quot;`@(#T@)#`S,T,@(&quot;`[3E5-0D52($]&amp;(%!/24Y44PU!3D=,14E.0R`@
M(#T@)#`S,T0@(&quot;`[04Y'3$4@5$\@24Y#4D5-14Y4#4-54E-(05!%(&quot;`@/2`D
M,#,S12`@(#M#55)214Y4(%-(05!%#51(151!(&quot;`@(&quot;`@/2`D,#,T,&quot;`@(#M4
M2$5405,-4D%$254@(&quot;`@(&quot;`](&quot;0P,S4P(&quot;`@.U)!1$E54PU)5$A%5$$@(&quot;`@
M(#T@)#`S-C`@(&quot;`[5$%&quot;($]&amp;($E.250@5$A%5$%3#4E2041)52`@(&quot;`@/2`D
M,#,W,&quot;`@(#L@(&quot;`@(&quot;`@24Y)5&quot;!2041)55,-#5-#4DQ/0R`@(&quot;`@/2`Q,3DV
M(&quot;`@(#M,3T-!5$E/3B!/1B!43U`-(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@.R!,
M1494($-/4DY%4B!/1@T@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`[($-(05(@34%4
M4DE8($].#2`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(#L@4T-2145.#0U-4TE.(&quot;`@
M(&quot;`@(#T@)#,P,#`@(&quot;`[5$%&quot;3$4@3T8@4TE.15,-34-/4R`@(&quot;`@(&quot;`](&quot;0S
M,3`P(&quot;`@.R`@(&quot;`@(&quot;`@($-/4TE.15,-35-14B`@(&quot;`@(&quot;`](&quot;0S,C`P(&quot;`@
M.R`@(&quot;`@(&quot;`@(%-154%215,-3$]&quot;651%(&quot;`@(&quot;`](&quot;0S,S`P(&quot;`@.TQ/($)9
M5$53#4A)0EE413`@(&quot;`@/2`D,S,X,&quot;`@(#M(22!&quot;651%4R`H)#(P,#`K*0U(
M24)95$4Q(&quot;`@(#T@)#,T,#`@(&quot;`[(&quot;`@(&quot;`@(&quot;`@*&quot;0R.#`P*RD-0DE434%3
M2R`@(&quot;`](&quot;0S-#@P(&quot;`@.U!)6$5,($))5&quot;!-05-+#3LM+2TM+2TM+2TM+2TM
M+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2T-(&quot;`@(&quot;`@(&quot;`@(&quot;!*4U(@1$5-
M3TE.250@(&quot;`[24Y)5&quot;!&amp;3U(@1$5-3PT@(&quot;`@(&quot;`@(&quot;`@(#LM+2TM+2TM+2TM
M+2TM+2TM+2TM+2TM+2TM+2TM#4U!24X@(&quot;`@(&quot;`@3$1!(&quot;,E,3$Q,3$Q,3`@
M.U-#04X@34%44DE8#2`@(&quot;`@(&quot;`@(&quot;`@4U1!(&quot;1$0S`P(&quot;`@(&quot;`@.PT@(&quot;`@
M(&quot;`@(&quot;`@($Q$02`D1$,P,2`@(&quot;`@(#L-#2`@(&quot;`@(&quot;`@(&quot;`@0TU0(&quot;,E,3$Q
M,#$Q,3$@.T8Q#2`@(&quot;`@(&quot;`@(&quot;`@0D51($M%648Q#2`@(&quot;`@(&quot;`@(&quot;`@0TU0
M(&quot;,E,3$P,3$Q,3$@.T8S#2`@(&quot;`@(&quot;`@(&quot;`@0D51($M%648S#2`@(&quot;`@(&quot;`@
M(&quot;`@0TU0(&quot;,E,3`Q,3$Q,3$@.T8U#2`@(&quot;`@(&quot;`@(&quot;`@0D51($M%648U#2`@
M(&quot;`@(&quot;`@(&quot;`@0TU0(&quot;,E,3$Q,3`Q,3$@.T8W#2`@(&quot;`@(&quot;`@(&quot;`@0D51($M%
M648W#2`@(&quot;`@(&quot;`@(&quot;`@0TU0(&quot;,E,3$Q,3$Q,#$@.U)%5%523@T@(&quot;`@(&quot;`@
M(&quot;`@($)%42!+15E215154DX-#2`@(&quot;`@(&quot;`@(&quot;`@3$1!(&quot;,E,#$Q,3$Q,3$@
M.U-#04X@34%44DE8#2`@(&quot;`@(&quot;`@(&quot;`@4U1!(&quot;1$0S`P(&quot;`@(&quot;`@.PT@(&quot;`@
M(&quot;`@(&quot;`@($Q$02`D1$,P,2`@(&quot;`@(#L-#2`@(&quot;`@(&quot;`@(&quot;`@0TU0(&quot;,E,3$Q
M,#$Q,3$@.U-004-%#2`@(&quot;`@(&quot;`@(&quot;`@0D51($M%65-004-%#2`@(&quot;`@(&quot;`@
M(&quot;`@0TU0(&quot;,E,#$Q,3$Q,3$@.U)%5%523@T@(&quot;`@(&quot;`@(&quot;`@($)%42!+15E3
M5$]0#0U2145.5%)9(&quot;`@($I34B!23U1!5$4@(&quot;`@(#M23U1!5$4@4TA!4$4-
M(&quot;`@(&quot;`@(&quot;`@(&quot;!*4U(@1%)!5U-(05!%(&quot;`[1%)!5R!32$%010T-(&quot;`@(&quot;`@
M(&quot;`@(&quot;!*35`@34%)3B`@(&quot;`@(&quot;`[3$]/4`T[+2TM+2TM+2TM+2TM+2TM+2TM
M+2TM+2TM+2TM+2TM+2TM+2TM+2TM#4M%648Q(&quot;`@(&quot;`@2DU0(%)/5%50#4M%
M648S(&quot;`@(&quot;`@2DU0(%)/5$1.#4M%648U(&quot;`@(&quot;`@2DU0($584%50#4M%648W
M(&quot;`@(&quot;`@2DU0($584$1.#4M%65)%5%523B`@2DU0($Y%5U-(05!%#4M%65-0
M04-%(&quot;`@2DU0(%-43U!23U0-2T594U1/4&quot;`@(&quot;!*35`@4U1/4$1%34\-.RTM
M+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+0U23U154&quot;`@
M(&quot;`@($E.0R!!3D=,14E.0R`@(#M)3D-214%310T@(&quot;`@(&quot;`@(&quot;`@($I-4&quot;!2
M145.5%)9#3LM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM
M+2T-4D]41$X@(&quot;`@(&quot;!$14,@04Y'3$5)3D,@(&quot;`[1$5#4D5!4T4-(&quot;`@(&quot;`@
M(&quot;`@(&quot;!*35`@4D5%3E1260T[+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM
M+2TM+2TM+2TM+2TM#4584%50(&quot;`@(&quot;`@3$19(&quot;,D,#`-15A055`Q(&quot;`@(&quot;!,
M1$$@4D%$254L60T@(&quot;`@(&quot;`@(&quot;`@($-,0PT@(&quot;`@(&quot;`@(&quot;`@($%$0R`C)#`Q
M(&quot;`@(&quot;`@(#M!1$0@3TY%#2`@(&quot;`@(&quot;`@(&quot;`@0TU0(&quot;,V,R`@(&quot;`@(&quot;`@.T%4
M($U!6$E-54T_#2`@(&quot;`@(&quot;`@(&quot;`@0D-#($584%50,@T@(&quot;`@(&quot;`@(&quot;`@($Q$
M02`C-C,-15A055`R(&quot;`@(&quot;!35$$@4D%$254L62`@(&quot;`[4U1/4D4-(&quot;`@(&quot;`@
M(&quot;`@(&quot;!)3ED-(&quot;`@(&quot;`@(&quot;`@(&quot;!#4%D@4$])3E13(&quot;`@(&quot;`[1$\@04Q,(%!/
M24Y44PT@(&quot;`@(&quot;`@(&quot;`@($).12!%6%!54#$-#2`@(&quot;`@(&quot;`@(&quot;`@2DU0(%)%
M14Y44ED@(&quot;`@.U)%5%523@T[+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM
M+2TM+2TM+2TM+2TM#4584$1.(&quot;`@(&quot;`@3$19(&quot;,D,#`-15A01$XQ(&quot;`@(&quot;!,
M1$$@4D%$254L60T@(&quot;`@(&quot;`@(&quot;`@(%-%0PT@(&quot;`@(&quot;`@(&quot;`@(%-&quot;0R`C)#`Q
M(&quot;`@(&quot;`@(#M354)44D%#5&quot;!/3D4-(&quot;`@(&quot;`@(&quot;`@(&quot;!#35`@(S(@(&quot;`@(&quot;`@
M(&quot;`[050@34E.24U533\-(&quot;`@(&quot;`@(&quot;`@(&quot;!&quot;0U,@15A01$XR#2`@(&quot;`@(&quot;`@
M(&quot;`@3$1!(&quot;,R#4584$1.,B`@(&quot;`@4U1!(%)!1$E5+%D@(&quot;`@.U-43U)%#2`@
M(&quot;`@(&quot;`@(&quot;`@24Y9#2`@(&quot;`@(&quot;`@(&quot;`@0U!9(%!/24Y44R`@(&quot;`@.T1/($%,
M3&quot;!03TE.5%,-(&quot;`@(&quot;`@(&quot;`@(&quot;!&quot;3D4@15A01$XQ#0T@(&quot;`@(&quot;`@(&quot;`@($I-
M4&quot;!2145.5%)9(&quot;`@(#M215154DX-.RTM+2TM+2TM+2TM+2TM+2TM+2TM+2TM
M+2TM+2TM+2TM+2TM+2TM+0U.15=32$%012`@($E.0R!#55)32$%010T@(&quot;`@
M(&quot;`@(&quot;`@($Q$02!#55)32$%010T@(&quot;`@(&quot;`@(&quot;`@($--4&quot;`C,R`@(&quot;`@(&quot;`@
M(#M,05-4(%-(05!%/PT@(&quot;`@(&quot;`@(&quot;`@($).12!.15=32$%013$@(#M.3U!%
M#2`@(&quot;`@(&quot;`@(&quot;`@3$1!(&quot;,D,#`@(&quot;`@(&quot;`@.U-%3$5#5&quot;!&amp;25)35`T@(&quot;`@
M(&quot;`@(&quot;`@(%-402!#55)32$%012`@(#L@4TA!4$4-#4Y%5U-(05!%,2`@0TU0
M(&quot;,R(&quot;`@(&quot;`@(&quot;`@.S@@4$])3E0@4U1!4C\-(&quot;`@(&quot;`@(&quot;`@(&quot;!&quot;3D4@3D57
M4TA!4$4R#2`@(&quot;`@(&quot;`@(&quot;`@2E-2($E.251/0DHR,&quot;`@.TE.250@4TA!4$4-
M(&quot;`@(&quot;`@(&quot;`@(&quot;!*35`@4D5%3E1260U.15=32$%013(@($--4&quot;`C,2`@(&quot;`@
M(&quot;`@(#LR(%1224%.1TQ%4S\-(&quot;`@(&quot;`@(&quot;`@(&quot;!&quot;3D4@3D574TA!4$4S#2`@
M(&quot;`@(&quot;`@(&quot;`@2E-2($E.251/0DHQ,&quot;`@.TE.250@4TA!4$4-(&quot;`@(&quot;`@(&quot;`@
M(&quot;!*35`@4D5%3E1260U.15=32$%013,@($I34B!)3DE43T)*,#`@(#LQ(%12
M24%.1TQ%#0T@(&quot;`@(&quot;`@(&quot;`@($I-4&quot;!2145.5%)9#3LM+2TM+2TM+2TM+2TM
M+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2T-4U1/4%)/5&quot;`@(&quot;!,1$$@(R0P
M,&quot;`@(&quot;`@(&quot;`[4U1/4&quot;!!3$P-(&quot;`@(&quot;`@(&quot;`@(&quot;!35$$@04Y'3$5)3D,@(&quot;`[
M(%)/5$%424].#2`@(&quot;`@(&quot;`@(&quot;`@2DU0(%)%14Y44ED@(&quot;`@.PT[+2TM+2TM
M+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM#5-43U!$14U/(&quot;`@
M3$1!(&quot;,D.#$@(&quot;`@(&quot;`@.U)%4T54($-)00T@(&quot;`@(&quot;`@(&quot;`@(%-402`D1$,P
M1&quot;`@(&quot;`@(#L@24Y415)255!44PT-(&quot;`@(&quot;`@(&quot;`@(&quot;!*35`@)$9%-C8@(&quot;`@
M(&quot;`[15A)5&quot;!624$-(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`[($M%4DY!
M3&quot;!705)-#2`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@.R!35$%25`T[+2TM
M+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM#5)/5$%412`@
M(&quot;`@3$19(&quot;,D,#`-4D]4051%,2`@(&quot;!,1$$@5$A%5$$L62`@(&quot;`[1T54(%1(
M151!#2`@(&quot;`@(&quot;`@(&quot;`@0TQ##2`@(&quot;`@(&quot;`@(&quot;`@041#($%.1TQ%24Y#(&quot;`@
M.T%$1&quot;!!34]53E0-(&quot;`@(&quot;`@(&quot;`@(&quot;!35$$@5$A%5$$L62`@(&quot;`[4U1/4D4@
M5$A%5$$-(&quot;`@(&quot;`@(&quot;`@(&quot;!)3ED-(&quot;`@(&quot;`@(&quot;`@(&quot;!#4%D@4$])3E13(&quot;`@
M(&quot;`[1$\@04Q,(%!/24Y44PT@(&quot;`@(&quot;`@(&quot;`@($).12!23U1!5$4Q#0T@(&quot;`@
M(&quot;`@(&quot;`@(%)44PT[+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM
M+2TM+2TM#41205=32$%012`@3$19(&quot;,D,#`@(&quot;`@(&quot;`@.T9)4E-4(%!/24Y4
M#0T@(&quot;`@(&quot;`@(&quot;`@($Q$02!42$5402Q9(&quot;`@(#M005-3(%1(151!(&quot;8-(&quot;`@
M(&quot;`@(&quot;`@(&quot;!35$$@1UA95$A%5$$@(&quot;`[(%)!1$E54R!43PT@(&quot;`@(&quot;`@(&quot;`@
M($Q$02!2041)52Q9(&quot;`@(#L@1T546%D@1D]2#2`@(&quot;`@(&quot;`@(&quot;`@4U1!($=8
M65)!1$E54R`@.R!#3TY615)324].#2`@(&quot;`@(&quot;`@(&quot;`@2E-2($=%5%A9(&quot;`@
M(&quot;`@.PT-(&quot;`@(&quot;`@(&quot;`@(&quot;!,1$$@6%!/4R`@(&quot;`@(&quot;`[0T].5D525&quot;!03TQ!
M4@T@(&quot;`@(&quot;`@(&quot;`@($-,0R`@(&quot;`@(&quot;`@(&quot;`@(#L@5$\-(&quot;`@(&quot;`@(&quot;`@(&quot;!!
M1$,@(S8T(&quot;`@(&quot;`@(&quot;`[($-!4E1%4TE!3@T@(&quot;`@(&quot;`@(&quot;`@(%-402!8,2`@
M(&quot;`@(&quot;`@(#L-(&quot;`@(&quot;`@(&quot;`@(&quot;!,1$$@65!/4R`@(&quot;`@(&quot;`[#2`@(&quot;`@(&quot;`@
M(&quot;`@0TQ#(&quot;`@(&quot;`@(&quot;`@(&quot;`@.PT@(&quot;`@(&quot;`@(&quot;`@($%$0R`C-C0@(&quot;`@(&quot;`@
M(#L-(&quot;`@(&quot;`@(&quot;`@(&quot;!35$$@63$@(&quot;`@(&quot;`@(&quot;`[#0T@(&quot;`@(&quot;`@(&quot;`@($Q$
M62`C)#`Q(&quot;`@(&quot;`@(#M314-/3D0@4$])3E0-1%,R(&quot;`@(&quot;`@(&quot;!,1$$@5$A%
M5$$L60T@(&quot;`@(&quot;`@(&quot;`@(%-402!'6%E42$5400T@(&quot;`@(&quot;`@(&quot;`@($Q$02!2
M041)52Q9#2`@(&quot;`@(&quot;`@(&quot;`@4U1!($=865)!1$E54PT@(&quot;`@(&quot;`@(&quot;`@($I3
M4B!'151860T@(&quot;`@(&quot;`@(&quot;`@($Q$02!84$]3#2`@(&quot;`@(&quot;`@(&quot;`@0TQ##2`@
M(&quot;`@(&quot;`@(&quot;`@041#(&quot;,V-`T@(&quot;`@(&quot;`@(&quot;`@(%-402!8,@T@(&quot;`@(&quot;`@(&quot;`@
M($Q$02!94$]3#2`@(&quot;`@(&quot;`@(&quot;`@0TQ##2`@(&quot;`@(&quot;`@(&quot;`@041#(&quot;,V-`T@
M(&quot;`@(&quot;`@(&quot;`@(%-402!9,@T@(&quot;`@(&quot;`@(&quot;`@(%-462!$4UD@(&quot;`@(&quot;`@(#M0
M4D5315)612`N60T@(&quot;`@(&quot;`@(&quot;`@($I34B!$4D%73$E.12`@(#M$4D%7($$@
M3$E.10T@(&quot;`@(&quot;`@(&quot;`@($Q$62!$4UD@(&quot;`@(&quot;`@(#M215-43U)%(&quot;Y9#0T@
M(&quot;`@(&quot;`@(&quot;`@($Q$02!8,B`@(&quot;`@(&quot;`@(#M-04M%($5.1%!/24Y4#2`@(&quot;`@
M(&quot;`@(&quot;`@4U1!(%@Q(&quot;`@(&quot;`@(&quot;`@.R!/1B!42$E3($Q)3D4-(&quot;`@(&quot;`@(&quot;`@
M(&quot;!,1$$@63(@(&quot;`@(&quot;`@(&quot;`[(%-405)4(%!/24Y4#2`@(&quot;`@(&quot;`@(&quot;`@4U1!
M(%DQ(&quot;`@(&quot;`@(&quot;`@.R!/1B!.15A4($Q)3D4-#2`@(&quot;`@(&quot;`@(&quot;`@24Y9(&quot;`@
M(&quot;`@(&quot;`@(&quot;`@.T1/($%,3&quot;!03TE.5%,-(&quot;`@(&quot;`@(&quot;`@(&quot;!#4%D@4$])3E13
M(&quot;`@(&quot;`[#2`@(&quot;`@(&quot;`@(&quot;`@0DY%($13,B`@(&quot;`@(&quot;`@.PT-(&quot;`@(&quot;`@(&quot;`@
M(&quot;!,1$$@)$0P,3@@(&quot;`@(&quot;`[4TA/5R!/55(@5T]22PT@(&quot;`@(&quot;`@(&quot;`@($5/
M4B`C)3`P,#`P,#$P(#L-(&quot;`@(&quot;`@(&quot;`@(&quot;!35$$@)$0P,3@@(&quot;`@(&quot;`[#0T@
M(&quot;`@(&quot;`@(&quot;`@($Q$02`D1#`Q.&quot;`@(&quot;`@(#M#3$5!4B!42$4-(&quot;`@(&quot;`@(&quot;`@
M(&quot;!!3D0@(R4P,#`P,#`Q,&quot;`[($Y%6%0@0E5&amp;1D52#2`@(&quot;`@(&quot;`@(&quot;`@0D51
M($13-&quot;`@(&quot;`@(&quot;`@.R!&amp;3U(@1%)!5TE.1PT@(&quot;`@(&quot;`@(&quot;`@($I34B!&quot;3$%.
M2S`@(&quot;`@(#L@24X-(&quot;`@(&quot;`@(&quot;`@(&quot;!*35`@1%,U(&quot;`@(&quot;`@(&quot;`[#413-&quot;`@
M(&quot;`@(&quot;`@2E-2($),04Y+,2`@(&quot;`@.PT-1%,U(&quot;`@(&quot;`@(&quot;!25%,-#41362`@
M(&quot;`@(&quot;`@+D)95$4@)#`P#3LM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM
M+2TM+2TM+2TM+2T-1T546%D@(&quot;`@(&quot;!35%D@1UA962`@(&quot;`@(&quot;`[4%)%4T52
M5D4@+ED-(&quot;`@(&quot;`@(&quot;`@(&quot;!35$$@1UA902`@(&quot;`@(&quot;`[(&quot;`@(&quot;`@(&quot;`@+D$-
M#2`@(&quot;`@(&quot;`@(&quot;`@3$19($=8651(151!(&quot;`@.PT@(&quot;`@(&quot;`@(&quot;`@($Q$02!-
M0T]3+%D@(&quot;`@(#M!#2`@(&quot;`@(&quot;`@(&quot;`@4T5#(&quot;`@(&quot;`@(&quot;`@(&quot;`@.PT@(&quot;`@
M(&quot;`@(&quot;`@(%-&quot;0R!'6%E2041)55,@(#LM0@T@(&quot;`@(&quot;`@(&quot;`@(%1!62`@(&quot;`@
M(&quot;`@(&quot;`@(#L-(&quot;`@(&quot;`@(&quot;`@(&quot;!,1$$@35-14BQ9(&quot;`@(&quot;`[1BA!+4(I#2`@
M(&quot;`@(&quot;`@(&quot;`@4U1!($=8651%35`@(&quot;`@.U-43U)%(%)%4U5,5`T-(&quot;`@(&quot;`@
M(&quot;`@(&quot;!,1%D@1UA95$A%5$$@(&quot;`[#2`@(&quot;`@(&quot;`@(&quot;`@3$1!($U#3U,L62`@
M(&quot;`@.T$-(&quot;`@(&quot;`@(&quot;`@(&quot;!#3$,@(&quot;`@(&quot;`@(&quot;`@(&quot;`[#2`@(&quot;`@(&quot;`@(&quot;`@
M041#($=865)!1$E54R`@.RM&quot;#2`@(&quot;`@(&quot;`@(&quot;`@5$%9(&quot;`@(&quot;`@(&quot;`@(&quot;`@
M.PT@(&quot;`@(&quot;`@(&quot;`@($Q$02!-4U%2+%D@(&quot;`@(#M&amp;*$$K0BD-(&quot;`@(&quot;`@(&quot;`@
M(&quot;!314,@(&quot;`@(&quot;`@(&quot;`@(&quot;`[#2`@(&quot;`@(&quot;`@(&quot;`@4T)#($=8651%35`@(&quot;`@
M.RU&amp;*$$M0BD-(&quot;`@(&quot;`@(&quot;`@(&quot;!35$$@6%!/4R`@(&quot;`@(&quot;`[/5@@0T]/4D1)
M3D%410T-(&quot;`@(&quot;`@(&quot;`@(&quot;!,1%D@1UA95$A%5$$@(&quot;`[#2`@(&quot;`@(&quot;`@(&quot;`@
M3$1!($U324XL62`@(&quot;`@.T$-(&quot;`@(&quot;`@(&quot;`@(&quot;!314,@(&quot;`@(&quot;`@(&quot;`@(&quot;`[
M#2`@(&quot;`@(&quot;`@(&quot;`@4T)#($=865)!1$E54R`@.RU&quot;#2`@(&quot;`@(&quot;`@(&quot;`@5$%9
M(&quot;`@(&quot;`@(&quot;`@(&quot;`@.PT@(&quot;`@(&quot;`@(&quot;`@($Q$02!-4U%2+%D@(&quot;`@(#M&amp;*$$M
M0BD-(&quot;`@(&quot;`@(&quot;`@(&quot;!35$$@1UA95$5-4&quot;`@(&quot;`[4U1/4D4@4D5354Q4#0T@
M(&quot;`@(&quot;`@(&quot;`@($Q$62!'6%E42$5402`@(#L-(&quot;`@(&quot;`@(&quot;`@(&quot;!,1$$@35-)
M3BQ9(&quot;`@(&quot;`[00T@(&quot;`@(&quot;`@(&quot;`@($-,0R`@(&quot;`@(&quot;`@(&quot;`@(#L-(&quot;`@(&quot;`@
M(&quot;`@(&quot;!!1$,@1UA94D%$2553(&quot;`[*T(-(&quot;`@(&quot;`@(&quot;`@(&quot;!405D@(&quot;`@(&quot;`@
M(&quot;`@(&quot;`[#2`@(&quot;`@(&quot;`@(&quot;`@3$1!($U345(L62`@(&quot;`@.T8H02M&quot;*0T@(&quot;`@
M(&quot;`@(&quot;`@(%-%0R`@(&quot;`@(&quot;`@(&quot;`@(#L-(&quot;`@(&quot;`@(&quot;`@(&quot;!30D,@1UA95$5-
M4&quot;`@(&quot;`[+48H02U&quot;*0T@(&quot;`@(&quot;`@(&quot;`@(%-402!94$]3(&quot;`@(&quot;`@(#L]62!#
M3T]21$E.051%#0T@(&quot;`@(&quot;`@(&quot;`@($Q$62!'6%E9(&quot;`@(&quot;`@(#M215-43U)%
M(&quot;Y9#2`@(&quot;`@(&quot;`@(&quot;`@3$1!($=864$@(&quot;`@(&quot;`@.U)%4U1/4D4@+D$-#2`@
M(&quot;`@(&quot;`@(&quot;`@4E13#2`@(&quot;`@(&quot;`@(&quot;`@.RTM+2TM+2TM+2TM+2TM+2TM+2TM
M+2TM+2TM+2T-1UA94D%$2553(&quot;`N0EE412`D,#`-1UA95$A%5$$@(&quot;`N0EE4
M12`D,#`-#5A03U,@(&quot;`@(&quot;`@+D)95$4@)#`P#5E03U,@(&quot;`@(&quot;`@+D)95$4@
M)#`P#0U'6%E9(&quot;`@(&quot;`@(&quot;Y&quot;651%(&quot;0P,`U'6%E!(&quot;`@(&quot;`@(&quot;Y&quot;651%(&quot;0P
M,`U'6%E414U0(&quot;`@(&quot;Y&quot;651%(&quot;0P,`T[+2TM+2TM+2TM+2TM+2TM+2TM+2TM
M+2TM+2TM+2TM+2TM+2TM+2TM#5!,3U0@(&quot;`@(&quot;`@4$A!(&quot;`@(&quot;`@(&quot;`@(&quot;`@
M.U!215-%4E9%(&quot;Y!#0T@(&quot;`@(&quot;`@(&quot;`@($Q$02`D1#`Q.&quot;`@(&quot;`@(#M03$]4
M($E.#2`@(&quot;`@(&quot;`@(&quot;`@04Y$(&quot;,E,#`P,#`P,3`@.R!#3U)214-4#2`@(&quot;`@
M(&quot;`@(&quot;`@0DY%(%!,3U0R(&quot;`@(&quot;`@.R!&quot;549&amp;15(-#5!,3U0Q(&quot;`@(&quot;`@3$1!
M($Q/0EE412Q8(&quot;`@.TQ/($)95$4-(&quot;`@(&quot;`@(&quot;`@(&quot;!35$$@)#`R(&quot;`@(&quot;`@
M(&quot;`[#2`@(&quot;`@(&quot;`@(&quot;`@3$1!($A)0EE413$L6&quot;`@.TA)($)95$4-(&quot;`@(&quot;`@
M(&quot;`@(&quot;!35$$@)#`S(&quot;`@(&quot;`@(&quot;`[#2`@(&quot;`@(&quot;`@(&quot;`@3$1!(&quot;@D,#(I+%D@
M(&quot;`@.PT@(&quot;`@(&quot;`@(&quot;`@($]202!&quot;251-05-++%@@(#M455).(%!)6$5,($].
M#2`@(&quot;`@(&quot;`@(&quot;`@4U1!(&quot;@D,#(I+%D@(&quot;`@.PT-(&quot;`@(&quot;`@(&quot;`@(&quot;!03$$@
M(&quot;`@(&quot;`@(&quot;`@(&quot;`[4D535$]212`N00T@(&quot;`@(&quot;`@(&quot;`@(%)44PT[+2TM+2TM
M+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM#5!,3U0R(&quot;`@(&quot;`@
M3$1!($Q/0EE412Q8(&quot;`@.TQ/($)95$4-(&quot;`@(&quot;`@(&quot;`@(&quot;!35$$@)#`R(&quot;`@
M(&quot;`@(&quot;`[#2`@(&quot;`@(&quot;`@(&quot;`@3$1!($A)0EE413`L6&quot;`@.TA)($)95$4-(&quot;`@
M(&quot;`@(&quot;`@(&quot;!35$$@)#`S(&quot;`@(&quot;`@(&quot;`[#2`@(&quot;`@(&quot;`@(&quot;`@3$1!(&quot;@D,#(I
M+%D@(&quot;`@.PT@(&quot;`@(&quot;`@(&quot;`@($]202!&quot;251-05-++%@@(#M455).(%!)6$5,
M($].#2`@(&quot;`@(&quot;`@(&quot;`@4U1!(&quot;@D,#(I+%D@(&quot;`@.PT-(&quot;`@(&quot;`@(&quot;`@(&quot;!0
M3$$@(&quot;`@(&quot;`@(&quot;`@(&quot;`[4D535$]212`N00T@(&quot;`@(&quot;`@(&quot;`@(%)44PT[+2TM
M+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM#41205=,24Y%
M(&quot;`@4T5#(&quot;`@(&quot;`@(&quot;`@(&quot;`@.T=%5&quot;!$6`T@(&quot;`@(&quot;`@(&quot;`@($Q$02!8,2`@
M(&quot;`@(&quot;`@(#L-(&quot;`@(&quot;`@(&quot;`@(&quot;!30D,@6#(@(&quot;`@(&quot;`@(&quot;`[#2`@(&quot;`@(&quot;`@
M(&quot;`@4U1!($18(&quot;`@(&quot;`@(&quot;`@.PT-(&quot;`@(&quot;`@(&quot;`@(&quot;!314,@(&quot;`@(&quot;`@(&quot;`@
M(&quot;`[1T54($19#2`@(&quot;`@(&quot;`@(&quot;`@3$1!(%DQ(&quot;`@(&quot;`@(&quot;`@.PT@(&quot;`@(&quot;`@
M(&quot;`@(%-&quot;0R!9,B`@(&quot;`@(&quot;`@(#L-(&quot;`@(&quot;`@(&quot;`@(&quot;!35$$@1%D@(&quot;`@(&quot;`@
M(&quot;`[#0T@(&quot;`@(&quot;`@(&quot;`@($-,0R`@(&quot;`@(&quot;`@(&quot;`@(#L-(&quot;`@(&quot;`@(&quot;`@(&quot;!,
M1$$@1%@@(&quot;`@(&quot;`@(&quot;`[#2`@(&quot;`@(&quot;`@(&quot;`@0E!,($1205=,24Y%,B`@.TA!
M3D1,12`M1%@-(&quot;`@(&quot;`@(&quot;`@(&quot;!%3U(@(R4Q,3$Q,3$Q,2`[34%+12!$6`T@
M(&quot;`@(&quot;`@(&quot;`@($%$0R`C)3`P,#`P,#`Q(#L@4$]3251)5D4-(&quot;`@(&quot;`@(&quot;`@
M(&quot;!35$$@1%@@(&quot;`@(&quot;`@(&quot;`[#0T@(&quot;`@(&quot;`@(&quot;`@($Q$02!$62`@(&quot;`@(&quot;`@
M(#L-(&quot;`@(&quot;`@(&quot;`@(&quot;!&quot;4$P@1%)!5TQ)3D4Q(&quot;`[2$%.1$Q%(&quot;U$60T@(&quot;`@
M(&quot;`@(&quot;`@($5/4B`C)3$Q,3$Q,3$Q(#M-04M%($19#2`@(&quot;`@(&quot;`@(&quot;`@041#
M(&quot;,E,#`P,#`P,#$@.R!03U-)5$E610T@(&quot;`@(&quot;`@(&quot;`@(%-402!$62`@(&quot;`@
M(&quot;`@(#L-#2`@(&quot;`@(&quot;`@(&quot;`@3$1!($18#2`@(&quot;`@(&quot;`@(&quot;`@0TU0($19#2`@
M(&quot;`@(&quot;`@(&quot;`@0D-3($1,,#`-(&quot;`@(&quot;`@(&quot;`@(&quot;!*35`@1$PQ,`T-1%)!5TQ)
M3D4Q(&quot;!,1$$@1%@-(&quot;`@(&quot;`@(&quot;`@(&quot;!#35`@1%D-(&quot;`@(&quot;`@(&quot;`@(&quot;!&quot;0U,@
M1$PR,`T@(&quot;`@(&quot;`@(&quot;`@($I-4&quot;!$3#,P#0U$4D%73$E.13(@($Q$02!$60T@
M(&quot;`@(&quot;`@(&quot;`@($)03&quot;!$4D%73$E.13,-(&quot;`@(&quot;`@(&quot;`@(&quot;!%3U(@(R4Q,3$Q
M,3$Q,0T@(&quot;`@(&quot;`@(&quot;`@($%$0R`C)3`P,#`P,#`Q#2`@(&quot;`@(&quot;`@(&quot;`@4U1!
M($19#0T@(&quot;`@(&quot;`@(&quot;`@($Q$02!$6`T@(&quot;`@(&quot;`@(&quot;`@($--4&quot;!$60T@(&quot;`@
M(&quot;`@(&quot;`@($)#4R!$4D%73$E.130@(&quot;`[1$PT,`T@(&quot;`@(&quot;`@(&quot;`@($I-4&quot;!$
M3#4P#0U$4D%73$E.13,@($Q$02!$6`T@(&quot;`@(&quot;`@(&quot;`@($--4&quot;!$60T@(&quot;`@
M(&quot;`@(&quot;`@($)#4R!$4D%73$E.134@(&quot;`[1$PU,`T@(&quot;`@(&quot;`@(&quot;`@($I-4&quot;!$
M3#&lt;P#45,(&quot;`@(&quot;`@(&quot;`@4E13#0U$4D%73$E.130@($I-4&quot;!$3#0P#41205=,
M24Y%-2`@2DU0($1,-C`-.RTM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM
M+2TM+2TM+2TM+0U$3#`P(&quot;`@(&quot;`@($Q$02`C)#`P(&quot;`@(&quot;`@(&quot;`[,&quot;`M($18
M#2`@(&quot;`@(&quot;`@(&quot;`@4T)#($18(&quot;`@(&quot;`@(&quot;`@(#L-#2`@(&quot;`@(&quot;`@(&quot;`@3$18
M(%@Q(&quot;`@(&quot;`@(&quot;`@(#M03$]4($9)4E-4#2`@(&quot;`@(&quot;`@(&quot;`@3$19(%DQ(&quot;`@
M(&quot;`@(&quot;`@(#L@4$E814P-(&quot;`@(&quot;`@(&quot;`@(&quot;!*4U(@4$Q/5&quot;`@(&quot;`@(&quot;`@.PT-
M1$PP,$$@(&quot;`@(&quot;!#3$,@(&quot;`@(&quot;`@(&quot;`@(&quot;`@.U-415`@24X@6`T@(&quot;`@(&quot;`@
M(&quot;`@($E.6&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`[(%!/4TE4259%#2`@(&quot;`@(&quot;`@(&quot;`@041#
M($19(&quot;`@(&quot;`@(&quot;`@(#L@54Y424P@5$E-10T@(&quot;`@(&quot;`@(&quot;`@($)#0R!$3#`P
M0B`@(&quot;`@(&quot;`[(%1/(%1!2T4@00T@(&quot;`@(&quot;`@(&quot;`@($E.62`@(&quot;`@(&quot;`@(&quot;`@
M(&quot;`[(%!/4TE4259%#2`@(&quot;`@(&quot;`@(&quot;`@4T)#($18(&quot;`@(&quot;`@(&quot;`@(#L@4U1%
M4&quot;!)3B!9#41,,#!&quot;(&quot;`@(&quot;`@2E-2(%!,3U0@(&quot;`@(&quot;`@(#L-(&quot;`@(&quot;`@(&quot;`@
M(&quot;!#4%@@6#(@(&quot;`@(&quot;`@(&quot;`@.PT@(&quot;`@(&quot;`@(&quot;`@($).12!$3#`P02`@(&quot;`@
M(&quot;`[#0T@(&quot;`@(&quot;`@(&quot;`@(%)44PT@(&quot;`@(&quot;`@(&quot;`@(#LM+2TM+2TM+2TM+2TM
M+2TM+2TM+2TM+2TM+2TM#41,,3`@(&quot;`@(&quot;`@3$1!(&quot;,D,#`-(&quot;`@(&quot;`@(&quot;`@
M(&quot;!30D,@1%D-#2`@(&quot;`@(&quot;`@(&quot;`@3$18(%@Q#2`@(&quot;`@(&quot;`@(&quot;`@3$19(%DQ
M#2`@(&quot;`@(&quot;`@(&quot;`@2E-2(%!,3U0-#41,,3!!(&quot;`@(&quot;`@0TQ#(&quot;`@(&quot;`@(&quot;`@
M(&quot;`@(#M35$50(&quot;M9#2`@(&quot;`@(&quot;`@(&quot;`@24Y9(&quot;`@(&quot;`@(&quot;`@(&quot;`@(#L@54Y4
M24P@3D5%1`T@(&quot;`@(&quot;`@(&quot;`@($%$0R!$6&quot;`@(&quot;`@(&quot;`@(&quot;`[(%1/(&quot;M8#2`@
M(&quot;`@(&quot;`@(&quot;`@0D-#($1,,3!&quot;(&quot;`@(&quot;`@(#L-(&quot;`@(&quot;`@(&quot;`@(&quot;!)3E@@(&quot;`@
M(&quot;`@(&quot;`@(&quot;`@.PT@(&quot;`@(&quot;`@(&quot;`@(%-&quot;0R!$62`@(&quot;`@(&quot;`@(&quot;`[#41,,3!&quot;
M(&quot;`@(&quot;`@2E-2(%!,3U0@(&quot;`@(&quot;`@(#L-(&quot;`@(&quot;`@(&quot;`@(&quot;!#4%D@63(@(&quot;`@
M(&quot;`@(&quot;`@.PT@(&quot;`@(&quot;`@(&quot;`@($).12!$3#$P02`@(&quot;`@(&quot;`[#0T@(&quot;`@(&quot;`@
M(&quot;`@(%)44PT@(&quot;`@(&quot;`@(&quot;`@(#LM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM
M+2TM#41,,C`@(&quot;`@(&quot;`@3$1!(&quot;,D,#`-(&quot;`@(&quot;`@(&quot;`@(&quot;!30D,@1%@-#2`@
M(&quot;`@(&quot;`@(&quot;`@3$18(%@Q#2`@(&quot;`@(&quot;`@(&quot;`@3$19(%DQ#2`@(&quot;`@(&quot;`@(&quot;`@
M2E-2(%!,3U0-#41,,C!!(&quot;`@(&quot;`@0TQ#(&quot;`@(&quot;`@(&quot;`@(&quot;`@(#M35$50(&quot;M8
M#2`@(&quot;`@(&quot;`@(&quot;`@24Y8(&quot;`@(&quot;`@(&quot;`@(&quot;`@(#L@54Y424P@3D5%1`T@(&quot;`@
M(&quot;`@(&quot;`@($%$0R!$62`@(&quot;`@(&quot;`@(&quot;`[(%1/(&quot;U9#2`@(&quot;`@(&quot;`@(&quot;`@0D-#
M($1,,C!&quot;(&quot;`@(&quot;`@(#L-(&quot;`@(&quot;`@(&quot;`@(&quot;!$15D@(&quot;`@(&quot;`@(&quot;`@(&quot;`@.PT@
M(&quot;`@(&quot;`@(&quot;`@(%-&quot;0R!$6&quot;`@(&quot;`@(&quot;`@(&quot;`[#41,,C!&quot;(&quot;`@(&quot;`@2E-2(%!,
M3U0@(&quot;`@(&quot;`@(#L-(&quot;`@(&quot;`@(&quot;`@(&quot;!#4%@@6#(@(&quot;`@(&quot;`@(&quot;`@.PT@(&quot;`@
M(&quot;`@(&quot;`@($).12!$3#(P02`@(&quot;`@(&quot;`[#0T@(&quot;`@(&quot;`@(&quot;`@(%)44PT@(&quot;`@
M(&quot;`@(&quot;`@(#LM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM#41,,S`@(&quot;`@
M(&quot;`@3$1!(&quot;,D,#`-(&quot;`@(&quot;`@(&quot;`@(&quot;!30D,@1%D-#2`@(&quot;`@(&quot;`@(&quot;`@3$18
M(%@Q#2`@(&quot;`@(&quot;`@(&quot;`@3$19(%DQ#2`@(&quot;`@(&quot;`@(&quot;`@2E-2(%!,3U0-#41,
M,S!!(&quot;`@(&quot;`@0TQ#(&quot;`@(&quot;`@(&quot;`@(&quot;`@(#M35$50(&quot;U9#2`@(&quot;`@(&quot;`@(&quot;`@
M1$59(&quot;`@(&quot;`@(&quot;`@(&quot;`@(#L@54Y424P@3D5%1`T@(&quot;`@(&quot;`@(&quot;`@($%$0R!$
M6&quot;`@(&quot;`@(&quot;`@(&quot;`[(%1/(&quot;M8#2`@(&quot;`@(&quot;`@(&quot;`@0D-#($1,,S!&quot;(&quot;`@(&quot;`@
M(#L-(&quot;`@(&quot;`@(&quot;`@(&quot;!)3E@@(&quot;`@(&quot;`@(&quot;`@(&quot;`@.PT@(&quot;`@(&quot;`@(&quot;`@(%-&quot;
M0R!$62`@(&quot;`@(&quot;`@(&quot;`[#41,,S!&quot;(&quot;`@(&quot;`@2E-2(%!,3U0@(&quot;`@(&quot;`@(#L-
M(&quot;`@(&quot;`@(&quot;`@(&quot;!#4%D@63(@(&quot;`@(&quot;`@(&quot;`@.PT@(&quot;`@(&quot;`@(&quot;`@($).12!$
M3#,P02`@(&quot;`@(&quot;`[#0T@(&quot;`@(&quot;`@(&quot;`@(%)44PT@(&quot;`@(&quot;`@(&quot;`@(#LM+2TM
M+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM#41,-#`@(&quot;`@(&quot;`@3$1!(&quot;,D,#`-
M(&quot;`@(&quot;`@(&quot;`@(&quot;!30D,@1%@-#2`@(&quot;`@(&quot;`@(&quot;`@3$18(%@Q#2`@(&quot;`@(&quot;`@
M(&quot;`@3$19(%DQ#2`@(&quot;`@(&quot;`@(&quot;`@2E-2(%!,3U0-#41,-#!!(&quot;`@(&quot;`@0TQ#
M(&quot;`@(&quot;`@(&quot;`@(&quot;`@(#M35$50(&quot;U8#2`@(&quot;`@(&quot;`@(&quot;`@1$58(&quot;`@(&quot;`@(&quot;`@
M(&quot;`@(#L@54Y424P@3D5%1`T@(&quot;`@(&quot;`@(&quot;`@($%$0R!$62`@(&quot;`@(&quot;`@(&quot;`[
M(%1/(&quot;M9#2`@(&quot;`@(&quot;`@(&quot;`@0D-#($1,-#!&quot;(&quot;`@(&quot;`@(#L-(&quot;`@(&quot;`@(&quot;`@
M(&quot;!)3ED@(&quot;`@(&quot;`@(&quot;`@(&quot;`@.PT@(&quot;`@(&quot;`@(&quot;`@(%-&quot;0R!$6&quot;`@(&quot;`@(&quot;`@
M(&quot;`[#41,-#!&quot;(&quot;`@(&quot;`@2E-2(%!,3U0@(&quot;`@(&quot;`@(#L-(&quot;`@(&quot;`@(&quot;`@(&quot;!#
M4%@@6#(@(&quot;`@(&quot;`@(&quot;`@.PT@(&quot;`@(&quot;`@(&quot;`@($).12!$3#0P02`@(&quot;`@(&quot;`[
M#0T@(&quot;`@(&quot;`@(&quot;`@(%)44PT@(&quot;`@(&quot;`@(&quot;`@(#LM+2TM+2TM+2TM+2TM+2TM
M+2TM+2TM+2TM+2TM#41,-3`@(&quot;`@(&quot;`@3$1!(&quot;,D,#`-(&quot;`@(&quot;`@(&quot;`@(&quot;!3
M0D,@1%D-#2`@(&quot;`@(&quot;`@(&quot;`@3$18(%@Q#2`@(&quot;`@(&quot;`@(&quot;`@3$19(%DQ#2`@
M(&quot;`@(&quot;`@(&quot;`@2E-2(%!,3U0-#41,-3!!(&quot;`@(&quot;`@0TQ#(&quot;`@(&quot;`@(&quot;`@(&quot;`@
M(#M35$50(&quot;M9#2`@(&quot;`@(&quot;`@(&quot;`@24Y9(&quot;`@(&quot;`@(&quot;`@(&quot;`@(#L@54Y424P@
M3D5%1`T@(&quot;`@(&quot;`@(&quot;`@($%$0R!$6&quot;`@(&quot;`@(&quot;`@(&quot;`[(%1/(&quot;U8#2`@(&quot;`@
M(&quot;`@(&quot;`@0D-#($1,-3!&quot;(&quot;`@(&quot;`@(#L-(&quot;`@(&quot;`@(&quot;`@(&quot;!$15@@(&quot;`@(&quot;`@
M(&quot;`@(&quot;`@.PT@(&quot;`@(&quot;`@(&quot;`@(%-&quot;0R!$62`@(&quot;`@(&quot;`@(&quot;`[#41,-3!&quot;(&quot;`@
M(&quot;`@2E-2(%!,3U0@(&quot;`@(&quot;`@(#L-(&quot;`@(&quot;`@(&quot;`@(&quot;!#4%D@63(@(&quot;`@(&quot;`@
M(&quot;`@.PT@(&quot;`@(&quot;`@(&quot;`@($).12!$3#4P02`@(&quot;`@(&quot;`[#0T@(&quot;`@(&quot;`@(&quot;`@
M(%)44PT@(&quot;`@(&quot;`@(&quot;`@(#LM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM
M#41,-C`@(&quot;`@(&quot;`@3$1!(&quot;,D,#`-(&quot;`@(&quot;`@(&quot;`@(&quot;!30D,@1%@-#2`@(&quot;`@
M(&quot;`@(&quot;`@3$18(%@Q#2`@(&quot;`@(&quot;`@(&quot;`@3$19(%DQ#2`@(&quot;`@(&quot;`@(&quot;`@2E-2
M(%!,3U0-#41,-C!!(&quot;`@(&quot;`@0TQ#(&quot;`@(&quot;`@(&quot;`@(&quot;`@(#M35$50(&quot;U8#2`@
M(&quot;`@(&quot;`@(&quot;`@1$58(&quot;`@(&quot;`@(&quot;`@(&quot;`@(#L@54Y424P@3D5%1`T@(&quot;`@(&quot;`@
M(&quot;`@($%$0R!$62`@(&quot;`@(&quot;`@(&quot;`[(%1/(&quot;U9#2`@(&quot;`@(&quot;`@(&quot;`@0D-#($1,
M-C!&quot;(&quot;`@(&quot;`@(#L-(&quot;`@(&quot;`@(&quot;`@(&quot;!$15D@(&quot;`@(&quot;`@(&quot;`@(&quot;`@.PT@(&quot;`@
M(&quot;`@(&quot;`@(%-&quot;0R!$6&quot;`@(&quot;`@(&quot;`@(&quot;`[#41,-C!&quot;(&quot;`@(&quot;`@2E-2(%!,3U0@
M(&quot;`@(&quot;`@(#L-(&quot;`@(&quot;`@(&quot;`@(&quot;!#4%@@6#(@(&quot;`@(&quot;`@(&quot;`@.PT@(&quot;`@(&quot;`@
M(&quot;`@($).12!$3#8P02`@(&quot;`@(&quot;`[#0T@(&quot;`@(&quot;`@(&quot;`@(%)44PT@(&quot;`@(&quot;`@
M(&quot;`@(#LM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM#41,-S`@(&quot;`@(&quot;`@
M3$1!(&quot;,D,#`-(&quot;`@(&quot;`@(&quot;`@(&quot;!30D,@1%D-#2`@(&quot;`@(&quot;`@(&quot;`@3$18(%@Q
M#2`@(&quot;`@(&quot;`@(&quot;`@3$19(%DQ#2`@(&quot;`@(&quot;`@(&quot;`@2E-2(%!,3U0-#41,-S!!
M(&quot;`@(&quot;`@0TQ#(&quot;`@(&quot;`@(&quot;`@(&quot;`@(#M35$50(&quot;U9#2`@(&quot;`@(&quot;`@(&quot;`@1$59
M(&quot;`@(&quot;`@(&quot;`@(&quot;`@(#L@54Y424P@3D5%1`T@(&quot;`@(&quot;`@(&quot;`@($%$0R!$6&quot;`@
M(&quot;`@(&quot;`@(&quot;`[(%1/(&quot;U8#2`@(&quot;`@(&quot;`@(&quot;`@0D-#($1,-S!&quot;(&quot;`@(&quot;`@(#L-
M(&quot;`@(&quot;`@(&quot;`@(&quot;!$15@@(&quot;`@(&quot;`@(&quot;`@(&quot;`@.PT@(&quot;`@(&quot;`@(&quot;`@(%-&quot;0R!$
M62`@(&quot;`@(&quot;`@(&quot;`[#41,-S!&quot;(&quot;`@(&quot;`@2E-2(%!,3U0@(&quot;`@(&quot;`@(#L-(&quot;`@
M(&quot;`@(&quot;`@(&quot;!#4%D@63(@(&quot;`@(&quot;`@(&quot;`@.PT@(&quot;`@(&quot;`@(&quot;`@($).12!$3#&lt;P
M02`@(&quot;`@(&quot;`[#0T@(&quot;`@(&quot;`@(&quot;`@(%)44PT[+2TM+2TM+2TM+2TM+2TM+2TM
M+2TM+2TM+2TM+2TM+2TM+2TM+2TM#5@Q(&quot;`@(&quot;`@(&quot;`@+D)95$4@)#`P#5DQ
M(&quot;`@(&quot;`@(&quot;`@+D)95$4@)#`P#5@R(&quot;`@(&quot;`@(&quot;`@+D)95$4@)#`P#5DR(&quot;`@
M(&quot;`@(&quot;`@+D)95$4@)#`P#418(&quot;`@(&quot;`@(&quot;`@+D)95$4@)#`P#419(&quot;`@(&quot;`@
M(&quot;`@+D)95$4@)#`P#3LM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM
M+2TM+2TM+2T-1$5-3TE.250@(&quot;!,1$$@(R0P-B`@(&quot;`@(&quot;`@.T1!4DL@0DQ5
M10T@(&quot;`@(&quot;`@(&quot;`@(%-402`D1#`R,&quot;`@(&quot;`@(&quot;`[($)!0TM'4D]53D0-(&quot;`@
M(&quot;`@(&quot;`@(&quot;!35$$@)$0P,C$@(&quot;`@(&quot;`@.R!!3D0@0D]21$52#0T@(&quot;`@(&quot;`@
M(&quot;`@($Q$02`C,30W(&quot;`@(&quot;`@(&quot;`[0TQ%05(@4T-2145.#2`@(&quot;`@(&quot;`@(&quot;`@
M2E-2(&quot;1&amp;1D0R(&quot;`@(&quot;`@(#L-#2`@(&quot;`@(&quot;`@(&quot;`@3$1!(&quot;,D-T8@(&quot;`@(&quot;`@
M(#M$25-!0DQ%($-)00T@(&quot;`@(&quot;`@(&quot;`@(%-402`D1$,P1&quot;`@(&quot;`@(&quot;`[(%1)
M344@25)14PT-(&quot;`@(&quot;`@(&quot;`@(&quot;!*4U(@0DQ!3DLP(&quot;`@(&quot;`@.T-,14%2($)/
M5$@-(&quot;`@(&quot;`@(&quot;`@(&quot;!*4U(@0DQ!3DLQ(&quot;`@(&quot;`@.R!&quot;549&amp;15)3#0T@(&quot;`@
M(&quot;`@(&quot;`@($Q$02`C)#`P#2`@(&quot;`@(&quot;`@(&quot;`@4U1!($-(05(-#2`@(&quot;`@(&quot;`@
M(&quot;`@3$19(&quot;,D,#`@(&quot;`@(&quot;`@(#M$25)462!705D@5$\-1$5-3TE.250T(&quot;!,
M1$$@(SQ30U),3T,@(&quot;`@.R!$4D%7($$-(&quot;`@(&quot;`@(&quot;`@(&quot;!35$$@)$9!(&quot;`@
M(&quot;`@(&quot;`@.R!#2$%204-415(-(&quot;`@(&quot;`@(&quot;`@(&quot;!,1$$@(SY30U),3T,@(&quot;`@
M.R!-051225@@3TX-(&quot;`@(&quot;`@(&quot;`@(&quot;!35$$@)$9&quot;(&quot;`@(&quot;`@(&quot;`@.R!42$4@
M4T-2145.#2`@(&quot;`@(&quot;`@(&quot;`@3$18(&quot;,D,#`@(&quot;`@(&quot;`@(#L-1$5-3TE.250U
M(&quot;!,1$$@0TA!4B`@(&quot;`@(&quot;`@.R!42$4@5$]0#2`@(&quot;`@(&quot;`@(&quot;`@4U1!(&quot;@D
M1D$I+%D@(&quot;`@(#L@3$5&amp;5&quot;!#3U).15(-(&quot;`@(&quot;`@(&quot;`@(&quot;!)3D,@0TA!4B`@
M(&quot;`@(&quot;`@.R!)4R!42$4-(&quot;`@(&quot;`@(&quot;`@(&quot;!,1$$@)$9!(&quot;`@(&quot;`@(&quot;`@.R!6
M04Q512!)3@T@(&quot;`@(&quot;`@(&quot;`@($-,0R`@(&quot;`@(&quot;`@(&quot;`@(&quot;`[(%-#4DQ/0PT@
M(&quot;`@(&quot;`@(&quot;`@($%$0R`C-#`@(&quot;`@(&quot;`@(&quot;`[#2`@(&quot;`@(&quot;`@(&quot;`@4U1!(&quot;1&amp;
M02`@(&quot;`@(&quot;`@(#L-(&quot;`@(&quot;`@(&quot;`@(&quot;!&quot;0T,@1$5-3TE.250V(&quot;`@.PT@(&quot;`@
M(&quot;`@(&quot;`@($E.0R`D1D(@(&quot;`@(&quot;`@(&quot;`[#41%34])3DE4-B`@24Y8(&quot;`@(&quot;`@
M(&quot;`@(&quot;`@(#L-(&quot;`@(&quot;`@(&quot;`@(&quot;!#4%@@(S$V(&quot;`@(&quot;`@(&quot;`@.PT@(&quot;`@(&quot;`@
M(&quot;`@($).12!$14U/24Y)5#4@(&quot;`[#2`@(&quot;`@(&quot;`@(&quot;`@24Y9(&quot;`@(&quot;`@(&quot;`@
M(&quot;`@(#L-(&quot;`@(&quot;`@(&quot;`@(&quot;!#4%D@(S$V(&quot;`@(&quot;`@(&quot;`@.PT@(&quot;`@(&quot;`@(&quot;`@
M($).12!$14U/24Y)5#0@(&quot;`[#0T@(&quot;`@(&quot;`@(&quot;`@($Q$62`C)#`P(&quot;`@(&quot;`@
M(&quot;`[1DE,3&quot;!#3TQ/4@T@(&quot;`@(&quot;`@(&quot;`@($Q$02`C)#`Q(&quot;`@(&quot;`@(&quot;`[($U%
M34]262!7251(#41%34])3DE4,3`@4U1!(&quot;1$.#`P+%D@(&quot;`@(#L@5TA)5$4-
M(&quot;`@(&quot;`@(&quot;`@(&quot;!35$$@)$0Y,#`L62`@(&quot;`@.PT@(&quot;`@(&quot;`@(&quot;`@(%-402`D
M1$$P,&quot;Q9(&quot;`@(&quot;`[#2`@(&quot;`@(&quot;`@(&quot;`@4U1!(&quot;1$0C`P+%D@(&quot;`@(#L-(&quot;`@
M(&quot;`@(&quot;`@(&quot;!)3ED@(&quot;`@(&quot;`@(&quot;`@(&quot;`@.PT@(&quot;`@(&quot;`@(&quot;`@($).12!$14U/
M24Y)5#$P(&quot;`[#0T@(&quot;`@(&quot;`@(&quot;`@($Q$02`D1#`Q.&quot;`@(&quot;`@(&quot;`[4$])3E0@
MULG#(%1/#2`@(&quot;`@(&quot;`@(&quot;`@04Y$(&quot;,E,3$Q,3`P,#`@(#L@1DE24U0-(&quot;`@
M(&quot;`@(&quot;`@(&quot;!/4D$@(R4P,#`P,3`P,&quot;`@.R!&quot;549&amp;15(-(&quot;`@(&quot;`@(&quot;`@(&quot;!3
M5$$@)$0P,3@@(&quot;`@(&quot;`@.PT-(&quot;`@(&quot;`@(&quot;`@(&quot;!*4U(@24Y)5$]&quot;2C`P(&quot;`@
M.S%35&quot;!32$%010T-(&quot;`@(&quot;`@(&quot;`@(&quot;!,1$$@(R0P,&quot;`@(&quot;`@(&quot;`@.TE.250-
M(&quot;`@(&quot;`@(&quot;`@(&quot;!35$$@04Y'3$5)3D,@(&quot;`@.R!605))04),15,-(&quot;`@(&quot;`@
M(&quot;`@(&quot;!35$$@0U524TA!4$4@(&quot;`@.PT-(&quot;`@(&quot;`@(&quot;`@(&quot;!25%,-#4-(05(@
M(&quot;`@(&quot;`@+D)95$4@)#`P#3LM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM
M+2TM+2TM+2TM+2T-0DQ!3DLP(&quot;`@(&quot;!,1%D@(R0P,`T@(&quot;`@(&quot;`@(&quot;`@($Q$
M02`C)#`P#4),04Y+,$$@(&quot;`@4U1!(&quot;0R,#`P+%D-(&quot;`@(&quot;`@(&quot;`@(&quot;!35$$@
M)#(P.#`L60T@(&quot;`@(&quot;`@(&quot;`@(%-402`D,C$P,&quot;Q9#2`@(&quot;`@(&quot;`@(&quot;`@4U1!
M(&quot;0R,3@P+%D-(&quot;`@(&quot;`@(&quot;`@(&quot;!35$$@)#(R,#`L60T@(&quot;`@(&quot;`@(&quot;`@(%-4
M02`D,C(X,&quot;Q9#2`@(&quot;`@(&quot;`@(&quot;`@4U1!(&quot;0R,S`P+%D-(&quot;`@(&quot;`@(&quot;`@(&quot;!3
M5$$@)#(S.#`L60T@(&quot;`@(&quot;`@(&quot;`@(%-402`D,C0P,&quot;Q9#2`@(&quot;`@(&quot;`@(&quot;`@
M4U1!(&quot;0R-#@P+%D-(&quot;`@(&quot;`@(&quot;`@(&quot;!35$$@)#(U,#`L60T@(&quot;`@(&quot;`@(&quot;`@
M(%-402`D,C4X,&quot;Q9#2`@(&quot;`@(&quot;`@(&quot;`@4U1!(&quot;0R-C`P+%D-(&quot;`@(&quot;`@(&quot;`@
M(&quot;!35$$@)#(V.#`L60T@(&quot;`@(&quot;`@(&quot;`@(%-402`D,C&lt;P,&quot;Q9#2`@(&quot;`@(&quot;`@
M(&quot;`@4U1!(&quot;0R-S@P+%D-(&quot;`@(&quot;`@(&quot;`@(&quot;!)3ED-(&quot;`@(&quot;`@(&quot;`@(&quot;!&quot;4$P@
M0DQ!3DLP00T@(&quot;`@(&quot;`@(&quot;`@(%)44PT[+2TM+2TM+2TM+2TM+2TM+2TM+2TM
M+2TM+2TM+2TM+2TM+2TM+2TM#4),04Y+,2`@(&quot;`@3$19(&quot;,D,#`-(&quot;`@(&quot;`@
M(&quot;`@(&quot;!,1$$@(R0P,`U&quot;3$%.2S%!(&quot;`@(%-402`D,C@P,&quot;Q9#2`@(&quot;`@(&quot;`@
M(&quot;`@4U1!(&quot;0R.#@P+%D-(&quot;`@(&quot;`@(&quot;`@(&quot;!35$$@)#(Y,#`L60T@(&quot;`@(&quot;`@
M(&quot;`@(%-402`D,CDX,&quot;Q9#2`@(&quot;`@(&quot;`@(&quot;`@4U1!(&quot;0R03`P+%D-(&quot;`@(&quot;`@
M(&quot;`@(&quot;!35$$@)#)!.#`L60T@(&quot;`@(&quot;`@(&quot;`@(%-402`D,D(P,&quot;Q9#2`@(&quot;`@
M(&quot;`@(&quot;`@4U1!(&quot;0R0C@P+%D-(&quot;`@(&quot;`@(&quot;`@(&quot;!35$$@)#)#,#`L60T@(&quot;`@
M(&quot;`@(&quot;`@(%-402`D,D,X,&quot;Q9#2`@(&quot;`@(&quot;`@(&quot;`@4U1!(&quot;0R1#`P+%D-(&quot;`@
M(&quot;`@(&quot;`@(&quot;!35$$@)#)$.#`L60T@(&quot;`@(&quot;`@(&quot;`@(%-402`D,D4P,&quot;Q9#2`@
M(&quot;`@(&quot;`@(&quot;`@4U1!(&quot;0R13@P+%D-(&quot;`@(&quot;`@(&quot;`@(&quot;!35$$@)#)&amp;,#`L60T@
M(&quot;`@(&quot;`@(&quot;`@(%-402`D,D8X,&quot;Q9#2`@(&quot;`@(&quot;`@(&quot;`@24Y9#2`@(&quot;`@(&quot;`@
M(&quot;`@0E!,($),04Y+,4$-(&quot;`@(&quot;`@(&quot;`@(&quot;!25%,-.RTM+2TM+2TM+2TM+2TM
M+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+0U)3DE43T)*,#`@($Q$02`C)#`T
M#2`@(&quot;`@(&quot;`@(&quot;`@4U1!(%!/24Y44PT-(&quot;`@(&quot;`@(&quot;`@(&quot;!,1%D@(R0P,`U)
M3DE43T)*,#$@($Q$02!42$5403`P+%D-(&quot;`@(&quot;`@(&quot;`@(&quot;!35$$@251(151!
M+%D-(&quot;`@(&quot;`@(&quot;`@(&quot;!35$$@5$A%5$$L60T@(&quot;`@(&quot;`@(&quot;`@($Q$02!2041)
M53`P+%D-(&quot;`@(&quot;`@(&quot;`@(&quot;!35$$@25)!1$E5+%D-(&quot;`@(&quot;`@(&quot;`@(&quot;!35$$@
M4D%$254L60T@(&quot;`@(&quot;`@(&quot;`@($E.60T@(&quot;`@(&quot;`@(&quot;`@($-062!03TE.5%,-
M(&quot;`@(&quot;`@(&quot;`@(&quot;!&quot;3D4@24Y)5$]&quot;2C`Q#2`@(&quot;`@(&quot;`@(&quot;`@4E13#3LM+2TM
M+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2T-24Y)5$]&quot;2C$P
M(&quot;!,1$$@(R0P-0T@(&quot;`@(&quot;`@(&quot;`@(%-402!03TE.5%,-#2`@(&quot;`@(&quot;`@(&quot;`@
M3$19(&quot;,D,#`-24Y)5$]&quot;2C$Q(&quot;!,1$$@5$A%5$$Q,&quot;Q9#2`@(&quot;`@(&quot;`@(&quot;`@
M4U1!($E42$5402Q9#2`@(&quot;`@(&quot;`@(&quot;`@4U1!(%1(151!+%D-(&quot;`@(&quot;`@(&quot;`@
M(&quot;!,1$$@4D%$254Q,&quot;Q9#2`@(&quot;`@(&quot;`@(&quot;`@4U1!($E2041)52Q9#2`@(&quot;`@
M(&quot;`@(&quot;`@4U1!(%)!1$E5+%D-(&quot;`@(&quot;`@(&quot;`@(&quot;!)3ED-(&quot;`@(&quot;`@(&quot;`@(&quot;!#
M4%D@4$])3E13#2`@(&quot;`@(&quot;`@(&quot;`@0DY%($E.251/0DHQ,0T@(&quot;`@(&quot;`@(&quot;`@
M(%)44PT[+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM
M#4E.251/0DHR,&quot;`@3$1!(&quot;,D,#D-(&quot;`@(&quot;`@(&quot;`@(&quot;!35$$@4$])3E13#0T@
M(&quot;`@(&quot;`@(&quot;`@($Q$62`C)#`P#4E.251/0DHR,2`@3$1!(%1(151!,C`L60T@
M(&quot;`@(&quot;`@(&quot;`@(%-402!)5$A%5$$L60T@(&quot;`@(&quot;`@(&quot;`@(%-402!42$5402Q9
M#2`@(&quot;`@(&quot;`@(&quot;`@3$1!(%)!1$E5,C`L60T@(&quot;`@(&quot;`@(&quot;`@(%-402!)4D%$
M254L60T@(&quot;`@(&quot;`@(&quot;`@(%-402!2041)52Q9#2`@(&quot;`@(&quot;`@(&quot;`@24Y9#2`@
M(&quot;`@(&quot;`@(&quot;`@0U!9(%!/24Y44PT@(&quot;`@(&quot;`@(&quot;`@($).12!)3DE43T)*,C$-
M(&quot;`@(&quot;`@(&quot;`@(&quot;!25%,-.RTM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM+2TM
M+2TM+2TM+2TM+0U42$5403`P(&quot;`@(&quot;Y&quot;651%(#`L.#8L,3&lt;R+#`-4D%$254P
M,&quot;`@(&quot;`N0EE412`T,&quot;PT,&quot;PT,&quot;PT,`T-5$A%5$$Q,&quot;`@(&quot;`N0EE412`P+#8T
M+#$Y,BPQ,C@L,`U2041)53$P(&quot;`@(&quot;Y&quot;651%(#0P+#0P+#0P+#0P+#0P#0U4
M2$5403(P(&quot;`@(&quot;Y&quot;651%(#`L.38L,3DR+#,R+#$R.`T@(&quot;`@(&quot;`@(&quot;`@(&quot;Y&quot;
M651%(#(R-&quot;PV-&quot;PQ-C`L,`U2041)53(P(&quot;`@(&quot;Y&quot;651%(#0P+#0P+#0P+#0P
C+#0P#2`@(&quot;`@(&quot;`@(&quot;`@+D)95$4@-#`L-#`L-#`L-#`-#1HP
`
end

begin 644 disc-demo.obj
M(`@@A`NI_HT`W*T!W,GO\&quot;G)W_`HR;_P)\GW\&quot;;)_?`EJ7^-`-RM`=S)[_`&lt;
MR7_P&amp;R#F&quot;&quot;#Y&quot;$PC&quot;$QM&quot;$QS&quot;$QY&quot;$R3&quot;$RM&quot;$S6&quot;$S&gt;&quot;.X]`TQ/&quot;,X]`TQ/
M&quot;*``N5`#&amp;&amp;D!R3^0`JD_F5`#R,P\`]#K3$\(H`&quot;Y4`,XZ0')`K`&quot;J0*94`/(
MS#P#T.M,3PCN/@.M/@/)`]`%J0&quot;-/@/)`M`&amp;(*0,3$\(R0'0!B&quot;$#$Q/&quot;&quot;!D
M#$Q/&quot;*D`C3T#3$\(J8&amp;-#=Q,9OZ@`+E``QAM/0.90`/(S#P#T/!@H`&quot;Y0`.-
MS@FY4`.-S0D@=`FMSPD8:4&quot;-?@NMT`D8:4&quot;-?PN@`;E``XW.&quot;;E0`XW-&quot;2!T
M&quot;:W/&quot;1AI0(V`&quot;ZW0&quot;1AI0(V!&quot;XQS&quot;2`&quot;&quot;JQS&quot;:V`&quot;XU^&quot;ZV!&quot;XU_&quot;\C,/`/0
MQ*T8T$D&quot;C1C0K1C0*0+P!B#T&quot;TQR&quot;2`L#&amp;``C-$)C=()K,X)N0`Q..W-&quot;:BY
M`#*-TPFLS@FY`#$8;&lt;T)J+D`,CCMTPF-SPFLS@FY`#`X[&lt;T)J+D`,HW3&quot;:S.
M&quot;;D`,!AMS0FHN0`R..W3&quot;8W0&quot;:S1&quot;:W2&quot;6``````````2*T8T&quot;D&quot;T!.]`#.%
M`KT`-(4#L0(=@#21`FA@O0`SA0*]@#.%`[$&quot;'8`TD0)H8#BM?@OM@`N-@@LX
MK7\+[8$+C8,+&amp;*V&quot;&quot;Q`I2?]I`8V&quot;&quot;ZV#&quot;Q`22?]I`8V#&quot;ZV&quot;&quot;\V#&quot;[`W3)`*
MK8(+S8,+L'!,U`JM@PL0$DG_:0&amp;-@PNM@@O-@PNP#TP8&quot;ZV&quot;&quot;\V#&quot;[`'3%P+
M8$SV&quot;DPZ&quot;ZD`[8(+KGX+K'\+(-0)&amp;.AM@PN0!,CM@@L@U`GL@`O0[6&quot;I`.V#
M&quot;ZY^&quot;ZQ_&quot;R#4&quot;1C(;8(+D`3H[8,+(-0)S($+T.U@J0#M@@NN?@NL?PL@U`D8
MZ&amp;V#&quot;Y`$B.V&quot;&quot;R#4&quot;&gt;R`&quot;]#M8*D`[8,+KGX+K'\+(-0)&amp;(AM@@N0!.CM@PL@
MU`G,@0O0[6&quot;I`.V&quot;&quot;ZY^&quot;ZQ_&quot;R#4&quot;1C*;8,+D`3([8(+(-0)[(`+T.U@J0#M
M@PNN?@NL?PL@U`D8R&amp;V&quot;&quot;Y`$RNV#&quot;R#4&quot;&lt;R!&quot;]#M8*D`[8(+KGX+K'\+(-0)
M&amp;,IM@PN0!(CM@@L@U`GL@`O0[6&quot;I`.V#&quot;ZY^&quot;ZQ_&quot;R#4&quot;1B(;8(+D`3*[8,+
M(-0)S($+T.U@````````J0:-(-&quot;-(=&quot;IDR#2_ZE_C0W&lt;(/0+(&quot;P,J0&quot;-\PN@
M`*FLA?JI!(7[H@&quot;M\PN1^N[S&quot;Z7Z&amp;&amp;DHA?J0`N;[Z.`0T.C(P!#0V:``J0&amp;9
M`-B9`-F9`-J9`-O(T/&amp;M&amp;-`I\`D(C1C0(&amp;0,J0&quot;-/0.-/@-@`*``J0&quot;9`&quot;&quot;9
M@&quot;&quot;9`&quot;&amp;9@&quot;&amp;9`&quot;*9@&quot;*9`&quot;.9@&quot;.9`&quot;29@&quot;29`&quot;69@&quot;69`&quot;:9@&quot;:9`&quot;&gt;9@&quot;?(
M$,U@H`&quot;I`)D`*)F`*)D`*9F`*9D`*IF`*ID`*YF`*YD`+)F`+)D`+9F`+9D`
M+IF`+ID`+YF`+\@0S6&quot;I!(T\`Z``N&lt;0,F6`#F4`#N&lt;@,F7`#F5`#R,P\`]#H
M8*D%C3P#H`&quot;YS`R98`.90`.YT0R9&lt;`.94`/(S#P#T.A@J0F-/`.@`+G6#)E@
M`YE``[G?#)EP`YE0`\C,/`/0Z&amp;``5JP`*&quot;@H*`!`P(``*&quot;@H*&quot;@`8,`@@.!`
MH``H*&quot;@H*&quot;@H*&quot;@:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:
4&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:
`
end

begin 644 m.sin_cos_sqr
M`0@H&quot;`$`CR`M*RT@(&quot;!-04M%(%-)3B]#3U,O4U%2(#(N,&quot;`@(&quot;TK+0!/&quot;`(`
MCR`M*RT@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;TK+0!V&quot;`,`CR`M*RT@
M($)9.B!7059%1D]232`@(&quot;`@(&quot;`@(&quot;`@(&quot;TK+0&quot;=&quot;`0`CR`M*RT@1D]2.B!$
M25-#/4]615)9($U!1T%:24Y%(&quot;TK+0#$&quot;`4`CR`M*RT@($]..B`P.2TQ-&quot;TY
M-B`@(&quot;`@(&quot;`@(&quot;`@(&quot;TK+0#J&quot;`H`CR`Z.CH@34%+12!324X@04Y$($-/4R!4
M04),15,@.CHZ`!$)#`!&quot;0;(Q,C(X.#I&quot;2+*U*$)!K3(U-BDZ0DRR0D&amp;K0DBL
M,C4V`!\)#@&quot;!0EFR,*0R-34`/0D0`$1%LD)9K#$N-#`W.E)!LD1%K&quot;C_K3$X
M,&quot;D`5`D2`%.RM2@HORA202FL-C0IJBXU*0!J&quot;10`BU.S,*=3LC(U-:NV*%,I
MJC$`@0D6`$.RM2@HOBA202FL-C0IJBXU*0&quot;7&quot;1@`BT.S,*=#LC(U-:NV*$,I
MJC$`N0D:`)&lt;@0D$@JB!&quot;62Q3.I&lt;@0D$@JB`R-38@JB!&quot;62Q#`+\)'`&quot;&quot;`-P)
M,@&quot;/(#HZ.B!-04M%(%-14B!404),12`Z.CH`Z@DT`(%&quot;6;(PI#$R-P``&quot;C8`
M4U&amp;R*$)9K$)9*:TH-*PV-&quot;D`&amp;`HX`)&lt;@0D$@JB`U,3(@JD)9+%-1.H(`)@H\
M`(%&quot;6;(PI#$R-P`\&quot;CX`4U&amp;R*$)9K$)9*:TH-*PV-&quot;D`6`I``)&lt;@0D$@JB`U
M,3(@JC(U-:M&quot;62Q343J&quot;`',*9`&quot;/(#HZ.B!3059%(%1/($1)4TL@.CHZ`),*
M9@&quot;?,2PX+#$U+&quot;)3,#I324XO0T]3+U-14B(ZH#$`L`IH`)\R+#@L,BPB4TE.
M+T-/4R]345(L4&quot;Q7(@##&quot;FH`F#(LQRA&quot;3&quot;G'*$)(*3L`T`IL`(%4LC&quot;D-S8W
M`.,*;@&quot;8,BS'*,(H0D&amp;J5&quot;DI.P#I&quot;G``@@#P&quot;G(`H#(````:&amp;AH:&amp;AH:&amp;AH:
#&amp;AH:
`
end

begin 644 m.base_mask
M`0@H&quot;`$`CR`M*RT@34%+12!&quot;05-%+TU!4TL@5$%&quot;3$4@,BXP(&quot;TK+0!/&quot;`(`
MCR`M*RT@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;TK+0!V&quot;`,`CR`M*RT@
M($)9.B!7059%1D]232`@(&quot;`@(&quot;`@(&quot;`@(&quot;TK+0&quot;=&quot;`0`CR`M*RT@1D]2.B!$
M25-#/4]615)9($U!1T%:24Y%(&quot;TK+0#$&quot;`4`CR`M*RT@($]..B`P.2TQ-&quot;TY
M-B`@(&quot;`@(&quot;`@(&quot;`@(&quot;TK+0#=&quot;`H`0D$@LB`Q,S`U-B`Z($-&quot;LC@Q.3(`^P@,
M`$)(LK4H0D&amp;M,C4V*3I&quot;3+)&quot;0:M&quot;2*PR-38`#0ED`$.R,#J!5+(P(*0@,34`
M&amp;`EF`(%1LC&quot;D-P`J&quot;6@`0C&amp;R0T*J*%2L,3(X*0!(&quot;6H`2$*RM2A&quot;,:TR-38I
M.DQ&quot;LD(QJTA&quot;K#(U-@!J&quot;6P`ER!&quot;02&quot;J($,L3$(ZER!&quot;02&quot;J(#$R.&quot;&quot;J($,L
M2$(`&gt;0EN`$.R0ZHQ.H)1+%0`BPEX`$.R,#J!5+(P(*0@,34`E@EZ`(%1LC&quot;D
M-P&quot;M&quot;7P`0C&amp;R0T*J,C`T.*HH5*PQ,C@I`,L)?@!(0K*U*$(QK3(U-BDZ3$*R
M0C&amp;K2$*L,C4V`-\)@`&quot;7($)!(*HR-38@JD,L2$(`[@F&quot;`$.R0ZHQ.H)1+%0`
M_`F6`(%4LC`@I&quot;`Q-0`'&quot;I@`@5&amp;R,*0W`&quot;8*F@&quot;7($)!(*H@,S@TJBA4K#@I
MJE$L,JXH-ZM1*0`O&quot;IP`@E$L5`!-&quot;L@`GS$L.&quot;PQ-2PB4S`Z0D%312]-05-+
M(CJ@,0!H&quot;LH`GS(L.&quot;PR+&quot;)&quot;05-%+TU!4TLL4&quot;Q7(@![&quot;LP`F#(LQRA&quot;3&quot;G'
M*$)(*3L`B`K.`(%4LC&quot;D-3$Q`)L*T`&quot;8,BS'*,(H0D&amp;J5&quot;DI.P&quot;A&quot;M(`@@&quot;H
M&quot;M0`H#(````:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:
M&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:
#&amp;AH:
`
end

begin 644 sin_cos_sqr
M`#```@,%!@@)&quot;PP.$!$3%!87&amp;1H;'1X@(2(D)28G*2HK+&quot;TN+S`Q,C,T-38W
M.#@Y.CL[/#P]/3X^/C\_/T!`0$!`0$!`0$!`/S\_/CX^/3T\/#LZ.CDX.#&lt;V
M-30S,C$P+RXM+&quot;LJ*2&lt;F)2,B(1\&gt;'1L:&amp;!&lt;5%!(1#PX,&quot;PD(!@4#`0#^_?OZ
M^/;U\_+P[^WLZNGGYN7CXN#?WMS;VMG7UM74T]+0S\[-S&lt;S+RLG(Q\?&amp;Q&lt;7$
MQ,/#PL+&quot;P&lt;'!P,#`P,#`P,#`P,'!P&lt;'&quot;PL+#P\3$Q&lt;;&amp;Q\C(R&lt;K+S,W.S]#1
MTM/4U=;8V=K;W=[?X&gt;+CY&gt;;HZ&gt;OL[N_Q\O3U]_CZ_/W_0$!`0$!`/S\_/CX^
M/3T\/#L[.CDX.#&lt;V-30S,C$P+RXM+&quot;LJ*2&lt;F)20B(2`&gt;'1L:&amp;!&lt;6%!,1$`X,
M&quot;PD(!@4#`@#^_?OZ^/?U\_+P[^WLZNGGYN7CXN#?WMS;VMG7UM74T]+1S\[-
MS&lt;S+RLG(R,?&amp;Q&lt;7$Q,/#PL+&quot;P&lt;'!P,#`P,#`P,#`P,#!P&lt;'&quot;PL+#P\3$Q&lt;;&amp;
MQ\C(R&lt;K+S,W.S]#1TM/4U=;8V=K;W=[?X&gt;+CY&gt;;HZ&gt;OL[N_Q\O3U]_CZ^_W_
M``(#!08(&quot;@L-#A`1$Q06%QD:'!T&gt;(&quot;$B)&quot;4F*&quot;DJ*RPM+C`Q,C,T-#4V-S@Y
M.3H[.SP\/3T^/CX_/S]`0$!`0``````````````````````!`0$!`0$!`@(&quot;
M`@(#`P,#!`0$!`4%!04&amp;!@8'!P&lt;(&quot;`D)&quot;0H*&quot;@L+#`P-#0X.#P\0$!$1$A(3
M$Q04%146%Q&lt;8&amp;1D:&amp;AL&lt;'!T&gt;'A\@(2$B(R0D)28G)R@I*BLK+&quot;TN+S`Q,3(S
M-#4V-S@Y.CL\/3X_/SX]/#LZ.3@W-C4T,S(Q,3`O+BTL*RLJ*2@G)R8E)&quot;0C
M(B$A(!\&gt;'AT&lt;'!L:&amp;AD9&amp;!&lt;7%A45%!03$Q(2$1$0$`\/#@X-#0P,&quot;PL*&quot;@H)
M&quot;0D(&quot;`&lt;'!P8&amp;!@4%!04$!`0$`P,#`P(&quot;`@(&quot;`0$!`0$!`0``````````````
M```````:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:
M&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:
I&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:
`
end

begin 644 base_mask
M`#,``````````(&quot;`@(&quot;`@(&quot;```````````&quot;`@(&quot;`@(&quot;`@```````````@(&quot;`
M@(&quot;`@(```````````(&quot;`@(&quot;`@(&quot;```````````&quot;`@(&quot;`@(&quot;`@```````````
M@(&quot;`@(&quot;`@(```````````(&quot;`@(&quot;`@(&quot;```````````&quot;`@(&quot;`@(&quot;`@&quot;`@(&quot;`@
M(&quot;`@(&quot;`@(&quot;`@(&quot;`A(2$A(2$A(2$A(2$A(2$A(B(B(B(B(B(B(B(B(B(B(B,C
M(R,C(R,C(R,C(R,C(R,D)&quot;0D)&quot;0D)&quot;0D)&quot;0D)&quot;0D)24E)24E)24E)24E)24E
M)28F)B8F)B8F)B8F)B8F)B8G)R&lt;G)R&lt;G)R&lt;G)R&lt;G)R&lt;G*&quot;@H*&quot;@H*&quot;@H*&quot;@H
M*&quot;@H*&quot;DI*2DI*2DI*2DI*2DI*2DJ*BHJ*BHJ*BHJ*BHJ*BHJ*RLK*RLK*RLK
M*RLK*RLK*RPL+&quot;PL+&quot;PL+&quot;PL+&quot;PL+&quot;PM+2TM+2TM+2TM+2TM+2TM+BXN+BXN
M+BXN+BXN+BXN+B\O+R\O+R\O+R\O+R\O+R^`0&quot;`0&quot;`0&quot;`8!`(!`(!`(!@$`@
M$`@$`@&amp;`0&quot;`0&quot;`0&quot;`8!`(!`(!`(!@$`@$`@$`@&amp;`0&quot;`0&quot;`0&quot;`8!`(!`(!`(!
M@$`@$`@$`@&amp;`0&quot;`0&quot;`0&quot;`8!`(!`(!`(!@$`@$`@$`@&amp;`0&quot;`0&quot;`0&quot;`8!`(!`(
M!`(!@$`@$`@$`@&amp;`0&quot;`0&quot;`0&quot;`1H:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:
M&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:
M&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:&amp;AH:
*&amp;AH:&amp;AH:&amp;AH:&amp;AH:
`
end


/S06::$d400:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


            SID Primer: The Working Man's Guide to SID
            ----------
                                   by

               Stephen L. Judd
                                       (sjudd@nwu.edu)


        The Sound Interface Device (SID): it is one of the signature chips
in the C64, but to this day a number of people still do not have a good
understanding of SID -- the meaning of its registers, the idea behind how
it generates sounds, etc. (I myself was in this category not so long ago).
This article exists to rectify this situation once and for all with a general
overview of the chip which everyone should be able to comprehend.  I have also
included a program for experimenting with SID, which allows the user to change
the various registers and see (not to mention hear!) the effect.

        To use the program, just load it and run.  Use the cursor keys
to move between the various settings, and use the +/- keys to change
those settings.  To change certain settings, like frequency, by large
amounts, you can press shift +/-.  Large jumps will work on any setting
that takes up more than one byte.  Press 1, 2, or 3 to switch between
the settings for voices 1, 2, and (guess!).  Certain settings, such
as the waveforms, are simple toggles, and the space bar is used to toggle
these on and off.  Finally, * will toggle the output of voice 3 on and off,
although you need to press it very fast, as I only included it for the sake
of completeness and did not debounce it or anything (all keys repeat).
The upper left corner displays all of the (relevant) SID registers,
so when you change a particular setting you will see the corresponding
change in the appropriate SID registers.  Since SID is located at
54272 ($D400), these values reflect the contents of SID+register number.
The two registers in the lower right corner of the SID box show the current
values of the voice 3 oscillator and envelope generator.  If you are feeling
impatient, set the sustain to 15, select the triangle waveform, use shift+
to get a reasonably large frequency, and set the gate bit, which turns the
sound on.  Viola!  Violin!  SID!

        SID is pretty straightforward.  There are a total of three voices.
There are also three filters which the output of a voice may be run through.
SID is also used to read the paddles (i.e. potentiometer settings).

        All three voices have a number of features in common.  There
are four possible waveforms which may be selected: triangle, sawtooth,
pulse, and noise.  The waveform determines the basic &quot;sound&quot; of the
sound.  Multiple waveforms may be selected on a voice, which results
in a sort of mashing together of the waveforms, although noise should
never be selected at the same time as the others.

   The frequency of each voice runs from about 0 Hz to around
4000 Hz, with 65536 steps in-between.  Higher frequencies may be
generated via ring modulation.  According to &quot;Mapping the 64&quot;, the
exact frequency may be calculated as :

FREQUENCY = (REGISTER VALUE * CLOCK)/16777216 Hz

where CLOCK=1022730 for NTSC systems and CLOCK=985250 for PAL systems.

        One of the more important features of a SID voice is the ADSR
envelope.  The ADSR Envelope is quite easy to understand.  Here is how to
create an envelope using a stereo: first turn the volume all the way
to zero (my volume goes to 11, so it takes me a while).  Now start
turning it up to some level, say 5.  As soon as it hits 5, start going
back down again, until it hits 2.  Let it sit at 2 until you get tired
of sitting, and then turn it back down to zero.

        ADSR stands of course for Attack Decay Sustain Release.  The
first part, turning it up to 5, is the attack phase.  Changing the
attack changes how quickly the volume goes to its maximum.  The
second phase, turning down to 2, is the decay phase.  Again, changing
the decay changes the rate at which the volume decays from the
maximum volume to the sustain volume, which in this case is 2.
Changing the sustain value changes this sustain level.  The sound
will remain at this volume until the release phase is initiated.
Changing the release value changes the rate at which the sound will
decay to zero.

        To start the attack phase, simply set the gate bit.  To
start the release phase, clear the gate bit.  The program may be
used to investigate the envelope, via the voice 3 envelope generator
output register: select voice 3, and set the ADSR values to, say
attack 14, decay 10, sustain 10, and release 8.  Set the gate bit,
and the register will first increase, then decrese, then sit still,
until the gate bit is cleared, at which point the sound will decay
towards zero.

        There are two more important features for each voice: ring
modulation and synchronization.  Ring modulation produces nonharmonic
overtones, i.e. gives it a bell-like or gong-like sound.  Synchronization
combines two waveforms in a special way, and tends to amplify higher
frequencies contained in the waveform.

        These two features modulate the voice with the one &quot;underneath&quot;
it; that is, Voice 1 is modulated by voice 3, voice 2 by voice 1, etc.
Ring modulation can only be applied to the triangle waveform; that is,
if ring modulation is selected for voice 1, then voice 1 must have
the triangle waveform selected.  Using the program, start some note
playing with voice 1, and select ring modulation.  Then go to voice 3
and select a waveform and a frequency -- the ADSR settings may all be 0.
There are also three filters available, which may be combined.  These are
not separate filters for each voice, but rather one set of filters which
voices may all run through.  Any sound generated by SID will contain a
number of frequencies.  As you might expect, the filters will filter out
frequencies in a special way.

        To use the filters, the cutoff frequency must first be selected.
All frequency components above or below this cutoff frequency will be
reduced in volume -- the further away these frequencies are, the more they
will be attenuated.  The low pass filters will let all frequencies below
the cutoff through, and attenuate frequencies higher than the cutoff.
The high pass filter does the opposite.  The bandpass filter attenuates
frequencies on both sides of the cutoff.  When low and high filters are
selected simultaneously, the result is called a notch filter.
As an example, let's say we had a sawtooth wave playing at 100 Hz.
This wave contains a number of higher harmonics, in particular
harmonics at 200 Hz, 300 Hz, 400 Hz, 500 Hz, and so on.  If the low
pass filter were selected, and the cutoff frequency was set at 380 Hz,
the 200 Hz and 300 Hz frequencies would pass right through, but the 400 Hz
500 Hz etc. frequencies would be attenuated, the 500 Hz harmonic being
decreased more than the 400 Hz harmonic.

        Resonance is a special feature which boosts frequencies near
the cutoff frequency.  This creates a somewhat sharper filtering effect.
The downside of the filters is that they vary quite a bit between
different SID chips, so filtered sounds on one machine may sound quite
different than the identical settings on another machine.  The game
Beach-Head even allowed the user to change the filter settings, to try
to compensate for this.  According to &quot;Mapping the 64&quot; the exact cutoff
frequency is :

FREQUENCY = (REGISTER VALUE * 5.8) + 30 Hz

Note that the cutoff frequency is only 11 bits wide, i.e. has values
from 0 to 2047.

        One other setting is bit 7 of location 54286 ($D418), which
disconnects the output of voice 3.  This lets voice 3 be used, in
particular the envelope output register, without having to listen to it.
The waveforms are the &quot;shape&quot; of the sound.  Sound is how two
sensors on the side of your head interperet pressure variations in
the air.  Speakers convert changes in voltage into pressure.  The
waveform generators are what control this voltage.  Once again, the
program may be used to get a feel for how the waveforms look, by
using voice 3 and a very low frequency setting (like 1), and seeing
the change in the waveform output register.

        The first waveform is the Triangle wave.  This is SID's closest
approximation to a pure sine wave.  It starts at some value, increases up
to its maximum value, then decreases down to its minimum value, and
so on.  Mathematically, this wave may be expressed as :

sin(x) - sin(3x)/9 + sin(5x)/25 - sin(7x)/49 + ...

so a triangle wave with fundamental frequency 100 Hz contains frequencies
of 300 Hz, 500 Hz, 700 Hz, and so on.  Note that the amplitude of
each harmonic decreases as the square of the frequency.

        The second waveform is the Sawtooth.  This waveform increases up
to its maximum, like the Triangle, but once it gets there it suddenly
drops down to its minimum, so it is like half of a triangle.  This wave
may be expressed as :

sin(x) + sin(2x)/2 + sin(3x)/3 + sin(4x)/4 + ...

As you can see it has a much higher harmonic content than the triangle
wave -- more harmonics are present, and their amplitudes decrease less
rapidly than the triangle wave (e.g. compare sin(3x)/3 with sin(3x)/9).

        Next up is the Pulse, or Square, waveform.  The pulse waveform
is either high or low.  With SID you can set how much of the time is
spent high and how much is spent low.  The ratio of the time the signal
is high to the time of a complete cycle is called the duty cycle.  A
duty cycle of 1:2 is a special case called a square wave :

sin(x) + sin(3x)/3 + sin(5x)/5 + ...

The neat thing about pulse waves is that as the duty cycle is changed the
harmonic content varies widely -- try using the program to change the
pulse width and it will be obvious.  Pulse waves can have a very
irregular energy distribution among the various harmonics; compare
with a sawtooth, where the harmonics decrease smoothly.

        The final waveform is the Noise waveform.  Noise is simply a
randomly generated waveform; that is, random values are output through
the waveform generator according to the frequency setting.  Obviously
the result can't be written down as a harmonic expression like the above
waveforms, but the frequency spectrum as a whole may be described.
White Noise contains all frequencies in equal proportion.  SID generates
what is known as Blue Noise: a minimum frequency is set and all frequencies
above this minimum are generated with equal probability; thus SID noise
is biased towards higher frequencies.

        A few words about ring modulation and synchronization: ring
modulation is a multiplication of two signals.  To see what happens,
consider multiplying two sine waves together :

sin(f1) * sin(f2) = sin(f1-f2+pi/2)/2 - sin(f1+f2+pi/2)/2

where a handy trig identity is used.  The important thing to notice
is that two new frequencies are generated, f1+f2 and f1-f2, with
smaller amplitude and different phase.  Try ring modulating a wave
at one frequency with another whose frequency differs by 1 or 2,
using the program.  The result is two waves with fundamental frequencies
slightly off from one another, which generates beats.  In short, though,
using ring modulation creates a whole slew of new sum and difference
harmonics, which gives a bell-like sound.  It should also be clear that
frequencies higher than the maximum SID frequency setting may be
generated in this way.

        SID doesn't work quite this way, though.  That is, it does indeed
generate all the sum and difference frequencies, but there is no waveform
multiplication going on.  See the Yannes interview, elsewhere in this
issue, for more information.

        Synchronization synchronizes one voice to another.  That is,
if voice 1 is synchronized to voice 3, the voice 1 waveform will &quot;start
over&quot; according to the frequency of voice 3.  Adding a discontinuity
like this has the effect of generating higher harmonics, and can change
the pitch as well.  Imagine a triangle waveform, counting downwards,
when suddenly the waveform is reset to zero and starts counting up again.
The triangle is now starting to resemble a sawtooth, which, as was
pointed out earlier, contains more high frequencies with larger
amplitudes.

        That then is a fairly complete summary of SID.  For more detail
on the inner workings of SID see the interview with Bob Yannes, designer
of the SID chip, elsewhere in this issue.  For information on programming
SID, see just about any book on the Commodore 64.  Otherwise, have some
fun playing with SID!


begin 600 wave3.run
M`0@`&quot;+49GC(P-S$@4TQ*(#DO,34O.38`J0&quot;%_:(7G0#`RA#ZJ0^-&amp;,&quot;I0(7Z
MJ8&quot;-B@*-(-&quot;I!HTAT*F3(-+_3'8)$Y(1$1$1$1$1$1$1F4%45$%#2R`Z!3`P
M(&quot;&quot;95T%6149/4DTZ#41%0T%9(&quot;`Z!3`P(&quot;`@5%))(%-!5R!054P@3D])#9E3
M55-404E..@4P,&quot;`@F5!53%-%(%=)1%1(.@4@(&quot;`P#9E214Q%05-%.@4P,&quot;`@
MF49215$Z!2`@(&quot;`P#1$@1T%412!224Y'#2!364Y#(%1%4U0-$9E&amp;24Q415(Z
M!2!6,2!6,B!6,PT@3$]7(%!!4U,-($)!3D0@4$%34PT@2$E'2&quot;!005-3#1&amp;9
M4D533TY!3D-%.@4P,`V90U543T9&amp;.@4P,#`P$Y(%(%8Q(&quot;`@5C(@(&quot;!6,R`@
M($A)(&amp;(3$1$1$1$1$1$%8V-C8V-C8V-3241C8V-C8V-C8VN1G6*1G6*1G6*1
MG6*1G6*1G6*1G6*1G6(`J0B%_ZE!A?Z@`+'^\`H@TO_(T/;F_]#RH!*I`YDH
MV)E0V)EXV)F@V)G(V)GPV)D8V8@0Z*(`J0&quot;%_JD$A?^@`!BE_FDHA?Z0`N;_
MBB&quot;8#\B]`,&quot;=`-0@CP_(BAAI!R&quot;8#\B]!\&quot;=!]0@CP_(BAAI#B&quot;8#\B]#L&quot;=
M#M0@CP_(X`2P$8H8:14@F`_(O17`G174((\/X`70#*D+()@/R*T;U&quot;&quot;/#^`&amp;
MT`RI#&quot;&quot;8#\BM'-0@CP_HX`?0AJD$A?^E_&lt;D`T`*I`&lt;D'T`*I!LD.T`*I&quot;X7^
MH`$@&gt;P^@`:7+R3C0&quot;2&quot;%#ZD`A?WP),D[T`D@A0^I!X7]T!?)&quot;-`'((4/J0Z%
M_&lt;DQT`BM&amp;,!)@(T8P*F0A?ZI!87_H`BF_;T%P$I*2DJ%^R&quot;F#Z7ZR4#0%Z`&amp;
M(!@/&quot;@H*&quot;H7[IOV]!&lt;`I#P7[G07`J;B%_JD%A?^@&quot;+T%P&quot;D/A?L@I@^E^LE!
MT!.@!B`8#X7[IOV]!&lt;`I\`7[G07`J&gt;&quot;%_JD%A?^@&quot;+T&amp;P$I*2DJ%^R&quot;F#Z7Z
MR4+0%Z`&amp;(!@/&quot;@H*&quot;H7[IOV]!L`I#P7[G0;`J0B%_JD&amp;A?^@&quot;+T&amp;P&quot;D/A?L@
MI@^E^LE#T!.@!B`8#X7[IOV]!L`I\`7[G0;`J&lt;2%_JD%A?^E_1AI!*JI$(7[
M/0#`\`*I,1AI(*``D?ZE^LE$T`6@`B!)#ZG(A?ZI!87_I?VI((7[/0#`\`*I
M,1AI(*``D?ZE^LE%T`6@`B!)#ZG,A?ZI!87_J4&quot;%^ST`P/`&quot;J3$8:2&quot;@`)'^
MI?K)1M`+H`*E_1AI!*H@20^IT(7^J06%_ZF`A?L]`,#P`JDQ&amp;&amp;D@H`&quot;1_J7Z
MR4?0!:`&quot;($D/J&gt;R%_JD%A?^F_;T&quot;P(7\O0/`*0^=`\&quot;%^Z`,(-D/I?K)2-!,
MH`H@&gt;P\@Y/^F_&lt;DKT`C^`L#0.?X#P,DMT`Z]`L#0`]X#P-X&quot;P$Q6#,G;T`/^
M`\#)W=`#W@/`H`K)D=`'((4/QOK0&quot;&lt;D1T`4@A0_F^JD4A?ZI!H7_IOV]`,&quot;%
M_+T!P(7[H`4@O0^E^LE)T$R@`R![#R#D_Z;]R2O0&quot;/X`P-`Y_@'`R2W0#KT`
MP-`#W@'`W@#`3,$,R=O0`_X!P,G=T`/&gt;`&lt;&quot;@`\F1T`&lt;@A0_&amp;^M`)R1'0!2&quot;%
M#^;ZJ5B%_JD&amp;A?^I!!AE_:JI`87[/0#`\`*I,1AI(*``D?ZE^LE*T`6@`R!)
M#ZF`A?ZI!H7_J0089?VJJ0*%^ST`P/`&quot;J3$8:2&quot;@`)'^I?K)2]`%H`,@20^I
M787^J0:%_ZD$&amp;&amp;7]JJD$A?L]`,#P`JDQ&amp;&amp;D@H`&quot;1_J7ZR4S0!:`#($D/J86%
M_JD&amp;A?^I!!AE_:JI&quot;(7[/0#`\`*I,1AI(*``D?ZE^LE-T`6@`R!)#ZG7A?ZI
M!H7_HA&gt;I`87[+1?`\`*I,1AI(*``D?ZE^LE.T`6@`2!)#ZG:A?ZI!H7_J0*%
M^RT7P/`&quot;J3$8:2&quot;@`)'^I?K)3]`%H`$@20^IW87^J0:%_ZD$A?LM%\#P`JDQ
M&amp;&amp;D@H`&quot;1_J7ZR5#0!:`!($D/J?B%_JD&amp;A?^B&amp;*D0A?LM&amp;,#P`JDQ&amp;&amp;D@H`&quot;1
M_J7ZR5'0!:`'($D/J2&quot;%_JD'A?^I((7[+1C`\`*I,1AI(*``D?ZE^LE2T`6@
M&quot;&quot;!)#ZE(A?ZI!X7_J4&quot;%^RT8P/`&quot;J3$8:2&quot;@`)'^I?K)4]`%H`@@20^IF(7^
MJ0&gt;%_Z`*K1?`2DI*2H7[(*8/I?K)5-`5H`@@&amp;`\*&quot;@H*A?NM%\`I#P7[C1?`
MJ&lt;&quot;%_JD'A?^I`(7[K1;`&quot;B;[&quot;B;[&quot;B;[#17`A?R@!R#9#Z7ZR5706J`&amp;('L/
M(.3_IOW)*]`3K17`&amp;&amp;D!*0&gt;-%&lt;#0/^X6P$P&quot;#\DMT!&amp;N%&lt;#0!&lt;X6P*((RHX5
MP$P&quot;#\G;T`/N%L#)W=`#SA;`H`K)D=`'((4/QOK0&quot;&lt;D1T`4@A0_F^J7ZR5:0
M!*E`A?K)0+`$J56%^DRJ&quot;6&quot;$_&quot;![#R#D__`BI/S)*]`&quot;YOO)+=`&quot;QOO)D=`'
M((4/QOH0&quot;&lt;D1T`4@A0_F^J7[*0]@YOZ$_&quot;![#XI((.3_J&amp;BJF*3\R2#0&quot;;T`
MP$7[G0#`8,F1T`4@A0_&amp;^LD1T`4@A0_F^F&quot;Q_@F`D?Z($/=@L?XI?Y'^B!#W
M8$A*2DI*()H/:&quot;D/&quot;3#).I`&quot;Z3F1_LA@2,D*J3!I`)'^R&amp;IHD`/I&quot;AAI,)'^
MR&amp;&quot;B,*7\..D02*7[Z2&gt;0`^B%^VB0`H7\L.V*D?[(HC&quot;E_#CIZ$BE^^D#D`/H
MA?MHD`*%_+#MBI'^R*(OI?PXA?SI9.BP^&lt;;[$/2*D?[(HB^E_#B%_.D*Z+#Y
-BI'^R*7\&amp;&amp;DPD?[(8*(O
`
end


/S07::$d400:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

 
                         Progenitor of the SID :
 
                      An interview with Bob Yannes
 
                           by  Andreas Varga
 
 
   This is an interview with the creator of the SID chip, namely Bob
   Yannes, who after working for Commodore, co-founded the well-known
   synthesizer company Ensoniq. In the latter part of the interview he
   gives us a very detailed description of the SID's technology.
   
   The interview was done via e-mail in August 1996 by Andreas Varga.
   Some questions came from Linus Walleij.
 
   [A note from your friendly technical editor: There is a little addendum
   at the end of this interview, with a few comments to clarify or expand
   upon some of the statements in the interview.  These comments are
   referenced in the interview by a number in square brackets, like this: [3]
 
   These comments are due in large part to a series of very helpful 
   conversations with Andreas Boose, Marko Makela, Michael Schwendt, and
   Andreas Varga.  Special thanks to Andreas Boose for explaining how a
   phase accumulating oscillator works :).
   -TechEd]
 
--
   
   
&gt;  Did you foresee that people would actually treat your little
&gt;  VLSI-chip like an instrument?
   
   Actually, I was an electronic music hobbyist before I started
   working for MOS Technology (one of Commodore's chip divisions at the
   time) and before I knew anything at all about VLSI chip design. One of
   the reasons I was hired was my knowledge of music synthesis was deemed
   valuable for future MOS/Commodore products. When I designed the SID
   chip, I was attempting to create a single-chip synthesizer voice which
   hopefully would find it's way into polyphonic/polytimbral
   synthesizers.
   
   
&gt;  Are you aware of the existence of programs like SIDPLAY,
&gt;  PlaySID,... which emulate the SID chip up to the smallest click ?
   
   I only recently became aware of them (through your website).
   I'm afraid I haven't thought much about SID in the last 15 years...I
   am constantly amazed and gratified at the number of people who have
   been positively affected by the SID chip and the Commodore 64 (which I
   also designed) and who continue to do productive things with them
   despite their &quot;obsolescence&quot;.
   
   
&gt;  Have you heard the tunes by Rob Hubbard, Martin Galway, Tim
&gt;  Follin, Jeroen Tel, and all the other composers ?
   
   I'm afraid not, are recordings available in the US?
   
 
&gt;  Did you believe this was possible to do with your chip?
   
   Since I haven't heard them I'm not sure what we are talking
   about, however, I did design the SID chip with enough resolution to
   produce high-quality music. I was never able to refine the
   Signal-to-noise ratio to the level I wanted, though.
 
   
&gt;  How much of the architecture in the SID inspired you when
&gt;  working with the Ensoniq synthesizers?
   
   The SID chip was my first attempt at a phase-accumulating
   oscillator, which is the heart of all wavetable synthesis systems.
   Due to time constraints, the oscillators in SID were not multiplexed,
   therefore they took up a lot of chip area, constraining the number of
   voices I could fit on a chip. All ENSONIQ sound chips use a
   multiplexed oscillator which allows us to produce at least 32 voices
   per chip. Aside from that, little else of SID is to be found in our
   designs, which more closely resemble the Mountain Computer sound card
   for the Apple II (the basis of the Alpha Syntauri system). The DOC I
   chip (used in the Mirage and ESQ-1) was modeled on this sound card.
   Our current designs, which include waveform interpolation, digital
   filters and digital effects are new designs that aren't really based
   on anything other than our imaginations.
   
   
&gt;  How big impact do you think the SID had on the synthesizer
&gt;  industry?
   
   Well, I don't think it had much impact on the synthesizer
   industry. I remember once at Commodore that Sequential Circuits was
   interested in buying the chip, but nothing ever came of it. My
   intention in designing the chip (since MOS Technology was a merchant
   semiconductor house at the time and sold chips to the outside world)
   was to be able to sell the SID chip to synthesizer manufacturers. SID
   chip production was completely consumed by the Commodore 64 and by the
   time chips were readily available, I had left Commodore and never had
   the opportunity to improve the fidelity of the chip.
   
   
&gt;  What would you have changed in the SIDs design, if you had a
&gt;  bigger budget from Commodore ?
   
   The issue wasn't budget, it was development time and chip size
   constraints. The design/prototype/debug/production schedule of the SID
   chip, VIC II chip and Commodore 64 were incredibly tight (some would
   say impossibly tight)--we did things faster than Commodore had ever
   done before and were never able to repeat after! If I had had more
   time, I would have developed a proper MOS op-amp which would have
   eliminated the signal leakage which occurred when the volume of the
   voice was supposed to be zero. This lead to poor signal-to-noise
   ratio, although it could be dealt with by stopping the oscillator. It
   would also have greatly improved the filter, particularly in achieving
   high resonance. I originally planned to have an exponential look-up
   table to provide a direct translation for the equal-tempered scale,
   but it took up too much silicon and it was easy enough to do in
   software anyway.
 
  
&gt;  The SID is very complex for its time. Why didn't you settle
&gt;  with an easier design ?
   
   I thought the sound chips on the market (including those in
   the Atari computers) were primitive and obviously had been designed
   by people who knew nothing about music. As I said previously, I was
   attempting to create a synthesizer chip which could be used in
   professional synthesizers.
   
   
&gt;  Do you still own a C64 (or another SID-equipped computer) ?
   
   Sure, I have a couple of them (including the portable), but I
   honestly haven't turned them on in years.
   
   
&gt;  Did Commodore ever plan to build an improved successor to the SID?
 
   I don't know. After I left I don't think there was anyone
   there who knew enough about music synthesis to do much more than
   improve the yield of the SID chip. I would have liked to have improved
   the SID chip before we had to release to production, but I doubt it
   would have made any difference to the success of the Commodore 64.
  
   
&gt;  Can you give us a short overview of the SIDs internal architecture ?
   
   It's pretty brute-force, I didn't have time to be elegant.
   Each &quot;voice&quot; consisted of an Oscillator, a Waveform Generator, a
   Waveform Selector, a Waveform D/A converter, a Multiplying D/A
   converter for amplitude control and an Envelope Generator for
   modulation. The analog output of each voice could be sent through a
   Multimode Analog Filter or bypass the filter and a final Multiplying
   D/A converter provided overall manual volume control.
   
   As I recall, the Oscillator is a 24-bit phase-accumulating design of
   which the lower 16-bits are programmable for pitch control. [1] The output
   of the accumulator goes directly to a D/A converter through a waveform
   selector. Normally, the output of a phase-accumulating oscillator
   would be used as an address into memory which contained a wavetable,
   but SID had to be entirely self-contained and there was no room at all
   for a wavetable on the chip.
   
   The Sawtooth waveform was created by sending the upper 12-bits of the
   accumulator to the 12-bit Waveform D/A.
   
   The Triangle waveform was created by using the MSB of the accumulator
   to invert the remaining upper 11 accumulator bits using EXOR gates.
   These 11 bits were then left-shifted (throwing away the MSB) and sent
   to the Waveform D/A (so the resolution of the triangle waveform was
   half that of the sawtooth, but the amplitude and frequency were the
   same).
   
   The Pulse waveform was created by sending the upper 12-bits of the
   accumulator to a 12-bit digital comparator. The output of the
   comparator was either a one or a zero. This single output was then
   sent to all 12 bits of the Waveform D/A.
   
   The Noise waveform was created using a 23-bit pseudo-random sequence
   generator (i.e., a shift register with specific outputs fed back to
   the input through combinatorial logic). [2] The shift register was clocked
   by one of the intermediate bits of the accumulator to keep the
   frequency content of the noise waveform relatively the same as the
   pitched waveforms. The upper 12-bits of the shift register were sent
   to the Waveform D/A.
   
   Since all of the waveforms were just digital bits, the Waveform
   Selector consisted of multiplexers that selected which waveform bits
   would be sent to the Waveform D/A. The multiplexers were single
   transistors and did not provide a &quot;lock-out&quot;, allowing combinations of
   the waveforms to be selected. The combination was actually a logical
   ANDing of the bits of each waveform, which produced unpredictable
   results, so I didn't encourage this, especially since it could lock up
   the pseudo-random sequence generator by filling it with zeroes. [3]
   [Actually, the result isn't a logical ANDing at all. -TechEd]
   
   The output of the Waveform D/A (which was an analog voltage at this
   point) was fed into the reference input of an 8-bit multiplying D/A,
   creating a DCA (digitally-controlled-amplifier). The digital control
   word which modulated the amplitude of the waveform came from the
   Envelope Generator.
   
   The Envelope Generator was simply an 8-bit up/down counter which, when
   triggered by the Gate bit, counted from 0 to 255 at the Attack rate,
   from 255 down to the programmed Sustain value at the Decay rate,
   remained at the Sustain value until the Gate bit was cleared then
   counted down from the Sustain value to 0 at the Release rate.
   
   A programmable frequency divider was used to set the various rates
   (unfortunately I don't remember how many bits the divider was,
   either 12 or 16 bits). A small look-up table translated the 16
   register-programmable values to the appropriate number to load into
   the frequency divider. Depending on what state the Envelope Generator
   was in (i.e. ADS or R), the appropriate register would be selected and
   that number would be translated and loaded into the divider. Obviously
   it would have been better to have individual bit control of the
   divider which would have provided great resolution for each rate,
   however I did not have enough silicon area for a lot of register bits.
   Using this approach, I was able to cram a wide range of rates into 4
   bits, allowing the ADSR to be defined in two bytes instead of eight.
   The actual numbers in the look-up table were arrived at subjectively
   by setting up typical patches on a Sequential Circuits Pro-1 and
   measuring the envelope times by ear (which is why the available rates
   seem strange)!
   
   In order to more closely model the exponential decay of sounds,
   another look-up table on the output of the Envelope Generator would
   sequentially divide the clock to the Envelope Generator by two at
   specific counts in the Decay and Release cycles. This created a
   piece-wise linear approximation of an exponential. I was particularly
   happy how well this worked considering the simplicity of the
   circuitry. The Attack, however, was linear, but this sounded fine.
   
   A digital comparator was used for the Sustain function. The upper four
   bits of the Up/Down counter were compared to the programmed Sustain
   value and would stop the clock to the Envelope Generator when the
   counter counted down to the Sustain value. This created 16 linearly
   spaced sustain levels without havingto go through a look-up table
   translation between the 4-bit register value and the 8-bit Envelope
   Generator output. It also meant that sustain levels were adjustable in
   steps of 16. Again, more register bits would have provided higher
   resolution.
   
   When the Gate bit was cleared, the clock would again be enabled,
   allowing the counter to count down to zero. Like an analog envelope
   generator, the SID Envelope Generator would track the Sustain level if
   it was changed to a lower value during the Sustain portion of the
   envelope, however, it would not count UP if the Sustain level were set
   higher.
   
   The 8-bit output of the Envelope Generator was then sent to the
   Multiplying D/A converter to modulate the amplitude of the selected
   Oscillator Waveform (to be technically accurate, actually the waveform
   was modulating the output of the Envelope Generator, but the result is
   the same).
   
   Hard Sync was accomplished by clearing the accumulator of an
   Oscillator based on the accumulator MSB of the previous oscillator. [4]
   
   Ring Modulation was accomplished by substituting the accumulator MSB
   of an oscillator in the EXOR function of the triangle waveform
   generator with the accumulator MSB of the previous oscillator.  [5]
   That is why the triangle waveform must be selected to use Ring Modulation.
   
   The Filter was a classic multi-mode (state variable) VCF design. There
   was no way to create a variable transconductance amplifier in our NMOS
   process, so I simply used FETs as voltage-controlled resistors to
   control the cutoff frequency. An 11-bit D/A converter generates the
   control voltage for the FETs (it's actually a 12-bit D/A, but the LSB
   had no audible affect so I disconnected it!).
   
   Filter resonance was controlled by a 4-bit weighted resistor ladder.
   Each bit would turn on one of the weighted resistors and allow a
   portion of the output to feed back to the input. The state-variable
   design provided simultaneous low-pass, band-pass and high-pass
   outputs. Analog switches selected which combination of outputs were
   sent to the final amplifier (a notch filter was created by enabling
   both the high and low-pass outputs simultaneously).
   
   The filter is the worst part of SID because I could not create
   high-gain op-amps in NMOS, which were essential to a resonant filter.
   In addition, the resistance of the FETs varied considerably with
   processing, so different lots of SID chips had different cutoff
   frequency characteristics. I knew it wouldn't work very well, but it
   was better than nothing and I didn't have time to make it better.
   
   Analog switches were also used to either route an Oscillator output
   through or around the filter to the final amplifier. The final amp was
   a 4-bit multiplying D/A converter which allowed the volume of the
   output signal to be controlled. By stopping an Oscillator, it was
   possible to apply a DC voltage to this D/A. Audio could then be
   created by having the microprocessor write the Final Volume register
   in real-time. Game programs often used this method to synthesize
   speech or play &quot;sampled&quot; sounds.
   
   An external audio input could also be mixed in at the final amp or
   processed through the filter.
   
   The Modulation registers were probably never used since they could
   easily be simulated in software without having to give up a voice. For
   novice programmers they provided a way to create vibrato or filter
   sweeps without having to write much code (just read the value from the
   modulation register and write it back to the frequency register).
   These registers just give microprocessor access to the upper 8 bits of
   the instantaneous value of the waveform and envelope of Voice 3. Since
   you probably wouldn't want to hear the modulation source in the audio
   output, an analog switch was provided to turn off the audio output of
   Voice 3.
   
   
&gt;  Any other interesting tidbits or anecdotes ?
      
   The funniest thing I remember was getting in a whole bunch of
   C-64 video games which had been written in Japan. The Japanese are so
   obsessed with technical specifications that they had written their
   code according to a SID spec. sheet (which I had written before SID
   prototypes even existed). Needless to say, the specs were not
   accurate. Rather than correct the obvious errors in their code, they
   produced games with out of tune sounds and filter settings that
   produced only quiet, muffled sound at the output. As far as they were
   concerned, it didn't matter that their code sounded all wrong, they
   had written their code correctly according to the spec. and that was
   all that mattered!
--
For questions or comments, Mr. Andreas Varga may be reached through his SID
Homepage on the World Wide Web at - http://stud1.tuwien.ac.at/~e9426444/


Addendum by S. Judd, Technical Editor
------+-----+----------+-----+-------
 
References / suggested reading:
 
    &quot;Design case history: the Commodore 64&quot;, Tekal S. Perry and Paul Wallich,
        IEEE Specturm, March 1985
 
    &quot;Programming the Commodore 64&quot;, Raeto Colin West, Compute Publications.
 
    &quot;Mapping the Commodore 128&quot;, Otis Cowper, Compute Publications.
 
    The SID Homepage, maintained by Andreas Varga:
        http://stud1.tuwien.ac.at/~e9426444/
 
    &quot;SID Primer: The Working Man's Guide to SID&quot;
        by Stephen L. Judd, disC=overy issue 2 (Yep, this issue!)
 
    &quot;Mapping the Commodore 64&quot;, Sheldon Leemon, Compute Publications.
 
    &quot;Commodore 64/128 Programmer's Reference Guide&quot;, CBM.
 
The first article makes for very interesting reading and should be available
at most public libraries.  The second and third references have more detailed
and accurate explanations of SID and the theory behind its general features,
as well as actual implementation.  The SID homepage has lots of technical and
general information.  The disC=overy article attempts to provide a general
overview of the chip.  The last two are included as good references for
information on programming SID, especially since they are easy to acquire.
 
The program included with the disC=overy article (wave3) is useful for
investigating the SID.  By selecting voice 3, and using a low freq. (e.g. a
frequency setting of 1 or 2 say) the output of the waveform generator may be
seen visually.  Ring Modulation, Synchronization, and multiple waveform
selection may all be investigated in this manner.
 
Notes:

    [1] In the words of Andreas Boose:
 
          &quot;The phase accumulating oscillator is just a 24-bit accumulator
           which is increased by the 16-bit value of the frequency register
           every phi2 cycle.  And like Bob said, the upper 12 bits of this
           accumulator are sent to the waveform generators.
 
           Note that although he uses 12 bit, the resulting *resolution* of
           this signal is only 12 bit on lower frequencies, if the frequency
           register is smaller than 4096.  On higher frequencies the resolution
           drops down to nearly 8-bit when the frequency register is at its
           max value (65535).&quot;
 
        It should now be clear why all of SID's waveforms are linear in
        nature (i.e. composed of straight lines): instead of using this
        counter as an index into a wave table, only the counter itself
        is used in generating the waveforms (and counting up is an awfully
        linear process).  On the other hand, this raises the intriguing
        possibility of modulating the waveform via rapid changes in the
        frequency register.
 
    [2] Asger Alstrup Nielsen has done a good deal of research into SID's
        random number generator for generating the noise waveform.  I am
        told that the algorithm was implemented by Michael Schwendt in
        SIDplay and the result was not too accurate.  For more information,
        visit the SID home page, in the references above.
 
    [3] From the IEEE article referenced above:
 
            The precise capabilities of the sound chip are not clear even
        today, largely because of incorrect specifications having been written
        when the chip was first designed.  &quot;The spec. sheet got distributed
        and copied and rewritten by various people until it made practically
        no sense anymore,&quot; said Yannes.  An example of the faulty documentation
        is the claim that the chip can logically AND several waveforms. ...
        &quot;There is no interlock to make sure that if one bit is on, the others
        are off,&quot; Yannes said.  &quot;That would  have taken too much silicon.&quot;
        So if more than one waveform is selected, the internal nodes of the
        output multiplexer are discharged, and what emerges is the minimum
        of amplitudes.&quot;
 
        The meaning of that last statement is unclear, as the result
        is certainly not the minimum of the waveform values either.  A
        very simple way to see what the result looks like is to use the &quot;wave3&quot;
        program in the other disC=overy article with voice 3.  To test the
        logical ANDing hypothesis, &quot;freeze&quot; the voice 3 pulse waveform
        output at $FF by selecting pulse and a nonzero pulse width.  Select
        a very low note frequency, 1 or 2 say.  When the waveform output 
        becomes $FF set the pulse width to zero: the pulse output is now
        stuck at $FF.  Select another waveform, such as sawtooth, and watch
        (and listen to) the result!  (To hear the result, make sure the sustain
        level is set (to 15 say) and that the gate bit is set as well).  About
        the only thing that can be said about multiple waveforms is that they
        are periodic with the expected frequency.
 
        In short, nobody really knows what the result is when multiple
        waveforms are selected!
 
    [4] It should be clear that synchronization generates a new waveform at
        a fundamental frequency related to the preceding voice.  Moreover,
        resetting the accumulator to zero will in general introduce
        a discontinuity into the waveform.  Discontinuities will always
        amplify the presence of high frequencies, as can be seen by
        taking the Fourier transform of a discontinuous function.  Compare
        for instance the triangle waveform, whose mode amplitudes decay
        as 1/k^2, and the sawtooth waveform, whose mode amplitudes decay
        as 1/k, where k is the wave number.  High frequencies are needed to
        make sharp transitions.
 
        Try synchronizing a triangle waveform -- if the synchronization
        frequencies are very different, the result will unsurprisingly sound
        like a sawtooth.  The higher frequencies are easy to hear; sometimes
        even the fundamental pitch of the note will change significantly.
 
    [5] Ring Modulation.  Most books, not to mention the other SID article
        elsewhere in this issue of disC=overy, will explain ring modulation
        as a multiplication of two waveforms, which generates sum and
        difference frequencies.  Simply put, if one signal is cos(w1*t)
        and another signal is cos(w2*t), then the ring modulated output is:
 
            cos(w1*t) * cos(w2*t) = 1/2 (cos((w1+w2)*t) + cos((w1-w2)*t) )
 
        Voila! Two new waves, with frequencies which are the sum and difference
        of the two frequencies.  Note that if the two frequencies differ only
        slightly, very noticable beats will result.
 
        SID works a little differently.  What it does not do is to multiply
        any waveforms.  What it does do is generate a new waveform, somewhat
        related to the original waveform, which contains all the sum and
        difference frequencies.
 
        Recall that the triangle waveform may be written essentially as:
 
                f(x) = { x,      MSB=0  i.e. 0 &lt; x &lt;= max/2
                       { max-x,  MSB=1  i.e. max/2 &lt; x &lt; max
 
        where max is the maximum value of the accumulator, 2^24.  f(x) then
        counts upwards on one half of the cycle and downwards on the other
        half.
 
        Ring modulation uses the MSB of the preceeding voice to evaluate
        the function above.  The normal triangle waveform is continuous,
        since when x=max/2 the two pieces of the function have the same
        value.  If MSB is suddenly changed, however, the function, which
        was couting upwards, might suddenly change values significantly
        and start counting downwards.  It is pretty simple to sketch out
        the result on a piece of paper.  Consider the following:
 
 
        V3: At some frequency a little higher than V1 (waveform doesn't matter)
        V1: A triangle wave at some base frequency, modulated by V3.
 
        Modulated output of V1:
 
------------*-------*[--------------------------------- maximum value
            [*     * [
            [ *   *  [
       *    [  *  [  [
      * [   [   * [  [      *   etc.
     *  [   [    *   [     *
    *   [   [        [    *
   *    *   [        [   *
  *      *  [        [  *
 *        * [        [ *
*----------*[--------[*-------------------------------- minimum value
        ^   ^     ^  ^
        [   [     [  [
        [   [     [  Curve hits FF and wraps around to 00
        [   [     [
        [   [     V3 completes a cycle; MSB is cleared; V1 wave counts up again
        [   [
        [   Curve hits FF and wraps around to 00; MSB is high so result
        [   is 255-value (i.e. counting downwards)
        [
        V3 hits midway point in cycle; MSB is now high; V1 goes from t
        to 255-t, goes downwards.
 
        Well it's not really 0..255, but the meaning should be clear. :)
 
        There are now two important features: first, a number of
        discontinuities have been suddenly introduced, which tends
        to amplify higher frequencies.  The second is that the
        frequency of the resulting waveform is quite different than
        that of the pure triangle.  What is the frequency?  To put it
        another way, what is the period: how long must one wait before
        the waveform repeats itself?
 
        In terms of SID, let both of the accumulators start at zero, and let
        one count up faster than the other.  The period of a given voice is
        the amount of time it takes for its counter to return to zero.  At
        some point both counters will return to zero, and of course the
        modulated wave will then repeat.  This then gives the period of the
        modulated waveform.
 
        Let one wave have period T1 (frequency w1) and the other have period T3
        (and frequency w3).  When m*T1 = n*T3, for some integers m and n, the
        wave will repeat.  That is, perhaps after ten repetitions of wave 1 and
        three repetitions of wave 3 the waves will both be at zero again.  The
        resulting wave will then have frequencies w=(p*w1 + q*w3) for integer
        p,q.  To see this, consider a wave like:
 
                f(t) = e^i 2*pi (p*w1 + q*w3) t,  where w1=1/T1, w3=1/T3
 
                let t = T = m*T1 = n*T3, then
 
                f(T) = e^i 2*pi (p*m + q*n) = f(2*pi) = f(0)
 
        Thus, such a wave has period T (although not necessarily least
        period T), for *any* p,q integer.  This then implies that the resulting
        waveform contains all of the sum and difference frequencies, e.g.
        w1-w3, w1+w3, 2*w1+w3, etc.
 
        Q.E.D.
 
        In summary, SID's ring modulation produces a new waveform containing
        sum and difference frequencies of the modulating waveforms, with
        a strong high frequency content due to the discontinuities in the
        resulting modulated waveform.
 
        Note that by using ring modulation (not to mention sync) frequencies
        much much higher than than the upper frequency limit (~4000 Hz) of the
        frequency register may be generated.
 

/S08::0100h:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


                      --- Z80, The basics of it ---

                            by Raver/Phantasy


------------------------------------------------------------------------------
Introduction
------------------------------------------------------------------------------
 This article is a brief overview of the Z80 CPU processor.  Made by the people
at the American company ZILOG. It was and still is a very popular CPU.  Used
in many machines, from the early Cromenco's to the later Kaypro's and C128's,
in 1996 it is a prime workhorse in many microcontroller operations.

 The Z80 first saw action in a Commodore computer with the introduction of
the CP/M cartridge for the C64.  Later, CBM introduced the C128 home computer,
which has a built in Z80.  Both Z80 implementations are accurately regarded
as half-done, limiting the processor in many ways.  Focusing on the short-
comings however, would be the topic of another article.  Instead, I will
concentrate here on the Z80 itself rather than on how it interacts with
any given specific Commodore system or operating system protocol.  I hope
this will be of sufficient value for further exploration on your particular
system configuration.

------------------------------------------------------------------------------
The Z80 Registers.
------------------------------------------------------------------------------
 AF - can be only used as two 8bit registers, but push on stack and change to
alternative always both. &quot;A&quot; is 8bit accumulator, very useful register. Most
of operations can be done with &quot;A&quot;. &quot;F&quot; is flag register. There are &quot;C&quot;, &quot;Z&quot;,
&quot;P&quot;, &quot;V&quot; and &quot;S&quot; flags.

 BC - 16bit register, can be used as two 8bit registers &quot;B&quot; and &quot;C&quot;. It's 
usually used as &quot;back counter&quot;.

 DE - 16bit register, can be used as two 8bit registers &quot;D&quot; and &quot;E&quot;. It's
usually used as &quot;destination index&quot;, as register, who points to address of
destination.

 HL - 16bit register, can be used as two 8bit registers &quot;H&quot; and &quot;L&quot;. It's
very special register, there are lots of commands available only for this
register. It's sometimes called &quot;16bit accumulator&quot;.

 IX - 16bit register. It can be used as two 8bit registers &quot;XL&quot; and &quot;XH&quot; too,
but it's undocumented feature. That register have one very useful addressing
mode, but arn't widely used, cause it's slow (14-23 cycles).

 IY - the same as &quot;IX&quot;. The difference is two 8bit registers - &quot;YL&quot; and &quot;YH&quot;
for this one.

 SP - 16bit register. &quot;Stack pointer&quot;, points to memory location, used as start
of stack. Stack can be pointed to every memory location (#0000 - #FFFF).

 I - 8bit register, which points to interrupt.

 R - 8bit register for memory regenerating.

 PC - 16bit register, &quot;program counter&quot;, what points to address, where are next
executing command.

! Z80 has two independent sets of registers: &quot;AF&quot;, &quot;BC&quot;, &quot;DE&quot;, &quot;HL&quot;. They can
  be changed by EXX registers &quot;BC&quot;, &quot;DE&quot;, &quot;HL&quot; to &quot;BC'&quot;, &quot;DE'&quot;, &quot;HL'&quot; and by
  EX AF, AF' register &quot;AF&quot; to &quot;AF'&quot;. Values of other register set will be saved.
  Processor don't know, with which one of two sets it works now.

-------------------------------------------------------------------------------
Commands: What moves numbers in registers and memory?
------------------------------------------------------------------------------- 
 LD A,#04 - moves 4 into register &quot;A&quot;

 LD HL,#4000 - moves 16384 into register &quot;HL&quot;

 LD (#C000),A - moves value of register &quot;A&quot; into memory location 49152

 LD (HL),B - moves value of register &quot;B&quot; into memory location pointed by &quot;HL&quot;

 LD A,(HL) - moves value, which is held in memory location pointed by &quot;HL&quot;,
into register &quot;A&quot;

 LD (IY+#03),A - moves value of register &quot;A&quot; into memory location, pointed by
register &quot;IY&quot; +3. This addressing mode is only for &quot;IX&quot; and &quot;IY&quot;.

------------------------------------------------------------------------------- 
Commands: What moves blocks of bytes?
-------------------------------------------------------------------------------
 LDIR - very cool command, moves block of bytes pointed by &quot;HL&quot; to memory 
location pointed by &quot;DE&quot;. The lenght of block is in &quot;BC&quot;.

 Example:

                  LD HL,SOURCE
                  LD DE,DESTINATION
                  LD BC,LENGHT
                  LDIR
 
 It's fully automatic, but you can do it manualy by replacing LDIR with a 
lots of LDI - it's much faster! There is another block command LDDR, the 
difference is: LDIR moves blocks from start to end, LDDR moves them from end
to start.

 Also, there are commands for searching block of bytes in memory and commands
to put in port block of bytes and take from port block of bytes.

-------------------------------------------------------------------------------
The Stack.
-------------------------------------------------------------------------------
  Stack is very useful on Z80. It's pointed by register &quot;SP&quot; and can be located 
anywhere you want, because &quot;SP&quot; is a 16bit reg!  (Note : In the 65xx series
CPU, the SP (Stack Pointer) is merely an 8bit offset of page 1 ($01xx).  This
is why the 65xx stack is limited to page 1).

 Stack is used for commands like CALL, it pushes on stack return address, which
is later used by an RET. The stack can be used as a very fast block-byte mover
and buffer refresher, for example.

 Commands for stack using are PUSH and POP. PUSH puts 16bit value of registers
on stack and POP pops 16bit value from stack. Remember, the stack can be of
any 16bit (0-65535) size and placed anywhere.

-------------------------------------------------------------------------------
Interrupts.
-------------------------------------------------------------------------------
  Z80 has two interrupt modes - NMI and INT. NMI is a non-maskable interrupt
and INT is maskable. NMI defines the main hardware interrupts and generally,
they can not be used by coder. Fortunately, INT can be used by coder and 
register I holds value of interrupt vector. There is IM0, IM1 and IM2 mode of
INT. Rather use have IM2 mode. Command to return from intrrupt routine on Z80
is RETI.

-------------------------------------------------------------------------------
Port control.
-------------------------------------------------------------------------------
 The commands to control port are: OUT and IN. OUT writes value to port, but IN
reads value from it. All controling of music processors, disk controller and
RAM pages swithching is done by OUT. But some, for example to check, if key is
pressed, you must use command IN. There can be following combinations of IN:

 LD A,high value of port address
 IN A,(low value of port address)

or

 LD BC,full 16bit port address
 IN A,(C)

and for OUT:

 LD A,value to send to port
 LD C,high value of port address
 OUT (low value of port address),A

or

 LD A,value to send to port
 LD BC,full 16bit port adress
 OUT (C),A


 There is more to the Z80 of course (Flags, etc.), but this should get you
started.  Worthy texts on Z80 ML include works by Rodnay Zaks or Kathe
Spracklen (co-author of Sargon chess).  These and a bit of hard gumption
will yield great rewards with Z80, as with any human endeavour persued
at length. :)

Raver
--
For questions or comments on this article, Raver may be reached at the
following internet address : raver@10mb.com


:::::::::::d:i:s:C=:o:v:e:r:y:::::::::::::::::i:s:s:u:e::2::::::::::::::::::::
\H01::::::::::::::::::::::::::H:A:R:D:W:A:R:E:::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


                                Charger up!

            The VIC-20 to ATARI 2600 'Ram Cartridge' Programmer 
             -----+-------+----------+----------+-------+-----
                 by  Ravid Noam (nravid@newton.bgu.ac.il)


A while back, I was searching the internet and found several hundred ROM
images for the Atari 2600 video computer system.  I also found a couple of
ways to transfer the images to the 2600, but none used a Commodore computer
as a host.  Seeing that my own VIC-20 was equipped with sufficient hardware
to become a host, I set about the task of devising a VIC-20 --&gt; Atari 2600
programming interface.  This article includes the instructions on how to
build it.  Be warned that most of the wiring is in schematics (.gif format-
-two of the .uue's at the end of this article) so you do need to have the
ability to read and carry out a schematic.  In this text, I will attempt
to outline some of the more salient points required to build the interface
and thereby ease the process.  As with all hardware projects, you undertake
this at your own risk.  Neither myself nor the staff of disC=overy is
responsible for any use or misuse of the information presented in this
article.
--

  What you need to own:

   - Atari 2600 video game.

   - Commodore Vic20 plus ram expansion of 8k or more. If you don't have 8k
     expansion, read the notes about the basic program included in this
     document.

   - Commodore 1540/1541/1571 disk drive, or other model compatible with the
     Vic20. A tape drive can be used instead, but you have to change the device
     numb. from 8 to 1 in the basic program running on the Vic. The &quot;8&quot; appears
     three times in the program.


  What you have to build:

      RAM CARTRIDGE
      -------------
 It's like a regular 2600 cartridge, but with the rom chip replaced by
a 32k cmos ram chip, plus backup battery and some additional parts.
The ram cart is plugged directly to the atari like a real cartridge.
To load games to the ram, the cart has to be plugged to the main
circuit. The ram cart can hold up to 16 games of 2k or 8 games of 4k
length.

&lt;Note : Schematic for the ram cartridge is in CART.GIF&gt;

  Components description:

  - U1 : ...62..256... - the name isn't important. Has to be a 32k by 8bit
         static ram memory device, with access time lower than 200 nano-seconds
         and low-power data retention ability, i.e. ability to remember the
         data when the operating voltage is falling to 1.5V or lower. Most
         CMOS chips have these capabilities. It has to come in the standard
         28 pin dual-in-line package.

    32k static ram pinout diagram:
             ________
      A14  -|1     28|- Vcc           Vcc - operating voltage +5V,
      A12  -|2     27|- R/W            or 1.5V in sdandby mode.
      A7   -|3     26|- A13             _
      A6   -|4     25|- A8            R/W - read/write select
      A5   -|5     24|- A9             0 - write , 1- read
      A4   -|6     23|- A11           __
      A3   -|7     22|- OE            OE - Output Enable, active low
      A2   -|8     21|- A10           __
      A1   -|9     20|- CS            CS - Chip Select, active low
      A0   -|10    19|- D7
      D0   -|11    18|- D6            A0..A14 - adrress lines
      D1   -|12    17|- D5
      D2   -|13    16|- D4            D0..D7 - data lines
    ground -|14    15|- D3
             --------                 ground - common ground


  - U2 : CMOS 4011 - quad two-input nand gate, 14 pin IC.
       In this circuit and in the main circuit, it can be replaced by a CMOS
       hex inverter or by NPN transistor + 2 resistors -- implementation for
       each inverter. I used 4011 because I have many of this kind.

  - Q1 : 2N2222. Can be replaced by any silicon NPN small signal
         transistor with these ratings :
         Vce(max) &gt; 10V , Ic(max) &gt; 30mA , Hfe(min) &gt; 100 .

  - D1 : 1N4001. Can be replaced by any similar rectifier diode.

  - D2 : 1N4148 , or similar.

  - C1 : 100 micro-farad , 10V, electrolithic capacitor.

  - R1 : 22 kilo-ohm resistor .

  - R2 : 10 kilo-ohm resistor .

  - R3 : 500 kilo-ohm resistor .

  - R4 : 50 kilo-ohm resistor .
  
  All resistors are small power resistors. 0.125 Watt type should be big
  enough.

  - BAT1 : 3.6V Nickel-Cadmium rechargable battery. The same as the CMOS-RAM
         backup battery inside the IBM-PCs. It can be soldered into a printed
         circuit.

  - S1...S5 : two-position switch.

  - PCB edge connector : The ram cartridge has to be plugged to the Atari like
      a regular cartridge, so it must end with double-side printed circuit
      edge connector, with 24 contacts, 12 on each side, and with the same size
      as of a regular cartridge edge connector.
        The Connector can be an old atari cartridge as the PCB connector. Just
      remove the rom chip and connect the old cart to the rest of the ram
      cartridge circuit by wires. Using one or two flat-cables instead of 24
      seperate wires will give a nicer look.
        Another option is that the connector and the rest of the cartridge can
      be on the same printed circuit. I know There are EPROM cartridges made
      for the Atari2600, where instead of the rom they have socket for eprom
      chip, plus the 4011 chip. The whole ram-cartridge can be built on this
      platform, saving a lot of wiring work.

    - &gt;&gt; Important notes &lt;&lt; -

         1. When using one of these options, remember to disconnect the ground
          (contact 13) from the signal ground (contact 12), as the latter one
          is the read/write control.

         2. It is strongly advised that the ram cart is made in a way obtaining
          only one possible way to plug in the cartridge, Otherwise, every time
          you plug it to the atary or to the main circuit, you have to be
          carefull not to plug it the wrong way, i.e. upside down - this can
          cause permanent damage.

    Edge-connector diagram :
    (looking at the edge connectors of an atari cartridge, when the cartridge's
    big label is up)

    D3   D4   D5   D6   D7   A11  A10  A12  A9   A8  +5V   SGND   up side
     1    2    3    4    5     6    7   8    9   10   11   12
    ----------------------------------------------------------- printed circuit
    13   14   15   16   17   18   19   20   21   22   23   24
    GND  D2   D1   D0   A0   A1   A2   A3   A4   A5   A6   A7     down side


  Functional description:
  (you don't have to read this if the schematic is clear to you)

  - CS inverter: the nand gate in the lower-right corner - invert the
   active-high chip select signal from the atari to the standard low-active
   signal used on memory chips.

  - chip select protection: R3,R4,Q1 - lock the ram when the power is down, ie.
    when Atari is off. R1 and the CS inverter also contribute to this task.

  - R/W inverter: the upper nand gate. Like with the chip select, converts
   active-high to active-low.

  - back-up section : the battery BAT1 feeds the ram and the 4011 when the
   external 5V is down. R2 recharges the battery when power is up, and pass on
   the stand-by current from the battery when power is down. D2 and C1 improves
   the power supply in transition times.

  - s3,s4 and s5 : select one of the eight 4k blocks avilable.

  - s1: 4k-mode / 2k-mode selection.

  - s2: in 2k-mode - select which one of the 2k-blocks is used.


  Notes:

   Build the cart in a way you can hold it in your hands without touching the
  metal parts. Shorting something with your fingers can lead to data lost.
  If the circuit seems too complicated, there are some ways to simplify it:

  - The rechargable battery. Can be replaced by a cheaper non-rechargable
   battery, and the resistor R2 has to be removed, to prevent charging.
   Remember that the 4011 chip must receive minimum 3V operating voltage, and
   plus the voltage drop over D2, we get minimum voltage of 3.6 that the
   battery must supply. Battery that consists of three 1.5V (=4.5) cells is
   applicable, but isn't a common thing. In theory, a 3.0V or even 1.5V battery
   can be used, since most of the cmos ram chips can retain their data under
   1.5, 1.0 or even 0.7V stand-by operating voltage. If the problem is with the
   4011, it can be replaced. Each one of the two gates used in this circuit
   can be replaced by a NPN transistor and two resistors, and this combination
   should function under 1.0V or even 0.8V .

  - The chip select protection circuit: Q1, R3 and R4. Before the 3.6V battery,
   there was 2.4V battery. After some months, the cartridge became forgetful.
   Then I added these parts, but the problem didn't get solved. Only when the
   battery was replaced by the 3.6V one, the ram cart returned to function
   properly. It's probably the 4011 which decided to demand the 3.0V.
   Now, R3,R4 and Q1 seem useless, but I have decided not to remove them,
   because the data retention issue is too sensitive from being economized.
    If you want to check this, remove them and see if the ram cart still
   function. The CS pin of the ram has then to be connected directly to the
   output of the nand gate.

  - s3,s4 and s5 : If you use standard pin-compatible 8k ram chip instead of
   the 32k ram, you don't need s3 and s4. But then the cartridge can hold only
   two 4k atari games or four 2k games. s5 can be replaced by shorting A12 of
   the ram to ground or to +5V, but then the amount of data that can be stored
   on the chip is divided by two.

  - s1,s2 : After selecting the 4k bank by s3..s5, s1 is used to select between
   two options: one 4k game or two 2k games. In 2k mode, s2 selects between the
   two 2k banks. s1 and s2 can be omitted if you load the 2k games as 4k games-
   you load a 4k file which it's last 2k half is a copy of the first 2k half.
   In this case, the A11 pin of the ram should be connected directly to the A11
   incoming signal from the atari.


      THE MAIN CIRCUIT
      ----------------
  The task of the main circuit is to load games into the ram cartridge. Also,
  it can read to save the content of a real cartridge. The circuit is connected
  to the Vic20's user port.

  &lt;Note : Schematic for the main circuit is in MAIN.GIF&gt;

[Ed. Note : Assuming the VIC-20's user port is similar to the C64's user port,
   then my guess is that this portion of the project could be adapted to the
   C-64 with some minor hardware and software revisions.  Any takers? ]

  Components description:

  - U1,U2,U3 : CMOS 4094 - shift register, 16 pin IC.

  - U4       : TTL 74LS165/74HCT165/74LSHCT165 - shift register, 16 pin IC.

  - U5       : CMOS 4011 - quad two-input nand gate, 14 pin IC.

  - Q2,Q4    : 2N2222. Can be replaced by any silicon NPN small signal
               transistor with these ratings :
                Vce(max) &gt; 10V , Ic(max) &gt; 30mA , Hfe(min) &gt; 100 .

  - Q1       : 2N2907. Can be replaced by any silicon PNP small signal
               transistor with the ratings of Q2 and Q4.

  - Q3       : 2N2905. Can be replaced by any silicon PNP transistor, with
               these ratings :
                Vce(max) &gt; 10V , Ic(max) &gt; 300mA , Hfe(min) &gt; 50 ,
                metal package (TO-3,TO-5 etc).

  - LED      : any common small (2mm size) visible LED. The LED and its
              resistor R9 are optional.

  - R1,R2,R3,R6,R8 : 22 kilo-ohm resistor .

  - R4,R7          : 1 kilo-ohm resistor.

  - R5             : 220 kilo-ohm resistor.

  - R9             : 5 kilo-ohm resistor.

  All resistors are small power resistors. 0.125 Watt type should be big
  enough.

  -  Vic20 User Port interface : The user port in the Vic20 is a double-side
    printed circuit edge connector, with 24 contacts, 12 on each side. The
    interface is a female connector in the same size which can be plagged on
    it, and contacted to the main board by 8 wires.
     Be careful not to plug the interface to the Vic20 the wrong way,
    i.e. replacing the top side with the bottom side. Such a mistake can
    damage the VIA-6522 on your Vic20 or some parts in the external circuit.
    Write &quot;top&quot; on the top side of the female connector or, if you have time,
    you can shape two little plastic parts and insert them in the female
    connector, against the two a-symetric slots in the user-port edge
    connector. This will prevent you from doing such a dangerous mistake.

  -  Atari2600 cartridge interface : exactly like the one in the Atari - a
    female PCB connector with 24 contacts, 12 on each side. like in the case
    of the VIC's user port, it is recomended to ensure that there is only one
    way to plug in the ram cartridge or the regular atari2600 cartridge.
      The easiest way to obtain this interface is to take it out of old Atari
    video game cart. Then the interface can include its plastic housing which
    eliminates the possibility to insert a cartridge the wrong way. You can use
    the entire case of the atari cart. to hold the main circuit inside.


  Functional description:
  (you don't have to read this if the schematic is clear to you)

  - U1, U2 and U3 : three 8 bit serial to parallel shift registers, which
   spreads the serial signals from CB1 and CB2 to 20 bits word - 8 bit data out
   + 12 bit adrress.

  - U4 : converts the parallel data byte read from the cartridge to serial data
   sent to CB2 under control of CB1.

  - chip-select inverter - the lower nand gate inverts active-low chip select
   signal from PB0 to active-high one needed for the Atari cart. Although PB0
   is software programmable and can produce active-low signal, the default
   position of it (i.e. after turning on the Vic20 or hitting RUN/STOP+RESTORE)
   is high. Also this gate isolates the vic from the plugged card - you can
   never know what you plug in, so this method of operation is prefered.

  - Q4, R5 and R6 : Q4 and R5 enables U4 to send data to the serial line CB2
   when PB7 is in read mode. Otherwise CB2 is used to send data to the 4094s.
   R6 is pull-up resistor for data coming from U4.

  - read/write inverter: the upper nand gate - similar to the chip select
   inverter (default position,isolation).

  - R7, R8: this voltage divider protects the nand gate from overload when PB7
   is in write mode and a real cart is plugged. R8 is also pull-down resistor
   for the read/write in the ram cart.

  - power control: Q1, Q2, Q3, R1, R2, R3 and R4 amplifies the 0.2mA control
   current from PB5 to the current consumed by the main circuit and the
   cartridge.

  Notes:

  - The LED isn't necessary, but it helps you know when the main circuit is
   turned off - when it's on, you are not allowed to plug in or out the
   cartridge.

  - The ground sign on the schematic doesn't mean physical grounding. It means
   that everything ended with it is connected with each other. It can be really
   grounded, but that depends on your Vic20's power supply.

  - The 4011 can be replaced. See the notes about the 4011 in the ram
    cartridge section of this document.

  - The power control can, theoriticaly, be reduced to R1,R2 and Q3 only. The
   base of Q3 is then connected to the hook up of R1 and R2, instead of the base
   of Q1. But the current amplification of Q3 has to be high. We don't want to
   overload PB5 and, Q3 has to be in its saturation area in order to output
   more than 4.8V, under load currents of 50mA, 100mA and more.
    If we don't chage R1, then I(PB5) = 0.2mA. The user port of the Vic20 is
   permitted to supply up to 100mA. Thus Hfe(min)= 100/0.2 = 500. Too high. The
   nominal active current of the main board and the ram cart is less than 50mA.
   Now we get Hfe(min)= 250. Still can't be obtained from every 2N2905-type
   transistor, according to the manofacturer data. But you can try it, it will
   probably work. A darlington transistor isn't suitable because it will give
   4.3V output, not enough for U4 and the memory chip on the cart.
    One transistor can be saved if PB5 turns into active-high instead of
   active-low. But then the circuit is automaticaly turned on when the VIA6522
   in the Vic is being reseted.


  The software part:

   The program which controls the ram-cart loading and the cartridge saving
  is a 3.5k Basic program, running on the Vic20. It uses 0.5k machine language
  program.

   The program files are:
   - ATARI14/C  the basic program.
   - ATARI MCP  the machine code program.

[Ed. Note : The uuencoded versions of these files will extract with these
   filenames.  If this is a problem for your host machine, please edit
   the filename field in the uuencoded versions at the end of this article.
   Please keep in mind that you should rename them (as seen above) on your
   VIC-20's drive.  Such action will prevent potential load-chaining problems.]

   The basic program is written for using a disk drive. If you have only tape,
  change the &quot;8&quot; device number in the basic program to 1. It appears three
  times: When loading games, when saving cartridge content and when loading the
  machine code program.
   Every time the program is runned, a checksum is made over the m.code program
  in memory, and only if the checksum fails, the m.code program is reloaded.
  Something i forgot - after reloading, the m.c. program isn't being checked-
  so it's downloading from the PC has to be done carefully. To check it, load
  first the machine code program with &quot;,8,1&quot; or &quot;,1,1&quot;, type &quot;NEW&quot;, and only
  then load and run the basic program. If the m.c. program isn't reloaded, then
  you know it had been downloaded properly.
   If the ram expansion on the vic is non volatile, the mc. program will remain
  in memory when the Vic is off. In the case of 16k+ ram expansion, the basic
  start can be raised to $4000 and then the basic program becomes non volatile
  too. In this case you have to change the memory settings in the program's
  first lines.

   The current memory configuration:
    $1000  4096 - $11FF  4095  : screen bytes
    $1200  4608 - $2DFF 11775  : basic program + variables
    $2E00 11776 - $2FFF 12287  : machine language code
    $3000 12288 - $3FFF 16383  : 4k game buffer

   It's possible to cancel the 4k buffer by transferring data between the
  disk and the cartridge byte by byte, and thus to compress the entire thing
  to an unexpanded Vic20. But It's not simple and limits the program's ability
  to grow up.


  Operating instructions:

    SAVING-CARTRIDGE CONTENT
    ------------------------
1. The main circuit has to be plugged to the Vic20's user port, before the Vic
  is turned on.

2. Run the basic program, if it is not already running.

3. Plug in the Atari2600 game cartridge.

4. From the main menu, select &quot;copy 2k&quot; / &quot;copy 4k&quot; with or without check.
  Before selecting, check that the cartridge is plugged in. DON'T plug it
  in or out when the vic is reading it. It is avdised to connect a LED
  (+ its resistor) to the main circuit, to see when it is powered on. Only when
  the power is off, the cartridge can be inserted or removed.

5. If you selected copy with check, the saved file will be reloaded &amp; compared
  with the cartridge content.

6. The cartridge content is now saved in a file. The format of the file is 2
  bytes - low and high byte of the start adrress of the buffer, followed by the
  content itself - 2048 or 4096 bytes.

7. Now you will be asked for continue. If yes, the procedure repeats itself in
  the same copy-type selection.

 Notes:

  - 2k games can be saved as 4k games, by choosing &quot;copy 4k&quot; on the menu.
   The 4k file following the start adrress will be a double image of a 2k game.

  - The saving proccess can be done with no cart plugged in without damaging
   anything. The saved file will be full of 255's ($FF).

  - You can hit RUN/STOP + RESTORE anytime and the main circuit will be
   turned off.

    LOADING GAMES TO THE RAM CARTRIDGE
    ----------------------------------
1. The main circuit has to be plugged to the Vic20's user port, before the Vic
  is turned on.

2. Run the basic program, if it's not already running.

3. Insert the ram cartridge, if it isn't already plugged in. DON'T  plug it
  in or out when the vic is writing to reading it. It is avdised to connect a
  LED (+ its resistor) to the main circuit, to see when it is powered on. Only
  when the power is off, the cartridge can be inserted or removed.

4. Select the desired switch combination on the ram-cart. Check that it is not
  the combination of an already loaded game, which you don't want to be
  overwritten.
   If loading 4k game,move s1 to 4k mode.  For a 2k game, move s1 to 2k mode
  and select (with s2) one of the 2k banks. s3, s4 and s5 selects between
  4k banks, and gives 8 combinations.

5. From the main menu, select &quot;load game&quot;. Type the name of the game and it
  will be loaded. No disk browser at this stage.

 Notes:

  - When loading 2k games which have been saved as 4k games, move s1 to 4k
   mode.

  - The loading proccess can be done with no cart plugged in without damaging
   anything.

  - You can hit RUN/STOP + RESTORE anytime and the main circuit will be
   turned off.


begin 644 atari14/c
M 1(&lt;$@$ CR!3059%(D P.D%405)),30O0R(L.  O$@( ES,V.#&lt;Y+#@ZF2(%
MDR( -1(% (\ 6!(+ (\@*BH@051!4DD@0T%34T545$4@34%.04=%4B J*@!&gt;
M$@P CP&quot;%$A0 ES4R+#0V.I&lt;U-BPT-CJ&lt;.H\@-TL@4D%-($9/4B!&quot;05-)0P&quot;0
M$C( C2 U,#8P ,@2/ &quot;+($*R,2&quot;G()DB15)23U(Z($-!3B=4($9)3D0@34%#
M2$E.12!#3T1%(%)/551)3D4B.I  U1)&amp; $U#LC$Q-S&lt;V .T24 &quot;&gt;($U#JC$U
M.H\@4$]715(@3T9&amp; /,27P&quot;/ /X2O@&quot;)(#(W,#  #Q-&gt; 8\@4D5!1&quot;!&quot;3$]#
M2P N$W(!ER X,C0L3$\ZER X,C4L2$DZCR!33U520T4 2A.&amp; 4A)LK4H5*TR
M-38I.DQ/LE2K,C4VK$A) &amp;D3D &amp;7(#@R-BQ,3SJ7(#@R-RQ(23J/(%1!4D=%
M5 &quot;'$YH!2$FRM2A,3JTR-38I.DQ/LDQ.JS(U-JQ(20&quot;F$Z0!ER X,C L3$\Z
MER X,C$L2$DZCR!,14Y'5$@ R!.N 8\@0T]062!&amp;4D]-($-!4U-%5$4@5$\@
M345-3U)9 -,3N &amp;&gt;($U#JC8 V1/&quot; 8X ZQ,F H\@5U))5$4@0DQ/0TL &quot;10Z
M DA)LK4H042M,C4V*3I,3[)!1*LR-3:L2$D *!1$ I&lt;@.#(V+$Q/.I&lt;@.#(W
M+$A).H\@4T]54D-% $043@)(2;*U*%2M,C4V*3I,3[)4JS(U-JQ(20!C%%@&quot;
MER X,C0L3$\ZER X,C4L2$DZCR!405)'150 @11B DA)LK4H3$ZM,C4V*3I,
M3[),3JLR-3:L2$D H!1L I&lt;@.#(P+$Q/.I&lt;@.#(Q+$A).H\@3$5.1U1( ,,4
M=@*/($-/4%D@1E)/32!-14U/4ED@5$\@4T4N(%!/4E0 SA2  IX@34.J,P#N
M%(H&quot;F2 BG2(@3$X@(D)95$53($-/35!,151%1&quot;XB /04E *.  @53 2/($=%
M5&quot;!&amp;24Q%($Y!344 (156!(L@3DTDLB(BIT(DLB(B.HDQ,3,P $D58 1&quot;)++(
M*&quot;*=G9V=G9V=G9V=G9V=G9V=G9TB+,,H3DTD*:HR*0!H%6H$F2)&amp;24Q%($Y!
M344@(&quot; B3DTD0B0[.H5.320 &gt;15T!(M.322R(B*G,3$Q, &quot;L%7X$3++#*$Y-
M)&quot;DZBTRQ,3:GF2)-05@N(#$V($Q%5%1%4E,B.DY-)+(B(CJ),3$Q, &quot;R%8@$
MC@#)%9P$F2)/550@3T8@4D%.1T61(CJ. . 5L 2/(%)%4T54($1)4TL@1%))
M5D4 _16Z!)\R+#@L,34ZA#(L0BQ&quot;)&quot;Q!+$$ZH#(ZC@ 7%CP%CR!3150@1DE,
M12!005)!345415)3 &quot;(61@6!0K(QI$P /!90!9&lt;T,#DUJD(LQBC**$Y-)&quot;Q&quot;
M+#$I*0!&quot;%EH%@@!&lt;%F0%ES&lt;X,&quot;Q,.I&lt;W.#$L,#J7-S@R+#$V '&lt;6;@6&gt;-C4T
M-CDZCR!3150@1DE,12!.04U% ) 6;P67-S@P+#$ZES&lt;X,2PX.I&lt;W.#(L, &quot;R
M%G %GC8U-#8V.H\@4T54($9)3$4C+$1%5B,L0T]-32, N!9S!8X PQ9X!8\@
M3$]!1 #.%H(%C2 Q,S0P .D6R 67-S@P+# ZES&lt;X,2Q,3SJ7-S@R+$A)   7
MT@6&gt;-C4T.3,ZCR!,3T%$($9)3$4 &amp;A?4!45/1K+&quot;*#&lt;X,2FJ,C4VK,(H-S@R
M*0 @%]&lt;%C@ K%]P%CR!3059% #87X067,30T+#  4A?F!8TQ,S0P.H\@4T54
M($9)3$4@4$%204TN &amp;P7\ 67-S@L3$\ZES&lt;Y+$A).I&lt;W.# L-S@ C!?Z!4A)
MLK4H14]&amp;K3(U-BDZ3$^R14]&amp;JS(U-JQ(20&quot;@%P0&amp;ES&lt;X,2Q,3SJ7-S@R+$A)
M +&lt;7#@:&gt;-C4T.38ZCR!3059%($9)3$4 O1&lt;8!HX VA= !H\@5T%)5$E.1R!&amp;
M3U(@2T59(%-44D]+10#Q%TH&amp;F2(1'1TM2$E4($%.62!+15DB  485 :A020Z
MBT$DLB(BIS$V,C  &quot;QA&gt;!HX &amp;1A\!H\@34534T5'10!;&amp;($&amp;F2(124Y315)4
M(%1(12 24D%-DB!#05-3151%04Y$(%-44DE+12!!3ED@2T59(&quot; @(%=(14X@
M4D5!1%DN(@!E&amp;(8&amp;B3$V,C  B1BB!H\@(&quot;!&gt;7EX@($5.1&quot;!/1B!354)23U1)
M3D53(&quot;!&gt;7EX CQBC!H\ M1@T&quot;(\@3$]!1&quot;!!5$%262!'04U%(%1/(%)!32!#
M05-3151410#$&amp;#D(F2*3(CJ-,38V, #.&amp;#X(C3$Q,#  X1A#&quot;)DB3$]!1$E.
M1R B3DTD /T82 A,3[(P.DA)LC0X.HTQ-# P.H\@3$]!1  '&amp;4T(C3(T,#  
M%QE2&quot;(M%4K(P(*&lt;R,38P # 95PB9(E1262!!1T%)3B _(&quot;A9+TXI(@!&amp;&amp;5P(
MH2!!)#J+022R(EDBIS(Q,C  5QEA&quot;(M!)+(B3B*G,C&lt;P, !A&amp;68(B3(Q-#  
MBQEP&quot;$%$LC$R,C@X.E2R,#I,3K)%3T:K042J,3J--34P.H\@5U))5$4 FQEZ
M&quot;(TQ-C P.HDR-S P + 98 F/($524D]2($A!3D1,24Y' +X990E%4K+&quot;*#&lt;X
M,&quot;D [AEO&quot;8M%4K(UIYDB15)23U(M(CJ9(D1%5DE#12!.3U0@4%)%4T5.5&quot;(Z
MB3(T.3  !1IT&quot;8TQ,C P.H\@4D53150@1$E32P =&amp;GX)BT(DLB)/2R*G15*R
M,#J),C0Y,  U&amp;H@)F2(115)23U(M(CJ90B0Z15*R0@ [&amp;KH)C@!3&amp;HP*CR J
M*BH@34%)3B!-14Y5(&quot;HJ*@!Q&amp;I8*F2*3(&quot;HJ($%405)9($-!4U-%5%1%(&quot;HJ
M(@&quot;'&amp;I@*F2(1$1T2,9(@0T]062 R2R( IQJ9&quot;IDB$1(=,I(@0T]062 R2R!7
M251(($-(14-+(@&quot;\&amp;IH*F2(1$ATSDB!#3U!9(#1+(@#&lt;&amp;IL*F2(1$ATTDB!#
M3U!9(#1+(%=)5$@@0TA%0TLB /,:G J9(A$2'4R2($Q/040@1T%-12( !1N=
M&quot;IDB$1(=49(@455)5&quot;( (!N&gt;&quot;IDB$1$@(&quot;!93U52($-(3TE#12 M/R( *1N@
M&quot;J$@020 .1NB&quot;HM!)+(B42(@IR&quot;  %D;I J+022R(C$BIR!,3K(R,#0X.D-+
MLC ZB3(W,S0 &gt;1NE&quot;HM!)+(B,B*G($Q.LC(P-#@Z0TNR,3J),C&lt;S- &quot;9&amp;Z8*
MBT$DLB(S(J&lt;@3$ZR-# Y-CI#2[(P.HDR-S,T +D;IPJ+022R(C0BIR!,3K(T
M,#DV.D-+LC$ZB3(W,S0 S!NH&quot;HM!)+(B3&quot;(@IR R,3 P -8;J0J),C&lt;R, #?
M&amp;ZX*F2*3(@ ?'*\*F2(124Y315)4($%405)9($-!4U-%5$4@($%.1&quot;!35%))
M2T4@04Y9($M%62 @(&quot;!72$5.(%)%0419+B( *ARR&quot;HT@,38R,  Z'.$*F2(1
M5T%)5&quot;XN+B( 4!SF&quot;DQ/LC Z2$FR,#I4LC$R,C@X &amp;&lt;&lt;\ J-(#,W,#J/(%)%
M040@0DQ/0TL ?ASZ&quot;HT@,3$P,#J/($9)3$4@3D%-10&quot;0'/\*F2)3059)3D&lt;@
M(DY-) &quot;L' 0+14]&amp;LC$R,C@WJDQ..DQ/LC Z2$FR-#@ O1P.&quot;XTQ-3 P.H\@
M4T%610#5'!@+C3(T,# ZCR!#2$5#2R!%4E)/4@#D'&quot;(+BT52LC&quot;G,CDP, #[
M'&quot;P+F2)44ED@04=!24X@*%DO3BDB !$=-@NA($$D.HM!)+(B62*G,C@Q,  B
M'4 +BT$DLB).(J&lt;R-S P &quot;P=2@N),C@W,  ^'50+BR!#2[(P(*&lt;@,CDW, !/
M'6@+CR!#2$5#2R!'04U% %D=&lt;@N-,38V, !J'88+5+(P.D%$LC$R,C@X 'T=
MBPN9(DQ/041)3D&lt;@(DY-) &quot;&amp;'9 +C34V, &quot;&gt;'9H+F2)#3TY424Y512 _(&quot;A9
M+TXI(@&quot;T':0+H2!!)#J+022R(EDBIS(W,S4 Q1VN&quot;XM!)+(B3B*G,C&lt;P, #/
M';,+B3(Y.#  U1W$$X\ \!W,$X\@4T54($-(14-+4U5-(%)/551)3D4 ]AW-
M$X\ )A[.$X$@0[(X,C@@I&quot; Y,# ZAR!&quot;.HL@0K*K,2&quot;G($*R,#I#LCDP,3J)
M(#4P-S( ,![/$Y&lt;@0RQ&quot; #8&gt;T!.&quot; 'D&gt;T1.#(#$V-2PQ-S(L-S(L,38U+#$W
M,RPW,BPQ,S0L,3&lt;R+#$S,BPQ-S,L,38Y+# L,38P+# L,C0L,3$S+#$W,@&quot;X
M'M(3@R Q-C8L,3&lt;R+#(P.&quot;PR+#$Y.&quot;PQ-S,L,3DX+#$W,BPQ-C8L,3&lt;S+#(R
M-&quot;PT-BPQ-S8L,C,W+#$W, #&lt;'M,3@R Q,#0L,3,S+#$W,RPQ,#0L,3,S+#$W
M,BPY-BPM,0#B'ND3CP $'^H3CR J*BH@3$]!1&quot;!!4U-%34),15(@0T]$12 J
M*BH &quot;A_K$X\ (1_L$Y&lt;@-S@Q+#(U-3J7(#&lt;X,BPT-P K'_83GB X,C@ 0Q\ 
M%(L@PB@W.#$ILC(R-R&quot;G(#4Q.#  5Q\*%$Y-)+(B051!4DD@34-0(@!D'P\4
M3++#*$Y-)&quot;D @!\4%$Q/LC Z2$FR-#8ZC3$T,# ZCR!,3T%$ )\?,A2+(,(H
C-S@S*:\@,2&quot;G((T@,C0P,#I&quot;LC$ZC@&quot;I'SP40K(P.HX   !$
 
end


begin 644 atari mcp
M &quot;Y,]2Y,-&quot;],2&quot;],3&quot;],IR],Q&quot;^I!*:KCAJ1+!V1\/NFK(X:D2P=D?#[IJV.
M&amp;I$L'9'P^ZT0D2G^C1&quot;1&quot;0&amp;-$)%@&gt;*D$IJR.&amp;I$L'9'P^Z:MCAJ1+!V1\/NI
M&quot;(T=D:T0D0F(C1&quot;1K1N1*&gt;.-&amp;Y&amp;JK1&quot;1*?Z-$)$IOXT0D0E C1&quot;1&quot;0&amp;-$)&amp;H
MK1V12(H)&quot;(T;D:X:D3AH*0CP 1BI!&quot;P=D?#[K1J1:H6KF&quot;EWC1&quot;1K1N1&quot;1&quot;-
M&amp;Y%88*(!M:RTKI6NE*S*$/5@K1&quot;1&quot;0&amp;-$)%@8&quot;#$+@E *7^-$)%,K&quot;ZM&amp;Y$I
M[XT;D2#$+@G C1&quot;18&quot;#U+B &lt;+TS.+B#Y_:T;D2G@&quot;0B-&amp;Y&amp;IQXT0D:G/C1*1
MK1R1*1\)((T&lt;D:D C38#8*('M*B]- .5J)B=- /*$/(88&quot;#;+DP&lt;+R#L+B&quot;G
M+Z  L:Z%JR 2+B!U+]#RJ0#P JD!A9,@[&quot;X@IR\@0&quot;ZEJZ  II/0!)&amp;N\ O1
MKO 'J1 @:O[0OB!U+]#AI:L89:J%JN:NT +FKR ;_::HT +&amp;J&lt;:HX '0#*:I
MT AH:&quot; N+TS$+V&quot;B,B&quot;6[\K0^F&quot;M$I$)((T2D:T0D2G?C1&quot;1()XO()XO()XO
M()XO8*G_C1&quot;1J2&quot;-$I%@                                        
3                            
 
end


begin 644 main.gif
M1TE&amp;.#=A0 +0 J(   4#!=O&lt;V_/S\Q&lt;8%^GHZ0\/#_S]_&quot;0B)&quot;P     0 +0
M @ #_VBZW/XPRDGK$Y(P['A?7-AH5LF0$.8I* N^ER%N\M*&gt;7QJOK;&lt;JOYKN
M%P0:;C7!:FF*-9^4HM$5D4*OV*QVR^UZ)QQ-42ED^9S,Y'2:AI#(-DGZW) B
MK32AU--;!U4P1W5@&gt;&quot;&quot;%A2\H3(!J1F]?45&lt;BB)&quot;5EI&gt;8F5PS1G!L.3)B-20:
M?3-S%WB+&lt;C*,H6554SV,B&amp;.M(X-0?;&quot;&gt;&lt;7I 2F=6JFN:6BJ&lt;D\7&amp;S,W.S\88
M -, 2@4 U]&lt;:U ! U]1&amp;UT;8TR_@&quot;]\%#.F!!M3J).\UT]\*W.+DV.'=,@ #
MU&quot;'H\7.7+Q&quot;W!&gt;4(E+-'#F%!=.&lt;(9%O(C9^K7$?4=;#X#O^%N&quot;,#I;')5PVB
M/H&lt;+!9!4X0\@)HH:[14(4^9@.V@X&lt;^K&lt;R&gt; D-@X+&quot;3*4UDWBP(3N!'U4:9&amp;A
M4Z%0&gt;\[LYU0A/XH#/T(-BG3AQZ53IQ%(P_5I.:89KW9C2A3ATWDE@RYS('&gt;H
M@8_ZVA(-,;5G47]FU08&amp;.&gt;&quot;IUDI8X:Z%X77@7)Z0(TOF@O&gt;HNKUWXPINNR9Q
M ZR&lt;Y6(XX#BP7G%MMVV..DV)9P\IZ99&amp;J[* :J=HMX;LM[AJ71H_Z@$!)^ :
MY]SNM!8=)UCWWMR&gt;6R-'W#PM%8&lt;R;T[&gt;SKU[K-J&lt;,P/=G/&quot;?PQO0N8T/K5EV
MYYFU&gt;6&gt;WFUR&amp;&lt;@!BOJKM9;P3]L__[=T5%GS_2&amp;,;0&lt;&amp;5]%]_URVCTC_\9!/6
M:ES1 U(=T0686'KV15C:%YXQI,A_8GEGXHDGKE!12&lt;BMR%!#_ZVC8(:#1850
M7\-5]*)&lt;%9[S5G0S02C3;]-U.-&amp;.6'TS'D%JW0?C!CJ:4]Q!6-G$&amp;I-) &gt;AC
MAC9%J=M+U0E%Q&amp;LHEMD%)5 0\Y@7/ATU8W.OU874EW2&amp;B(%1[M7IYI)0M0CG
MGSFT!N6?[+$W&amp;&quot;!V4J 0;\U5QJ&lt;[KOE((J!ZUO@;FYK!]J&amp;A@ICIZ9D-1I+'
MFJ.BR&lt;JD,=*(X%OU^56H&lt;S;*Q$&gt;EK+E)7TH9&lt;CK(24((ZNM^SL4G9G\&lt;%'#9
MI1+,N&quot;2'__)MP\(TA762*ZT;AD@=JZ(--^$HGW:[Q46):#=B!*6X8&quot;H8WE!8
M#:&lt;A\NK/B*JJJJE;U&quot;XF':RMULMJ30K&quot;4YFE'N+VJQX#EX%';Y-BP*&quot;@65;E
M%\ 0TVK)64V)*9^8/WFK\1.V;,!)@^&quot;V&lt;RX4&quot;=V7X\7M9B60FWF]&gt;-F.$-C$
M;,FVRN?G&lt;! JR*1ED@HB4 V.P@I3/&quot;[MC!^^%O2V+$RI?D97SII6&amp;'%+#$\,
M[5CS8D?44AMW'&lt;L''W_]&quot;&quot;RD&gt;I',J&amp;2?FDO8'&gt;O@BQ-JIRWWW+@88G &gt;HJ29
MPS&quot;2-+%*(Y]4,K(62+S0MM&gt;(IP!43U$T^;&quot;!')UER8B&gt;\. @VO^]8&amp;1W'7]T
M&gt;B&lt;@Z,%0.0Z_;%Y,YWYTJAW:-Q%AN,AOBQIJY;OXS3K@=) ]N&quot;Z:?PW([HES
M%T!/L $&gt;&lt;REA]3J/1(O3S;OST,.M.ZBHZ_TUQT[L CSV;E]O@NN=;Q\\].*/
M'YE*69Y#D5!R-FS/&lt; WC&quot;,DW*]9O__TDX:^__NGL[___^:,?_0!(P (:L&quot;(#
M/.#]$DB2 ?;O'1!4X(H$*,$*YB.!#.R9^;K6C:.8HT_N6PO][#./NZ#C3JP;
MF&lt;(LR,(#9K&quot;%,(RA#&amp;=(PQK:\(8'W&amp;#7BG60XHB!',5QVON&amp;F!2+J,.#H8J&gt;
M&amp;SQ7IC;HT &amp;%&gt;Z(4GS&amp;K*6KL:.YPE@G_T:&gt;S](&amp;@+]UX&amp;7YB$I//*3%NGBK?
MI]1HQ39^RXUIU CZ[$&amp;4#M;$:(QZUD*LLB[5O?&amp;,D\D&lt;'($QR$*:C9!L-.0E
M&amp;!'%7] $=G=;TR.SD$A,&quot;-*-(5.D)D&amp;UR?.YK05C@]NX8B&gt;(T772&gt;(/,Y&quot;E7
M&quot;;=*LO(+H=.&gt;Z4!!2LQMHELXS.7_^O?*7EK E;Y\0L7H-41B**AXB,A8V2H 
M3,&amp;M0Y,?&quot;J8T5S=-[I5MCF[;S&gt;&amp;$&amp;(O=I&amp;Z0T&gt;P6$5RG /DULIKH3&amp;&lt;%I 8I
M&lt;=2C@_&quot;4B49@%!0#)4&lt;M5SF64(13(!%EYYR(&quot;Z&gt;G%$%.$#AFDNI,J$(?&lt;!7B
MF:=YL;$CI-8B_]$^TA$^%,W(^[@VD&amp;U(I)S,&lt;]\3!8HB*YB&quot;CLM&lt;J$JKB8$!
MJ.@GRQDBPJI1C47%96=0\F+Z+'3,^)6C)*JIVDBAV&lt;R5&amp;M6-#&lt;VHSE0B$L9=
M!7U&lt;C)D/O3C'IM+KIFLI#,*F2-*23O(.+(B)O;!XU+)*LS]\O,L9P@B'(!+D
M0!:R6 D;JL7U?=$D3[$*4E-YPE9UU:R #28* %I%(F9@#:#\YBL :;Z_GJAV
M:#M*'0$:V,I:,7&lt;/&quot;)T.D'4[LSK6.QXDC@'^@2,D1LBRJ$TM=XHJF&lt;]V)[0@
MA53#/ C58:KVMKB]A!A8.QG7!C(I(K&amp;76[,(W(84&quot;6^Y3:Z9=,G&lt;^O]%BYKC
M\^UOPWBA(PQ@4&gt;_#;B&quot;*0(Z8*/&gt;[X(W ;-HHW&gt;U4U&quot;W+P&gt;&gt;*&lt;B:0 :8TO/!%
M[&lt;O F3C3RI28CGAD/(03W_Z&quot;M[Q&gt; [ GP:A,( )M&lt;&gt;?D8TS]R^#;&gt;A&gt;. H8,
M+8H!KQ7&gt;Y!$NA6Z#-[S2&quot;%\1FFXYA#&lt;Y3&amp;+/*M+#MF-39&lt;&quot;1C\4U-6PA+K&amp;,
M36Q(%/?NO=_C1P#$.@^(&gt;@,$&gt;6N _&amp;9,9(7:^%-'IJ4-V+@HFA#@N&lt;N9YXNR
M&gt;0[&gt;%OG* 3ZQ,TGWA2D=S5D:.))AE7&amp;&quot;$&gt;(8RVB&amp;L)8%EY42=OFZ1.Q@&amp;%Y8
M/_?Z,&lt;UX[F22EPN)YLV1LSFF5P#L^[[&lt;!4'_'GE.]&quot;KW7*8]J\C/#\Y&quot;T8B+
MOKI&quot;-*ZW&gt;(B5%&lt;WIWJX9,&lt;2T\;G&quot;0-$(':S3J!;GWNCFH4T[XR$'Q&lt;(,)&amp;M8
M:)B6LPM.M:ZWTTA21/)]9-U@0V6;N5#&amp;[&lt;EN%BDDC/NSV5(AU_UP&lt;B9&lt;O6L&amp;
M@_7.A\[,9:C-C+5HMW1W+D%:DPUJ9S6EJM%Z*BZZ6.UV[^1WTB.;G(&lt;K;/S6
M#7ACHZRD:^#2F4X9A!O8=A(/Z&gt;Z&quot;N^&amp;Y_6A!L$$Z3VX;(R3\&quot;&quot;JW(BT]..B;
M&quot;QY4TH7( &amp;^Z\!&lt;:PS.XP7O#*SP9+$R-+5Z&lt;'6*J,6PZO5&quot;%BP/O,&lt;&amp;5T7F&amp;
MAQ'YKNW($L]%\T&quot;8_QV?&quot;L#8XZARC]O&quot;[6*N30FY^3JC. [7N645QE3X,&lt;[C
M&quot;&amp;RN+NWL[&amp;%[RB4%P6;=A&amp; 496IBUE*O-M=W,]Z&gt;/I$12$S*1-C-06'NQ+;H
MRL(YHYYV/EMC&gt;5&gt;? CPEM[%&gt;\ J;=CP05&lt;[,C&amp;V&amp;.M8,?7I.H_&quot;#BX-M&gt;GU'
MYXSHU;PX''%XC,8)4%RAD6WD?*N&gt;[-T/AHUZ;C:C7' .W*]AW-FUR3[SP&lt;1L
MD ,?&gt;BKVQ#S#\&lt;2WO0/CW5]=W5;H?0DV=6^0,1-P-S ^[ED9Q&lt;,I7ODYN2D1
M#\?W%&amp;#:B8__*_9U$ _O6&lt;^J;ZT&amp;?[L__&gt;Y4E8A&amp;&lt;?J?-8SDE&lt;N&lt;-Q^/#/]'
MN!SY=5S2WL^@3&lt;&quot;Q?0:U3BI75XS5?E,T&gt;C?B,_!3/$V&amp;.*NW&amp;(B'7^-W!=&lt;W
M)-S&quot;30R3?#H14FOR4:0C4&quot;IB ][51WBG@)LD4?8G4B-F/JO'&gt;7%G7CU6,=QE
M=Z_V0I'64F2Q?'[A=72G@HUW.10'2(=01(%'1ORB=38T&lt;_43:B]R+F&quot;D#&gt;74
M/O3G;#9R: _D/Q2T0&quot;]H J@73LP7A#$3&gt;-@T9-3$?JB&amp;0G7S(9!E, BU*^IA
M51&amp;G= 6U1J'B:_;R@*U0A R%?$?$AUQC@&amp;.D/+%3'&quot;&amp;G60Z@&gt;(6 ;(PG&gt;!\4
M#,^T;A-P XY!&lt;K%U.D*8&quot;2CP$W541+813WU2#P+_(&quot;1R8$10B%)7Q2*%]U)E
M015A!((I&quot;(E_@5X((0U5IV$K=#0:Q(&amp;MYWJ%@&amp;+Q,(RR(2G0DBT-$ #C 5/@
MH&quot;07$8&gt;TMXG6%(A%9&quot;M-94&lt;_Q']T877$]6^=0E.+-SXQ47XR]T. QCC8M7\[
M4XI4T5:$8$)0M RUF&quot;4&quot;$$4QI0H1=PPS$4Y ,2XBR MP&gt;&amp;$W%FYJ6' L!FPN
M0'+G8#*-A RV!Y# %F8P&amp;!'P&amp;'B*Q5 CU&amp;;CD'X',DK?,7 6J6S;6 )HV 07
MY&quot;7!5PSL)G;2MUWFIS32N E)%5Q?!!N,%$+1(PHZJ3G8I7&amp;)XP-(%&amp;2^)CM9
M D8JQX#T9XQ*1E8=%0%E_U2)2W4%Y)B0%O@L_=&lt;Q&amp;LE,OE)[,&lt;E,RR@#0L**
M/043^$22,I*/,!!FR.&quot;'9J)PA&gt;8^_-42E(5&quot;&lt;,84=:AXZ/ ]ER%'T#6#R?)_
M#H!PQ_ A\TB.T=1%QI84H60YB^B 5]B5&gt;?&gt;(8^&gt;#+&gt;@?[4AXT05Q4+B'E+ '
M.V&quot;2\,.,8@@S$P!YX@4BVTB8P$4#)*&lt;1U^!2=JDG-&gt;-LE@&gt;9OQ1O9G-&gt;JEB&amp;
M7%EXAKB:!^5TD(%%2A6.Q-.;M7:*JW,NA'F8-AAC6'6-BQ.=..EL@&amp;F;*59.
MGFD&amp;&quot;5A^0&amp;&lt;E,&lt;,_3 A#&amp;&gt;0S?J96DBDX/(:$(EES^5-S-T&lt;/=!:-O.!=N\@K
M3/^&quot;&amp;M^8E^PY;$\V?QF5'/&quot;085,5;MC9-^Y31;4) 5QG7:59-[O5-&gt;-&quot;6UA8
MD-OX4&lt;-S7;&quot;Y52&quot;()L_I?1&lt;@G$M$3.!#81Y#:X6H4W+G40TU$PI!AP?J3-E 
M1[5E'@M:@&quot;\&amp;*0?3&gt;0P&quot;DI)1.)=X)_NHF!&lt;H&quot;=]749;S)NMTD=Q$!EH4&quot;&gt;=Y
M&quot;B/@1(M1&amp;2&gt;X&gt;(*B3T_F$ZIHH08'4&gt;S(GC?*@1T2=/QI+-*P#7%H)DPQ/!*)
M$D-&quot;A=O1&lt;;=W7]IECQ[9?Y9X30%GIFGSC,HFHKX0 I7W&amp;2CDI3HWDW=Q&amp;TST
M:CVFF&amp;SI?D(0B&quot;YFD7Z:$R&amp;S!T%4+'WIHR%)HH?%&gt;4S_RGAB%PC&amp;)DA1-*8Q
MN@:#AI#5V3?*D%C]!ZEOF8 \825NJ(GFA1=)&quot; =L1RJFR:!I\XM5X!C7UDH=
M 'X&gt;XP*$A4JKF@7UH!K[&gt;(Z4J8$/&gt;HW)F2+RMI$.&lt;:6O98M7E34!FBSO-9JW
MV:#:^'QQP#=Y5SW/ZBUQ1X8R92U9]F/MF#Y3H:J6@&quot;/?QH)%]&quot;CD*BKFJF0R
MZ#U2BJCO.E!RII@,RYMI&quot;8.I.%Q%2C)WE&quot;/(A U.2&amp;=S9S]2-JNKQJ,^JEGZ
MFK!Z-ELY]P )!&quot;'Q.9X*Q%[V.EN)&gt;7&gt;'VA0296X+5RY7R09\\:2N9RYEB'[D
M$H\(2[*/I2/J* 6(64KC$W(5__B6Q(JIL&amp;6OE\@RP:A89.!U/1MVL3E&lt;4W$V
M$$FT1P5;0+N(]?BGM@I:RZ,.8C6T?G$L+-9YE&gt;:7=#%*GH&quot;U(1EQ:AN:WJ!@
M&quot;/(DO0BV&quot;65:Q'*:=S.ROZ5%GWB&gt;OV6@9\.+CDFX#6FW]A:U[,F&gt;/7&gt;)Y :X
M&quot;968&gt;&lt;HXA25%:%FJDLH$LA1GP-=(P6J( \L0^MD1=1B;53AQ *BY@*5*;L&gt;V
ML@:)&lt;V&amp;XF7!K!,9Z+\N;IR:2+EBJN&quot;A&amp;=V5TE4F[WS6QK150X%JY$O6=K+:D
MQ%L:='5&quot;5:5^N*BB&lt;L&gt;\\&gt;6\^N&lt;U9PB/5^N+&amp;6:@Q%N&quot;UVNHA58BM+EBSB$H
MN N^P?\COL,I@4,:*2P#?\L4J5CJL)\)G;/$&lt;1O N_:;3OA[J_6E;-B[I0$D
MGBE+G-DJ4IG45&quot;^:0F&amp;#P D&lt;3 M\=S_9+^&lt;+5#7[.KPYE-JE?2/9/23@L@,I
M&quot;QV&lt;7!^L$S-L-F5$BF^UFY0  &quot;$WDFZUNI&gt;C!J5Q;:H4PZE5PSB!Q)3D&quot;'%0
M..^W3&quot;$A NL)Q,MIG*(S!.EIQ-.DQ 'H-4Y,KLQYFMCJL&lt;M7J+&gt;IQ4&gt;,29-8
M8S@XJY);P7\X06A&lt;8ES&lt;#';)LLWU#&lt; 'AH3KO9\:F00[Q_]52$4\12W9QRO\
MQL0; Q51R(*L7'5L2&lt;KZ=OOFL(HL76KRR.$5R6=G5 )%:&quot;O_++!!P&lt;&amp;:O%&quot;&lt;
M?%N.'+!N7,&amp;.Y8ZD0\JEK,!J_)C!HZ^??%4&quot;G&amp;)#&amp;&lt;O-&quot;[ZW?%]D;'ZTS,N6
M=&lt;I8]LM^/+O$C&amp;?&amp;?&amp;7(?,G+C&amp;K-7&amp;3/S,K1W&amp;G33&amp;35W+[7K&amp;C9/&amp;/;3,7=
M?,R^W,?0/,YY]LTR%LZYC,[.7,Z6;,WNG&amp;;J3,?F+,\2&quot; UWV'+#C,;U7+O(
M&amp;&lt;IDRLU&gt;'-!&gt;&lt; =XT+D&amp;'&lt;/_3'&quot;$/#CL',P:X\K&amp;@+-8G*Y9G, -S04*AL=:
M9RP+&amp;M$&quot;/=$W\IXX%T%;N#(\HG+J6\H;31F*-'S6N\H$'&lt;*I+&amp;L^D,GP6&amp; O
M76T];3V+O$&amp;^VL:)C,_D&quot;\==X); _Q84,VI_X*C0FOS3W].S:@::\5S3]&gt;5J
M4WE&gt;3-5D4VPL3^O2AD1O@U22JES46+U#00UJ&amp;K5_1G2&amp; ='/,;D]JU&amp;1&amp;Y./
M'&lt;NG&lt;ZJNN1AO(G&amp;#P#S2]&gt;H,1]12Y1=:6Y.YL%QP%X&gt;T.K5'&gt;%@KQ10$A\P3
M= &quot;8,&lt;&lt;B^-FD RW.=6?'_&gt;F Z96@1IRJ!OACU2&quot;8300,WC6@EQV/)'V&lt;ZQ,^
M&quot;,/2YQQ=2&gt;QFPU88=WQS8$NGN)E=^#K*\-HK8XL10[N=KN-!XR;13MW.@^VH
MK-L*Y%!^ &quot;75X&gt;6(1G-.7H?! S6I=Y4E$@&lt;YH+4X3&lt;TD0SU$&gt;:UP]HC+SGW7
MT+#+90M%M/^&amp;%EB#W9N\K7\I,^/U=562PN JTY:];;H)A&quot;IP &amp;,AN4!KVT;=
MP$.HT&amp;BG$ ,:9XLM&lt;CP78AXX/?3):^/2&gt;4EWB]QA$?UFB]@Z)?/T@C'G&quot;J!,
MU=%M&quot;450.S%H6$ 7&lt;R1+=4KG/![=A/B3BG^;OP;.W,P';EYVF.XMV)\M&amp;6Q8
M3O@EL9J[=BUM6(J8SUAHN=G&lt;06JZ4?;:A5M8GFCMV?#=99G5S\)%5;(EY250
MOPS\=P3(FY*3$FC..:&amp;6UXFG$E,YIZ8%9M_I&quot;HN9(W/&quot;X]!]Y%HP(QU]&quot;R9I
M(&quot;?.*/A]'1=LRI&quot;63#M=7!S44%R$0GY[LI;M9K![3]P*=?A89;S_U^#0&gt;PS 
MN9H4G33+&gt;I;X'3[;Z:FG!-$&lt;1Z%L:@@6@8L(@UWP]N;9&lt;W6'D&gt;$J6&gt;0L#NB5
MW$Y/&lt;J/OD-+@J4,WW4M[I\H'%=8F&lt;J5A2CZ22NA5($&gt;?U=]8Z.4?EKMQQKX4
M.WM@G&gt;@6Q^KK*DU/?'@_NQ;SYRWGZQJB:B%,88J3(7%XA*M]!:P;Z.?OO&gt;U+
M''?';&gt;IQ!E2BF\]M@^NBMYLP689=,HLHTA#L$*\O8-8Z072%IMU J&quot;B+O.)_
M#.Q8$%IU#II&amp;07426^&amp;OIZ[)&gt;+:@F\R(/!&lt;&amp;#]N_0_%BY^Q4!'D0OU/V68QX
MI_'*_.48ITSKAX-S5'[__G6^#J?&gt;^$HT_WE/XJ?2.:[C-5^K)A_(5U T4#&lt;D
M?LG=GO[I:=WBV6D\22Y,S&lt;.SB5ZAG1&amp;]7SC61D/GNWF5DZRMC^2D6T2/;WW&amp;
MP;T)79M&gt;'[6,3*\_5ZWMQ8V@?U!0IJ+NH]V)+&lt;_(&lt;P57L&lt;962G[XEH2*J#@W
M&lt;4'@%D'R!^V^&amp;*.W&amp;6@&quot;+4G*=4@O&amp;&amp;KM+TR:&gt;QK8O\[S')/&quot;##-\TE42[\1B
M].#XNV)&quot;YF:&lt;0+C+)8NE)^&amp;!2;7F_GU?-(L-'M'U?J1&amp;7TD&amp;:XM2ZB@SBW7S
M^F[DJ&quot;],%]\JX0'PL'WLQ&gt;W695],8W]+EV3 4E5&quot;81_K;F9I0K2FE2CU8'XW
MS0-\)$CJG?WGT?_/Q]J7]RYHDED7[@\1W=0XKO$S%@A@NMS^,,I)*R-&amp;Y$W+
M!HL &quot;)IEGF9I$!X#L JF8FFEHA$YE02XC@8 H-70@'BNA&lt;_G8.*&gt;T(HS5&lt; ,
M,LR7PE&lt;B6J8*E5 8+9LW!1Z0+&quot;B,/2+A[4ROXXAN-[BQY'CM@ QS/BT@3GHA
M0P&amp;!@&quot;5C6X]&amp;'WPA&amp;VTT34I;$'N,GI1/0X\@&amp;%E\F%*0-SH&amp;?Y^&gt;&amp;B6QE96R
M%V&amp;ON72FMYQQ&lt;F-.&lt;[I1CT%]F\EI%:BF;61V*B*38%R%6W.E'*!!R9G$Q)TV
M04:.FDG#$8:;MI+@[ZP/Z&gt;]GJ((.\_CKQ] 2XK/T/DUCU^V(!3%*!G;_\\3$
M0S4%&gt;HP,L)5!3R=&gt;%P.^6H;#',0A+IJAV.&lt;%H&lt;8HTB#8XY&quot;O&quot;+&amp;6^%C26N1R
M6P,:(*I0RA?,8L]@0(,*'4JTJ-&amp;@/O-H 5+0&amp;$PTFDPR,A6I8HQ&gt;]T0=&amp;70N
MXTDHZ20]W;'&quot;YIRQ2?C)$_&lt;UQRP-*^_1JHFK;$&quot; -VG!C!O!IZ K$CQ@H &amp;W
M;ML4*4LL&lt;E;0HP0:/&lt;YYFZJ)J1*M0GT&amp;F[MPH=?#*--&quot;B8O$#*G)*S3  4W6
M,&amp;&amp;[$BC.'&lt;@W6@1M-G,\F5:.HT%.&amp;08&lt;8EV, RD?+*;MZRPEED&amp;.#!=X &quot;RF
M=$Q(T.QA!$Y\W ,&quot;&quot;D_,P+5W)*0'F[NWKHT7_]4P&gt;R6)V7/L6K=&lt;=5&amp;-^1-A
MI)06SNJAET4!BT&quot;GGWX4&quot; !#,FS1(8(;6 CA6Q&amp;K?(-79\A\$V -TAE $R K
MH24:9P4@LB$#RRP!X3%8M/(;=I=A0P:&quot;NCB&quot;'&quot;*&amp;K%.B?V$80^,)KW$'T22&amp;
MG&lt;A9'W&quot;\V)EL-DA(PAL-EC%8)9B,$,]CG6G7E9!&amp;3F!19*&amp;95:0E)P@EG%!=
M,LA&lt;'T/($$P;FR&quot;)7&quot;LB.M@CG.3TTZ::3/ 'X#T4U;93*^!ADZ8\&amp;TS$SW(+
MN/&gt;4=67!56&lt;]&amp;[B)Z%6&quot;B+,=&gt;H?6Y-$(@*&amp;0DEYTC93-55H=BHP&lt;BQ**Z99+
M\$9D0&quot;S,V*(30!@QAO]J640I64(3Q&quot;K:I%])Y9D+(/U&quot;AJ !SM/G%V-BB-JO
MG5YX;&amp;@B3GI$/S+Y&gt;EB&amp;=/8)QJ?D%,0-L5&quot;DV(URC7KQ[&amp;1*&lt;LFBESU$\F.G
M$6XJZSI!XNL/J?\*&quot;&gt;Z(U;I$2&amp;ZM@;..&quot;''%VU8ZH[#JX@JN2*?GP,PQ6T8L
M]:X!X9PO5+D$-+M2$!E3:3B&lt;5EC1-NN #+CP J&lt;0PK5\$EYH&gt;4NP:!A/ZV\7
M&lt;.7T*82\ZES'MGN0H)-Z9]55&amp;I/&lt;&gt; ?.,*,&quot;#&quot;D.^RS%K$6:'&gt;7UUV 3I5G7
M&gt;)RC8+DG0BUDTYP*[#-S^-X IKEQFM-&quot;&gt;.%&lt;RQ6Z+_UI0JBP2?V)#!5&gt;&gt;M__
MRQ-T/*,&gt;@N'7,M]WU6(3$8P19&amp;3.%MO\MK1P4WLHRZTLQ!]T:&amp;OTPA$#--RE
MH++EHS%6N8S7]I_]7N?VK/C5:R/D#T,BG Y6!@&amp;#0X[P+E&quot;9F\SM^.P]=YXF
M9E&quot;2W(:-O1J]RWD.6.3R?87O=KCFKY!@2\6!(SJ6S'B6+QT!@*7LCO$:+4AY
MS&amp;P&lt;0[J_W+6@$T_+-V_]84N[$IW891&gt;\629O.1 %^1ZF%:Y!J6M%&lt;: $)024
MONF#9 RJWZL0EI?&lt;U,Y&quot;=#M@I]Q3KG(4\%GP&quot;\0OU,&gt;=%;9$4UN:';[&amp;U2-+
M)2]T!OE?&amp;:#'PWNUQ0JR0&lt;7K0L VF5SM&gt;/=)4NC,_T41JKTBAVK&quot;GSS&lt;Y;?+
M-4YG4X@2#*.HH1E&gt;JG(E4TM :/@!'WXK=K%1#YM,V(\AKN4R)G)&lt;KII7L&quot;65
M#D$#R4&lt;*3;&quot;TD9&amp;13M@3%!F90@B(74XOJY%A=Z2QP)T11X=2'(?6^N 8O@D 
M&lt;&quot;;D7ZKJ%4E]B,0;UD#AF*I7QF&lt;U,F&quot;- 5 E._B-E7 !&amp;5Q1E5)2E:FPV?*6
M0:D9!2&quot;9&quot;UYVTG;\H)X869B@/!DG%9C88^12XQ+VX016L&quot;D&lt;!JVRFEZ!3Q]E
M*&lt;32,E 8(S .*! ,Q@&amp;&amp;$DX]?&lt;Y#=@E1VDJ%R@#Y\I?7$6 8X&amp;&lt;.Y#A%'9A)
M&quot;B[WR&lt;^&gt;D,V&lt;&lt;?K!#K*6$/]&quot;&quot;A22H$+;)0F B69HRVF209T+Z,,T/C!.=FEZ
MZ(G&gt;&quot;4_$0;1[Q(I#')\4+&amp;Z:M(IUK 07%%40B_#/50W!#D'=2#^DB3!3,2+F
MD SI#J;,C:,&quot;D=L&amp;@?E+H ;&quot;J!TU7.!X5TVT-2BF/[&quot;,,L'!R1@HBEW+,&quot;$$
M1 H2*RTT9D'07G%,ZD1V'*RD3705(&quot;W#BPT-0S_MX&quot;!Q1(14.]2UDWKT*$U%
MHS]6O?1W!E#4*5W&amp;@Q84:DT24TW5;+*&amp;7YVF0'*-36'R8DA'@N*M6\()1;NT
MV&amp;JQXGQ&amp;NBM&gt;TR@7WA'K1BW&quot;VSF-PZV'=(1R%^MB&quot;A!TOR)LTR&quot;UV29.A[0F
MS\7_;1M3!8UHSS#&lt;I*)QJ)KK8X^X]=MSS*^8[FP1H-[HC1=R3U^&lt;,ZYVH[9,
M?-1VN^N$U[)0^9OT13:TWB&quot;&quot;&quot;X/!TKE2+@[#O($?YR0OGL'+M^#M:'%WF%\I
M*G=S&amp;4P2%_&quot;G QNM[)5V^8\:H4*.:]Q$23 A7V1(&gt;DG[]G&gt;[^R4M$8%U854%
MUCTJJZZ8KGG(,+PW&amp;:I]9(\.6A'K .!,+Y90.14(3C? V U2R7&quot;'$5BL+13@
M ,_&lt;\?-$9Q6;0&gt;^?,^ZGDH_R)6\(-CMJ%$L( ?6;US@+4SG&gt;X']T+.0GW@P=
M 7!PES&lt;$E,VBAX1O@=GG&lt;(8J3&gt; FR&amp;I&lt;D3:6\*%$R6!%_\&amp;J\S'=0&lt;2VCCF2
M7+X-'Q3TW3]_Y:&lt; 1I%C\ Q/K9A# U&lt;8@:1Q-UKI9NC*\PR)B$%IZ$X&amp;.IZS
M&amp;G&quot;G0:/&lt;&quot;O+O0;BY:48GRA)&lt;#4&amp;8Y^VQ4J,BW9+&gt;SA9^'G6G/FTX7.DZI2T&lt;
M4'##5Q&lt;$B;IT)#;=-'?:6\M:=E_,V^JOH_MEW*E65X^8T+3/, \2&quot;JRGWRNQ
MA0TCOEB?A&quot;IIV4I8&amp;60M1ZK&amp;1&lt;S-[E:'_5L*BLK&gt;4C&quot;CALF#M?1P9$$90_&quot;V
M[3KH74YB&gt;L[C+&quot;@,DKH/X-D8&gt;WTBQ]8EHP1W@T&lt;1QL\;-/2/@?-!WYP N7/B
MB(*&amp;AOND (/SAV7*:8_3P4#';O];C)7&amp;!7K'#B01[5#P5'WH/QS&quot;7=C^B5%F
M612.&amp;RX 2TZZTL%6HJ7'.#-(P:4#HP?U!N:3#14TCB1XO&gt;.&lt;^ %\/(\X:,K:
MF2O@!K]M&gt;8$L#-1;:*2U;9!9&lt;7K&amp;':W![M@_\=XEQ'43#+%_3XB93N&gt;9:9WN
M%+L&lt;2'3S1FV* F.G.YZ&quot;1[D30?#D=\ILO&lt;T*Q?&amp;L7:#G@U_&quot;Z,#D^EQ1-%8L
M5=YO.&amp;EL,7'3'^DZ4P&amp; .SP4LGYQZW[4YHSX8)4&lt;0TAY@H8%*W(T5&quot;W'$DRC
M7-XYUXW=.UPEG?KCL&amp;XYN7V&quot;V*AM(6%*0]TF0)RT8MGO$&quot;Z* OA^4OL&amp;W&quot;/P
M?888B.C_S3 ?9R_/0GO(-3:GC&gt;O2\_@(#W\&amp;(4C)HA2;W^5MY2O[AP7O1F&quot;,
MY6M*$'QS%TES\%TO%6V@5RK6DRK&amp;(D4-&lt;FJ2(WWWYAG@AFQ&quot;,V7KYWW)1FNY
M4D*-!D@&quot;A2DQ%UX&gt;5%_GM47.(W^T4!)\U@1PEG=&gt;A%+D!@;VT'ZS!R:%=&quot;RE
M\#%;4&quot;MNH#PB6&quot;,*\&quot;&amp;=]P#SLTK-533:QA=G(VZO8Q&quot;8&lt;SO&lt;T&quot;!(UPOB&lt;#=]
M&lt; 7_=U3@4SC:9WK(A8;/M2U8H TG0U*GD7!)&quot;&quot;+PPFC!MCYC&gt;#SB@BP#MH*K
M]AZN !,P&amp;']HEQ;-%W+2(X&lt;&gt;=@LP06'.)WWS(%^L53P,LB*(_P!?BCB'@  $
M/V5[/E)IIP L?K(0$')Z2!19U9%3&lt;C6($/@]-6AXJ50O)I*'UU,D&gt;M1 BY4.
MKZ$Q=9*+PL,!&quot;T*+LI=^ZT(;O@ P225  =A]276(ZJ=3K!B!2G4:. A(T!$&gt;
MPLA?EW(AG]&lt;9*R(&quot;8MA5.&amp;&lt;_OB&lt;3%&amp;)N\\)=FL@0ZF=F#' F^O1X\@AY0I&lt;&gt;
M&gt;90%:B-K^2@7OU&amp;-:&quot;&gt;#,N@2[V9&amp;UF 2V6@:MBAMG--8J_*+4G:!=.&amp;#S7!L
M&amp;%!HZ[@+3^=4P:)FUG*0H@),&quot;@%%B79&amp;R1-'HL!G=+0Y %F(5$9R?S8NM&quot;1&amp;
M B&gt;*GB$, 4E4!P$W[GB1UR,)VO9^+_])#4MD@F16&amp;?54&amp;&lt; 28G(XDW3G(YNA
M+'\D68 6;&gt;AV7Q\0&quot;PYQ8&amp;5B*TWA,0B6(2'H&lt;1CQ:I,E6V/F:EH :9UU&amp;&quot;$9
M6)F612@2/$ I4V?',\#C9B599F61&gt;D/WC1I(DA?05+.P''YF6.7&quot;!,D1&gt;]*6
M1^4R$0R9:KSQ7#RIA%G8:&lt;&lt;F#(''-&quot;G#31)R&amp;9?&amp;3AW2!)\8@?@X&gt;2N3&quot; K)
MF8[2)4Z0&gt;IH7FF,Y(Q%S.B.3CODF4-/#AM=P,H:&quot;;)/)&quot;-TSEUV6-/C#*+56
MA#?&amp;=#U$-(1X0[QPB18%%+JD$@GH3Z88'4W F&amp;J5:U78*)?&quot;BU;F &gt;I&quot;(#@D
M71,Q$3!0@[__:1N9:7&quot;CUIH@Z58H&lt;Y&gt;&lt;N!SMUDJH8@P5@QPL94\J:!@*%@,-
MHG(IN%%S 99T9SC=9@(G&quot;2.B &quot;.EX$V5LY[A\Q1A:3JVXY'BH5[0V9F^N9&gt;&lt;
MH&amp;&lt;&gt;@82&lt;!H&gt;MT(7$AW/RU9=NMY/&quot;E1=5T!N;X6=Q]2J?]9&amp;% GW34&quot;B= &amp;F$
M1Z$JE!C&quot;*61^N(0E5I;85P28Z9['9U&quot;9H%7\P)&gt;4L*0[&lt;$07VDZJM TRN%B$
M$9P&gt;96O$9R,R('Y &quot;IB&amp;%B7[&gt;&amp;B;AP[HN)2^Q0O.R&quot;FPJ)#S8)%FZC2Q0!'&lt;
M*1Z-\)&lt;&lt;5J9FD*9#&gt;CQCT3H=,9+]]3_1N(6SQGM+59/P5DIFJ4*@_TD+)&amp;JA
M+DH7&amp;JI(@,JG;(,Y\5&quot;6;1H:?P!\9S4]=/5KBMH_K0B:&quot;#B1!368E(94+5$G
M.H2+ _6@+*DPFVIH!8:,7T #B?2A=6! 7.&quot;&amp;!*2=%-!&gt;?S:G+MARC$I:&lt;&quot;FG
MMHE\'!47,'-:9')$2LJ@!V&gt;'7T%?G:H;102L&lt;M2'1;HQ6&lt;(HZ&gt;-UO&lt;D,/32/
M\NHUPK%7BYJ@-;$T!,J9&lt;E=]S(BHB,%M1!!WL1:'8%J:/4:FXVH!WH:3E%&quot;1
MVW W1S6C-U06!Y*)Y7.=^&quot;-V]YI\&quot;62HF-53&quot;.%:H0%]VYJ&amp;SZ&gt;.G(I/]4.B
M8T1D&quot;RLU0M6FI&gt;D8&amp;DL&gt; V)L7&gt;&amp;L.MAAJ_]@JZPJC37!%A.9(SER'G:H8\1&quot;
M Z&amp;BGC&amp;!F&quot;4EAF9S,\89LSG9$X@6&amp;)3H9LITB!@ 6;*:7J,ZMF(9M-$J@2 E
M:(('HBI; S11(5X:$_6'/;$AL?1&quot;9%D5KC!KM0HI&lt;([Z+TH3F$@T&quot;(^FLQS2
MJ_!@?V&gt;+KY.:H&gt;3V@L05&quot;5RSEJE0%&gt;.7&quot;M&quot;JMU=JF9Y)210''($[(C?+M\!I
M8MR7G3YSDZVB&quot;U0*74Z5BOO6;F^R2R$UAFR#;N77*OH'KI/)53894$8F&quot;(A+
MNF 15N-X6?&amp;'E8_[)'A4O+#3&quot;;S8&lt;GA#=MX)&amp;[2W5&gt;EI09#X'28FE'@0C)/6
MA$!Z&amp;K.@/R[[&lt;?/_FK[JN[[L2W71\TWU2(_ORUX\-((.6VSWNU7X]B E:&amp;3&lt;
MXA!ZJ0XN*9I/%W4XV(ASH6;5^XG^N30.,&lt;#CZ['#NC:L1+RKQG*YT58PPY2W
M,+N4 C%X8:?W&lt;  P6Y&lt;9N) DBXA/-2:Q1*XZ&amp;+=)D!X&gt;G*DB&amp;&quot;1BT%K2=T S
M:\'B%A6R\&amp;C.PQ',N@VLIZZS&lt;38#BX)?T($\FUWQP60T$WFLLRAB0T&amp;--S8/
MY+XX9I- #+!S&gt;&quot;KG^%*@P\,C1)2XX,!4DIYS&lt;V6C:XZSTL3'1'Z:)Z0;O&amp;)*
M8[)/53)\D:[[.EW@ 1&quot;_ZE%,,@T&lt;48#ALK5 RBRI2A-6AK)D_$.V%7&gt;'_QB#
MOO5)]GLX0DJ&quot;J%B]/&gt;L+/NIZJL A O(UJ4G$&quot;7,?S_0B]@C!0%JKF$N]C^QA
M:+:2DT$U=&lt;6_GID?WN.GJ$F,2U*U^=M!@ P[&quot;?1PI$ ZM=D4[A;+1\/,HT&gt;V
M'9NYSSI[2,E;RB$B&amp;M-^C(3#1:A6-5!6#8L\W; ,*4) ;!AOFPNHZ1P[]]FL
MXMRJ'CNHGFI/&lt;=&gt;/WL*_0R=&quot;0H0W9^=+--$/&quot;O@+6(F#0'@L['(&lt;3M(X&gt;^;,
ME-%I4-F^$)V[[RRTTKRR'\E;S:9HT&quot;)7-!PI* (9''4PC77-'&amp;:P.J 3IP-*
MHRBQS&lt;G09&quot;AD*0%D[DPQ6&amp;.VC-NV. I%4I8(\?^*)JYLP%='&gt;Q%JQ+^809CR
M7P0LH,%#0#^@+JNPSA'\GJHZMM&amp;,?!9-S6E0&quot;*ISA1LM.(/&quot;I[O%:7L($6\Q
MM=R#DRH0HRZ]B5W6PF/6T3A-RQAK5,##*B^6!_,$98N99+GK1(#7@T U)RQ]
M7V&gt;(E\?WI:+J'&amp;O]TIRK:TIYU7*M1=R6/&gt;VI6#KS09:ZIFV&lt;%;-I&quot;!]3FWH]
M'EXZ!1&gt;R;(M=BVV]J]I5@9@+SQ7=N(P=A+_7R5[M*7XSR*VM2DITVLWLQ@R8
M1E#M/8+:ECZ&amp;'Y5%R2.Y7U62E8@:6V&amp;E?Y+:81&gt;#;0Z*B0#5O[RMN&amp;3+&amp;C&quot;,
ML9VT&gt;-C#&lt;ZJQQV^ZJX'_=D^2;&lt;[ ^Y#]%9D7%VD$J'[;00! 9E[970PZL-G=
M]1X\5\8W\:FA0V&amp;Z2JT&gt;;=4&amp;CM. (%:9.&quot;7]6-R3'-QGH*^QXF&quot;&gt;&gt;YAJ,KQ1
MS&lt;L7;#&quot;_A'[!!&quot;.2)X13\$S6$ME,&quot;@LRQ88%2QBHA9@&lt;G(Q+9 AS5@X[BH .
M-A$83J$ S+M%E00]D./F$5#\@2&lt;Y5+A0&gt;L8V'&lt;_3/-E+-#[GI1 LP.+O&quot;LS&amp;
MU0,&lt;H7D--S^-PRO\&quot;L?W_2_I&quot;FBPA=&amp;&gt;U@6(5I\I. 2%0-JKJR6I:]ZZ&lt;+Z:
M V.M$C&amp;JP.,=;J/;F!OS&lt;%5?GBX=&lt;\G=X5!=H=]Q7A!#G7@5_K80H.&quot;+J^17
M_TUPZI0X4EE CPB*3TX68?OGU*S:YX2 $#Y;&gt;K,P-2F_D&gt;?:!^Y^DRW&quot;KFL^
ML@?@=0?D?Q9'LV1P:&gt;#E8/T.N *E^@&amp;=!AI%&quot;'J_CLZXJNO%^+VFG.[=/.PG
M W9VF.9VP&quot;E6F^T?:UX%R]@0LFXV54$S4AZFN$ X*F/B8+H1P&lt;SIH3Z&lt;%JOJ
MFT:I_##!=M(H*7'M KK=@^NG N:P2_WHKXW@E%)EM,W;YTZDC@5VIIZ^C9=T
M6 QYR=&gt;9V3Y=EJZE-K3G\ GIJ&gt;[IVM@+#;]M ;]C$[+3N44E=O(:FX'9SBL7
M$!L&lt;1VGL[Q 1QOO9]0.G&quot; -G;H[&lt;&lt;\UCPYSLL.W,*O\.L%N6&gt;VRJWS?H8%AU
MC_0.&quot;PPW[QX&gt;DLRB#&lt;?=TI+]&quot;B=?RCB_\=+-!HX0SNG6W^PWE()N'^N&amp;&lt;&quot;_@
M+A)S3PO6+27-#B273#YVO,0.YPP!  &lt; OTF*\_S^R%1X39(&amp;)WO41.&lt;]I3GO
M3MRL+-W;@@#J0^*.I&gt;Q&gt;] #_Y9$(=JO[&quot;0=DZ+M.K%,IUJPU=5E\O6V?W+VT
M@'2_Y,R,UZSPFJOXK]&amp;QPV'RM[^,=9M$;0N1O58R/VHOVMC1 GIV^/*LKAF_
MCE3?WBH.Y&lt;$&quot;U\=.YT&lt;%(=HS1W:&lt;&amp;N=.&lt;C.I&gt;D2NJR 6JA1?[,I&gt;#'C^^19O
MP3D$ SW()=TY%7BW?*-AE]7_Q&gt;HGP5 &quot;N1:Z K$/^&quot;JX#_I1P)&amp;[[WV]GZ@Z
M-^#^@/GS:&amp;-.%X]((1D(,&amp;)D8##*2:N]&amp;+;,3(F/ X308@3.MH$L19(7S,UT
M;=]XKN^YS/_ H+ &quot;,#T&gt;&quot;R1&amp;T1E:D*-1T-0PE4I%R*/QTCB!*T-R-)9J2X5P
M-F(4$UN3;L8W%%B_^+S&gt;2=_[_S\A2&amp;EG&lt;V-_'X5#*VLC7&amp;X##@*-@#A61AM'
M;IDL A\$'R94 &amp;$2&lt;G%P,7H;=Y6NKWY]L+.T(C % (ES#HIYIW63@@L?,&quot;,%
M5FNU%ZTA!)JHP5NYK:EWOW&quot;RJ7C4RMW&gt;'-G??ZT+Y%-BY6Y4&amp;-=XE!+&lt;-:*\
M+&lt;=N_UJ7.%VX47I=4&lt;CTJ5*$S(0]=CSBB5O($&amp;'#6MP4+KJ'L,V&gt;+),H7M$1
ML,FSC1IO(,G(R1\+$D:BJ%S),I=+E05P\6LYTQC-ERUSLM3UL*=/;3_SI(,7
M,H@Q.R)D@I-$S^2&quot;2!=*95CQB.0S+KA,A=N8$5\O=Q&amp;.^=CJ@BL((]3DY+M'
M%IXH0D'C,FPKMZZDC)[,QAA#0&amp;*@!&lt;Z(-K$$PDPN1202H2PZ(0G@4$&lt;ODK&amp;U
M):](D 9;(&quot;T4V(+%&amp;TCIVAW]131I&amp;NO8&gt;!$&quot;ZF0_O\G^)![FDHW?910V'(ST
MB%0/S8_\2 4QG-T*:Y\]ICJNP;2UT]!=F8Z.(:(O+*KA7O_ -4&quot;G]^\Y:\*,
MTAV\&gt;9MF)K5Y&quot;9+&quot;\R1-IW.,D.DVJL'8WC!(1*UDCJ[4!0B6@ D)=H=]-&quot;B1
MC&amp;4(%5=::&amp;6$L%F!@[TC23L5B%*;'?T(AQEV&quot;/:&quot;' 0'7:$+#/, -4-R!+;(
M@WPN&gt;I&quot;/)VL9Y16&amp;$]ACQD4M1%'B?$W1(^$1&amp;&gt;&amp;(&amp;V.K['*91O&quot;)08&gt;1H;T8
MXY0ZP$C=&lt;ZK1PXH0'9*X(T*&quot;Q**9E42\$&quot;8(66GQ)8'3R8*AD2K60&quot;:5;-*9
MX&amp;2&amp;Y8DD$&quot;$F,^&lt;NP7G@X&amp;]%*N+?EB'^U.9 0&gt;:G9)5V1KJ4I.X5HD17GY0 
MU0_]5?I$)SQZ!: Z4AI0G@+-'.G_(@G,Q&gt;.FBG!^M22EM)I2JWMG A3?FCN\
M9BLXP26Z)(&quot;Q 7&amp; '8X%V&gt;%*,4HHV*?0-HK8I)#&gt;&gt;NN?I#7Y3*YB_-BKDR4$
MP]P;/HIY!GS.=-G#8878H]X9F=)7YZQER1H?M;]96RNVT+VF*U/JEDH/,&gt;U1
M$,IJ)IT[&lt;, )?3:;2H.29N8,K]H;J[0V\*NOHAN32M$ZY@ !  J!05%C'&quot;_%
M=-[*X^&amp;$'LO&gt;S:0R+N4,.&lt;$ $=LE#,;WZ8?QQ61JW/%#0A,HK T$1.(8LWLJ
ML:&gt;-X,+G&quot;&lt;,&lt;#$51%5U(C=VJEN+;\Y-Q_EKMT'86+3$'.&lt;OY%5FSF&lt;M+DSQ7
MO9%*^3T@_Q:H=&lt;RWX;-E)8%+Q!7_'/;@7JM*=EUFCU8LWT:E=Q9^]4IQM-K3
M@MO8TQHE#3=&amp;264BN0UW;(DYM3X&lt;V)P$G2D4.-CV]IQOEE?XU&lt;:$A].2N%W=
M*:;MYTY4$?(;@&gt;IQ$&quot;&amp;3Z):V9YMH*2VK?+I3GRWRJH8S ]W=XRJCK,=-N)(.
MI@:[&quot; 77_LKMB(,;YAJ3&gt;^II7ZIO'6I3&lt;*$8B-AZ(2OWBEY,SM]'!EJ&gt;_*/U
M$ESKZ&quot;&gt;0&gt;%C'-B02G?A@03ZY#$)(W1+:OYAFG %RR5$R:MX6PM( +NQH&amp;(2)
M'N-FE07'B1  Y;&amp;)MP@HMNQM)6@ND%_XV,&quot;3!&lt;ZB@7$YGQ88,?^$$LYMACV:
M3,(8M+\(52$#WE,:B)A&quot;CV&quot;D&quot;(E,*H75,L:+8F2( 4@X(L(&quot;&amp;$ 7%HZ*OW*6
M%F0B,Q\JT(: P&amp;%05(:UPW3H&gt;(\ZA19= )@T+E$.=,L! 437-@@FHGN[&gt;D&amp;:
M_ ,:?SENBHEA&amp;_9\]D*!24 [X /,9EK3H?2A\75DVXPE*0&lt;P7I7I)2F$F2C-
M(Y[SR.1E[MO6]U&quot;6K&quot;IBPTJME!VW /@U1GZ1DSG21HIB \=+BLR7=O3*]F 0
MAB?.;UKHFHDEAW**([QD1K;RX1D4!!\UTE&quot;+3K, )-GPIF'N@$%=(\DJ'5#*
M- $S8&gt;=,V)G &quot;:W.6&amp;Z3M5081F18'6O_Z()8O#@(@(:&quot;%@A:2F6\&lt;$8O&quot;Z,=
M622'&gt;=!*&quot;]XPR&quot;A,JFF/!BW',:SF&quot;:JDLX&lt;7]&lt;&gt;77%(.U1U&quot;39&lt;[YKU(Y(8L
M]L!J?R2G#+)IL/+&lt;S3&amp;CL$5,\E6Z8HX)';0TD6YLF5/\-4H-@B*I&quot;I6'E*[ 
M,Z,L1*H&gt;C*F?O!0*&lt;@*30^I66!U35 \+$W(G:D&quot;HI4V]C3@G%&gt;H18B*5KI0+
MB ?KV]LN ;0JJ2L*@3'J$8 :R:\&lt;-:/65.HXXVF,Z8V.8AA\Q^2DV90#QNX)
M&gt;U1I88K*U1MHKFLA2.GCF@&quot;;\*F%#4S0G@5S4Y@=-&gt;.J&amp;RS&quot;3,QG*4&lt; 4:\)
M0FT/O\2/&lt;,6@_PH*P$1I MM!&gt;J9VI&amp;. #'N.-(\.;A%APAJ)#IMRQ)2][#L'
M&quot;,]*^&amp;'.1B)-3&gt;/! A0T4,-G#(-#+KOK1?.*QERQ2#]=$B/4&lt;)L8&quot; 3 /LRX
M5#-9:,#[[55))Q+26A:$N53!8TC40,%F-1N#VIS!@Y4KZ4BAMU_51LO 4&lt;42
M.YAJO?&amp;NMTFC!5T\\1E&quot;B:3OK:&quot;PPSW'5,,#K\9&quot;17%NM5)&quot;,'S^ V[H*C&quot;&quot;
M7;?BL#(1+T&quot;,62E'2&gt;.8X:0F,UZO+;2;-\.%!5TO/.. /&gt;RS?!E3$)_S%V5J
MEM06-]3))/SQ&gt;XF+.MK],FI-5!!TQ2NZ4JC@JS;K:(&lt;;8@+],F8D!/\X &amp; _
M!3&lt;B&lt;Q%V!A0 SFC'9!&amp;Z[HC\&amp;164';+G&amp;Q#B&amp;AZ% !-L@@XK&amp;SF^W0HB[XA&quot;
MNSQF.9\9+@2/ V&amp;8%K(%=1-U&quot;#F*R.&gt;&amp;FJXZMA7F*D?@4I68F;M#0_4&quot;)QAA
MAT@AKNZPR+L&gt;_5_52$07)&lt;EM&amp;U5-K33XJ1&gt;2.Q,&amp;THH*EXS9FP&lt;*'&gt;K&amp;&amp; 4S
MYP-]#0Z,D,/2YUM6&amp;WE9HL;U=B&gt;#@?)TP!+BR:&lt;;\T8/O/EDW2 %GDTQ*B*!
M=(KW,9TS/&gt;G-JN**VI&gt;KF1BMT&amp;%$3AJ8O$;C$6W:S@7Y!JHY&amp;)Y$#5+G)AHZ
MI/Y+E16^W!/)7FH /)&amp;&amp;3G(&lt;A&gt;0J-QLB7K;_&quot;%&gt; Z/8@HV7I*2M)K_UDEK-C
M3&lt;3&gt;BZ7:[.TN8C!3,C '7;4&lt;%L]VI^872&lt;&lt;^?&lt;U-\/U5&gt;:IQYE7=# U,+\L8
M.G)#IBOE90R&lt;,&gt;#6PCK9PC0&amp;^T A3_&quot;.JH#E&amp;41SOKSHT]+RO[\US4LK2X82
M*9VDP]'(7;K/29O#MH\[[?(F]QT:#%I&lt;D?=^Z+$[M8F0:6W.F DJ%,7\&amp;ZU=
MLBY*M*AHT?V+OP@SX@^Q-ZKUM.]:'QI_2H[P+=^DQCLY+G-)26H;LZ0#@LW@
MT0'!3[WS]\V6YOO@(V0]OU+3 ^5UUF77_'&gt;_%W^'9*_O!,( =,N/'&lt;Q;H]L&lt;
MEY^EK.&amp;V(8!\%E5U_\_0P3&lt;UFO(J: N2AHY&lt;]*6DL\/E\4/?L9V)&amp;DD66M-1
MK4__#OZQ1.@&amp;]F,*I=6&gt;M-=CK4$O\=1R=&amp;0PW;(95A1@1&lt; ;G!$*&quot;,)^E *!
MUC(U]F5?VT$B.K)VM+:!S21%&amp;3(&quot;)&amp;-NG&lt;5L?\,0OV,( IA[!!AO$1  OD$L
M&quot;&quot;AK\=5N&gt;=%+$A@I-V@MTS=&quot;MI(L&gt;U-ZPV(S[Z0$P[-*0U%B&quot;E,-4P815&lt;5,
MP;5(W.&lt;ZXX8? =A)\T9.($5O*^AR.5@K*5)[#M(%H-  XO9+@1):'$1V^;=E
M0'%&amp;&amp;M@\ZH-V8/1M3-&gt;#;F%G'?%5F@1Q#E5\74@KOD)@NZ M6#1;&lt;W=3E?]C
M#LQP!&lt;7 +BK&amp;A&quot;/T%@+A?%$H-E_(A]&gt;@&lt;HZT?L?G:A$W*4\W(. 66$&gt;'$OLS
M=M, A&amp;&gt;3@MUW;AKA'%NF'1KXAU-&quot;BY)R&lt;.YF5$_F/1B%?/$1);[X9YX'.VI!
M&gt;BU2&gt;71X;_7SB&amp;\PA;W8B;?7=R?B3ELA'J6&amp;&gt;MZ1.S6AC2K!C&lt;?U':&amp;$!M@P
M;?W&quot;@[C7BCEB9M\C'PPW&gt;V/3B;:(@U(G(VWV!,JV@U&lt;&amp;8YJWCU@TC.:52HWG
MCD$A7M86*RP5+O4H)^K2?)_'A=&quot;(6/[$1-LA /@8=B.&amp;:($GCLBG$@]84JUQ
M(F]X0]0'A*N# 2X80ZN'&gt;F;W/O#XD.Y1 %=5!O?_4!SB54&lt;/DD&quot;ME 8Y&gt;7X\
M!T7! CVRQC6GQ6(JZ&amp;$2%XTQ-!DAB91.%H^14AR\V'2_Q0=;(U=5*80I $:L
MX)2.A&quot;AU:) EQ1.$M&quot;)^XXANTY(NB1N) FT&quot;R4DZ-HK^@VV?T2E44@S;%S9P
MXE145866P!]\.%YHF987)!VDJ(#;0Y21XC!.,B@C87,&gt;=6S,6'UQ6&quot;F&amp;Y7U_
MQY4 -SZ%&quot;9=,V9D,@8_J@Q):J(3HZ 5DT#Y#Z5MJ$GG#$2+HAID! IN7Q%UO
M69N':7Q!&lt;8;0-8(C19&quot;_(D4V0Y.+X7W:1FX\&quot;4WV%CWX*)O1P9PV1)N;:9MS
MF&quot;TKEQ'NH@GP&lt;7]BD%D0_WDYX09G4B!X!%2&lt;^ $5&gt;O8A&lt;MF0+.&gt;&lt;JZ:9AOF&gt;
MG&lt;F&gt;8D,,C,&gt;(C.!&lt;FA1AQ4)A,U0ZCN9?UZ&lt;^%FEMZRF8SQA,G&quot;F=ZE&gt;.\]0=
M^E4;_4=\IA!YCN&lt;TPUF /X0/\;.=:8B%E $^N1 _BV:9H&amp;&gt;@@UD)&quot;JJ@MP4=
M:)%69(@Z\R8&gt;'&amp;=L.&gt;$_[&quot;2&quot;W/&lt;/C_.&quot;84)),^&lt;T!^&amp;;MPEE\ED[T F?*BJA
M+ INU'B&gt;IY5S'RHDF:8AE964&quot;N)9SS&gt;$'9 5 7%=E5B@)GIE*!J=F[FBI$%7
M^^%9E38L1$$)LHB;301^PL1U+Y9Q)Z$.(/FEUU:DAW.D&quot;5JF,P&quot;9H\%@'=!/
M5/^D;2&lt;2&amp;PK&amp;*)NA.[^H)2] D9+V-O%B-U$YI$T9IF**H&quot;E:FC)W&amp;D?32C70
M825A0N&lt;8!ZUPDB0BDQR&quot;BJ2V.&gt;&amp;)9$9W9B[)IUOGGG\*GRMBJZNQ%C9I;FLY
MD^%&quot;,&amp;)4&quot;B'WEPKF5_EP?I#S&lt;&quot;%6JYHJ4IQ*I@%F.+SZ?QEJ P=AK,)6APM5
M, I5B WV5Y($?] :K6PWID@*J,N@84;#./Q4&gt;7-D6JUAD&lt;=*J&amp;[',^-&quot;A9,9
MF2O&amp;J^V'JYU:K7H7#=AXL#2&amp;8\OU&gt;BDH!&lt;9XJDEUB?&gt;U6[PU0\[JF0@&amp;L!OC
MIP,[9/:VE+07%9M*8981,L&lt;*11W!5.W5)^&gt;J+_@ZE2;_UX3P.H=#P9&quot;4F*L&gt;
MZY#O1K 0BZD]2Y4= [(^VR(&gt;R&quot;0C61S,QX&gt;#E6@ )HH=&gt;S$(Q@F'YZG[Q8YV
MU98$ZG] @JM4P@T$=W2R\S&amp;VM@,?D&quot;:*8;,VMZX\6VV/0#S*L5DGBT0Z&lt;99R
M 4]HNZ!38G\N8UPZ&lt;1M/-$?S1Y%^R4[S1ZV&lt;&gt;6T(V =@J9[(0U%T*Q=H&gt;[=9
MNZ2BD&amp;Q7%!5]&lt;*E&amp;JXH7^%59.91S^+1#JU=F0'$YBYBHBQOI$C!KQY[I&lt;[&amp;B
MV+5[LJ^7)JF%%8&lt;/1%FE4E[7H;:'NV?Z)I$?1CAQZU[&quot;BDX_X:N@83NT4K/C
MBE.6&gt;*%Z9UM'(UID&lt;%:&lt;ZY:&amp;_PNU2,5# [2X&gt;KH,ZO*R[YB;7C&quot;C-G:7!RJ[
MKA%!A&lt;&amp;;-W)?5&gt;1,0)F*H-N,C(:U4(BSW(M4P2&quot;':;N%0_M_K;N*./&quot;UCXN#
M&gt;!1-&gt;7&gt;G)21\78.Q:(*P%%S!&quot;XN^%IS!*R.C?#L6^TMDBZ@S?T&quot;[2.15,%8U
MA&quot;&quot;HO?A=\@A[QN EV,ES[DH*BG%?(!0-*IP!VQ0J^GA'/HQE/K4Q$W=8)_&quot;*
M'TRBO^*UR$J8&gt;[&quot;R,'MQ165RI@,@DEL!XN:7&gt;R*TUY%K$)0%]K!-=B..WNO%
M4_2$'C-$&amp;)G&amp;FI'#T#N!$'=$UW.S;G8'8W:&quot;SB@4.(0U1F=^(+6:C(AOI_,!
M/X=&quot;J__K)?XP#_(S*%7,Q,&amp;[FY.0)FQ9!-= &quot;EXJ1)!&quot;OB(C:X*UR2PL&lt;DM(
M)PI11R&amp;&lt;C.&lt;X(N&quot;J$?H%LM:PR-NA=G:J(X2D'F'\OST2P4Z@BW*FN7EK%A9&amp;
M?4.&lt;;8RA;'B+3J++C(^LP&lt;B,C3]WM%])O&quot;(;4&amp;_&lt;#7FX!UR@(&lt;: %:JT-E74
M9GB!9*,I89HQ0&amp;&amp;GQ3T6Q0@4E1XHL19@LQOF!PIW@*L*SQE$(_&amp;,(.K;M;X9
ME4ZZML:W$D_TS[\,&quot;+ F&amp;TG\-NX668/1JD*H&amp;R 4H5-@![&amp;U1,=[*Q?;FD11
MM%&quot;%R:BJQ&lt;5\NN$;(PT\JQ +OLK9#&amp;IF#2]L!&amp;78Q [@&lt;0+_75V-&lt;)JY0Y$R
M] &quot;^%V](IEUL!5&lt;&gt;@ )YQ)%)\&lt;UQ$1'P%,JM,%&quot;A9HC0EWQ+[;GVIK%J0\L'
MZ7&lt;D'&lt; !J8?Z*Q+^&gt;,LT )IWZ WCUJ.2\,ZCR[RN50&amp;FNX:VI]33ZKO]ZZ\/
MH7)/%*E)\:E6C&lt;0YNP^L?&quot;?)W-=^/4H&lt;!S&lt;$ VR*LW=I([V7&gt;Z)MS;\^RZ=H
M&gt;,P3O#7D9QE] )E5/8&quot;=I7%FB4&quot;^H!2?&gt;5CQX)6Z&amp;Y*6*V&quot;@L&quot;&amp;.%I=K),SY
M=KGZY=-[V*M9+&lt;!*W=&amp;FX=C8X8!(*&amp;P]JKAQK%D@)V6,2,\!*@'J&gt; [U*@Y#
M3)[+?36S_1]2UICW0H9[S=6WD!62_YS3DI!AY1$!W:T5N_G&lt;/PNTC,W/M+U&amp;
M=PK B5:_D/EXYFU![9 (H5!R:BT$._P-=LR#6CS.PD;=6BK&quot;?7$,)1.D;0=I
M%]*J'FF=7+#7'+N]C1T@UCD,8=!A&amp;Q1M'I:'EP&gt;% ?&amp;BB@5$K+S/WS NH8W6
MKS N/H0,GOU^/M' &lt;U7+TQ4F\KT)@M 90KJ);F/;K&amp;@7&gt;2$-1-EZRY5C7D41
ME]U&quot;4)DY)#R@WT+.WW2_L_!I!YE5=A84-!(&lt;UB6&quot;[E9BI%!&quot;8QR1Y+W8'6VF
MS0E[ H9?3GW6)&amp;YH0QY8,3U&amp;DX!QYB432^F&lt;2GY;G&quot;!M\):T.AY(GDO+T&quot;--
M 2,Y41&gt;[!/_MUE2+U^534FJ*E9.C8!GN?/2&lt;S=A9G8G3R;2PJ&amp;FZ118HP5K]
MOL)+&gt;#V!IB&quot;^AC42RB&amp;%Y.?]C#C&gt;3E;^R4)YHAG.BZ?09H*@3QYMWW/&gt;/UQ!
M#J6SP]:D&quot;=D&lt;Y41,G&lt;#7RY'HFK\%XJ?NZH:+&lt;R&amp;EIK66=&gt;3=Z%8,!Y$6SRE@
MIPG$U=2UE,P4;.&lt;CR8I!A!U5OX.@)^+M6K/4SC!;%Y5I4Y7[+&quot;0,9TUUVP+K
MX&quot;N7ZSSQ&quot;4Q0W403[&gt;J)$UO*;K4,&gt;\63P$-DT&quot;(P&quot;CS4;I/J?G&quot;]%*Q0PV,;
M(\5QW% 4/O- .Q/NO6!^X_;N#$QEH5ICZL?H[YJV2AD'5^S16GK_\D&amp;&quot;OE3O
M]DR&lt;(R1FD.]XMV/PXXAWA&gt; &quot;ANRP.]1_F1WITK3]D!7J:$XE:#?.!!=L7-:O
M\[29 3+W3MFH$^1T(D%ADY!J%1)%U2HE?BPL71:^P&gt;%W&amp;FGH ^.6 \N?ZP0_
M$@*^AR=[$WGL'A(6[R1XE#3^G8#)0 SB=SK#W+OE/=U)&quot;5W]-]7-8O(&quot;[&quot;/+
MVI;_1NE&quot;&lt;'+A%NBS@T((+0'=7&lt;A4OME &lt;-SKP-M!M&lt;T/[PK:1I? 2HBS]'[]
M$!L6.IV#'OB)X64B3MB&amp;7_*H;G6TCE.KF\]7Y(P[_TA^H,\;,7WCPAR:Z.Y&quot;
M\0:JBHA9&quot;O2[&amp;D8#XZ7[T78[/KQW-[FU_^^[B&lt;K!&lt;RMULU8VB(_6&gt;YN2&quot;8L&gt;
MJX?!K+&gt;W?FW^&quot;NOCYN\CJ??7RX(R:P+5^%&amp;AT&lt;_ELPH0%!Z9#4[HRQM(&quot; !@
MW/XPRDFK738S;+AN0J&lt;4(4,8Y8=&quot;J2IY;ARWPLF4+&gt;ODLE5BL$6( ^#UCLA)
MRL83-&amp;V:H@N6K! ;UPUV&amp;W%R.P4M&quot;B.@5L])\S&amp;K&quot;IV&amp;-/0C9(S*,_4&amp;],$T
M[%=W'W000%L -E(8?X&amp;,1WE*-RR/%&amp;J-;)=?E5B%91T_?AV-HA^:,6R&quot;#T))
M)8MHI8&amp;MD(&quot;S.WH6L6@G81L*8P6](@JOHZ)_*3B1&gt;#?',L.NF=!BH3K+9'!D
M(,3:E'&gt;G,@2JH/\S)LF17FO;U+1O&lt;[0KQ[BSDZC9G[5=*//I=W$:^BSQ(C@[
M@TE:P0J[M @8 &quot;+@/E$#,WAKAH:.0XK[W$@8)&quot;Y;.W&gt;V(%STP2=;PI+,'JKD
MZ)&amp;D+% C4ST\2).&quot;%R&amp;=Q  H\$NERH@7OM&quot;[R=+4&quot; :_A-'Y]\*G'9,&gt;.&quot;I 
M1HC&lt;&amp;1S&quot;!@R!Q(RITW$?N^1@A:\&lt;2&quot;LSHTU;.Y%0SZ1A@-C[2@PH6FDN4MBM
MNB&amp;G%[(]]LH($&lt;#F()8&quot;PA&quot;@BC?95D8A#IP %ZI%*Z]T'?'[&amp;%/FOIH&amp;A4[H
M\R-$0L&amp;9GSYKG+=R6(DK%@@[F&gt;8GL-MEXF+H*&lt;UTEEY#A)!8*T=1W-3_R).K
MW@::[29AT*-+%X8&quot;;N&gt;6@9J8Q&gt;X !F;/Q,&gt;IFAN%^H/A9TDIT^S:4RA@&gt; O%
MUCGMN&quot;?9V8,)&quot;&gt;=2N?]TJ)FBUD%&lt;6&gt;6%+AO8H!5)A;GS75GM\,&quot;. ^Q8@\0)
M9-C%0S@Y;53+ NA5N-I+26&quot;X&quot;W3$$;!+4KTMP 1^[^EUB&quot;4KV,&gt;='QP]^-^.
MRVG37%L4IO+#?F)T6(%&amp;]&lt;A!FED2NE. +AQ&lt;9P*0ZHBC%SE R&lt;=!0CJR5B58
M&gt;L2E5PNR83C$B_2=. U^&quot;ZX&quot;7A%2!&amp;-  &quot;C.Q^.=C 0XQ8!J2:1E9776\8^4
MZABA74&gt;?A-'A@W%J,A8M5WJICA0Y4==E=T?&gt;_].:&quot; -,]HL3'E!6QDY(I;*E
MB73LA.$8%=U0YVZ?_*8GGK1B^AF?H65JYZKN 7+II2(%VY$..82CB'@WH*&lt;!
MBS90U@&amp;O&amp;^6!Y(T&quot;9@JL11$LIFE+EGG4CR@TF!E&gt;HRBH2&amp;BMZ(I6%Z[.Z&gt;H'
M;8?L0E4L#&gt;8J:2. ;73:I&lt;Z&amp;1P&amp;=B-08YY.TV;0MI$@XD]1T##.\\,( #+&quot;3
M=!#/!MW#T54\0L,&lt;9^PPBV6029T-!:=K,FRWVDL@A&amp;*H201PNI)QFK(E\B)7
M Z=9!86+- ?FZGHY&gt;R*O&quot;*1XO+'$\/ELP9-7$1OM:X!,N S&quot;K09I@)J1,)T8
M%L&quot;&gt;S..LZJG&lt;YP6W&lt;?\2M(?1P%C&lt;?![()R&lt;O^AT,V\(&amp;;[&amp;5VZR2J.B-NIQ[
M[Q=^HWWH=N5\*\]FP;JM-I5&gt;-VXK@.PR'G;)!LM[G)%(S/68%IB &quot; 5C&gt;]99
MUERRS=8=QQ4;'-QT&amp;AM=&quot;GHZ7DLX2%WW4,)I9&lt;.,N&gt;.\/\Y&lt;Y*YVS+K%/86&lt;
MUXSOT=UT$(,DO&gt;5^1K&lt;NO )(5V(90S!N%:D$VBIT9,_K#&lt;M7YM1,NUV3A&lt;NM
M/GN/+W).OKW'[^\H/Z8G%K=Y'^M/%J;Q$U7;T^C0(;*7)%. @T4: $?$/L&gt;!
M4=7A&lt;U&gt;;&amp;'2J)[IRC&quot;0EWA/?IJ F.,)U:UN&amp;F\$Y9H$-:LGOA.JB'_!,V!3_
M4&quot;3&quot;&gt;Z_8V51\=Z&amp;\72V H7#6J(B@*)@-YH8V%$0)L32_NK%LA&quot;[YBU7P$C@L
ME&quot;Q*/S,B&quot;SSP*1R$,'QLV9H4:X?&quot;KX!--0&lt;IF#[@ PRF@6%H4@P)%T\G!;H!
MH$$EU%8G&quot;N$W&lt;I'(&quot;8M0Q0LKT &lt;0F*\HH,!,L:S6-2KL#HBS&gt;\?4UO*8-3H 
M:W$J4!?E]T64M2N+*P@(F5&quot; /2;V9Q90:.)'!L?!]_S-DL,82_/PTS^;\$:!
MFX#;3DBP&amp; 0:D2Q;F4RK$A,&lt;/TR,%QA*&amp;MP20RHG#.!$9&amp;2 Q$2Y@R+(&quot;QM7
M=.0D4P8YL9W2:0M&quot;D2'Y.#MICA*$&lt;WC,&quot;# 8MGXI_Z-8,#.G0+3@,G$^RT[M
M&lt;5=O2G*ADY@-!9*Y&amp;5*&lt;&lt;)Q^48:.E^O4^MS5BS&gt;X: =7G&amp;;C*AD4:\:S/P!T
MEBUE(;6!VLXLYFF+7WKUG4YL[H&lt;H@M9=.*&lt;0WD2Q5^%K((W&gt;)A_M*4N&quot;:^(%
M&quot;8AT'_. KC6+\X=&quot;&gt;\?0D8+FIA.P*=-HRA]:Z?&amp;2LQB.,#%21 K\X6+SN!T4
M(-D78Y$G;.N:T5#I@[&lt;BV -&amp;8&quot;6I-__T*+3MU&amp;0]Y89#S9@/IR**%BU-:W9D
M%D&quot;5ED:1B43+1UT@KKP20B-F=!$GJ%B&amp;BY2@,')M0(.0F:'@A&amp;!!&gt;]M #_L2
MP=+M#0@,0&lt;-B:Y1#Y=4IF/]G/5EBU^E0&quot;&lt;Z28TBK&amp; 7]T*;1RB%G%M-(A7X!
M,&gt;E-S[;3VQB7E '3A8&amp;*L1&amp;4)&gt;7P,40YT( J_4 B7ANT!V,$J09-\V-WM'&gt;U
M  3-M:'M1EH&lt;:K]P;J=&gt;='PGNJZ /&quot;AR36?=#&gt;I=V&gt;&gt;8([$BN0]&lt;(LK&amp;DEO4
MF79A%-R8;CW&amp;$_U:+&quot;O^I5Y]&amp;T;;_Z)(@,[!;G;71LV#(/$?M\/&amp;5L5+JS.%
MX&lt;(I1'#F).=6_(V&amp;GL,BIP8S5=SJ&amp;#=]FC*48KDW8NE6+0&lt;K$@:4@+.Q!8]W
MNY?&lt;)A9INJ:EXFEU-E36E8AIOC9D]I!\_!93HNJK\C6T'6 [C!&amp;,D2-D5#18
M&quot;=7_S%(^1%U?IJHR!,BLC&gt;^DX!6FEYZ;%(TW&amp;8$FLXI!G10QC5=RP$R/[.$8
MQST2\L8'&quot;ZOA8PGW(*5RB^$9-.HQ9'L=LW_*7-I2RH(5J@&quot;?R=!WOL!6H5$#
M[AAN&quot;3R\VPIO%WGL,PO;JU,4C\)]^&lt;N&amp;Z,RCZ*_AF B?*&amp;2&quot;=,+J&amp;-P9H9&amp; 
M(%/CUD(**ZW5(R6&amp;H-Q,/L0U&lt;\W QO'OK&quot;G(&gt;@##G2%VE6]Q1L,R'CAVQ(DD
M&quot;%@D6%+5,=G&lt;0/8BW=%'#TDK(SI@-+A76LVU7-9O_2!9$&amp;\MHE[&quot;C0N@&lt;G%'
M,XB-@/E&amp;Q7DYB;B-&quot;M3HML\ ;&lt;H62DA%CO==,V&amp;W.?.Z_\G\:GQGFM,8 \)2
M-;(Y$)TC0Z:&quot;3^&quot;,)&lt;P,F=; %T^YRE?.&lt;N&amp;!:PY,8&quot;LH#X8,)'&gt;GSBPYM+HG
MKMT&amp;XTS$ME,BH-:G(H4 $&quot;FU?GA04J7&lt;A/SB#^&gt;R.&lt;_]B@3&gt;_))HM*5*1F45
MFT3XL.&lt;XN_+4:Z7NE8%ED,DJU&gt;&amp;@6ZK@).5V4TH6,F95=%#L-GC9RY$,V#KP
M._6= 71Z5V4491][8LJCK)3-8UG%3(Z/2^)C5T[9H]&amp;EE&quot;@@YJO3! S,V;D4
M&amp;J4G%91)P85(=6![\W;-XZKW&gt;ID8!.KF\OK3=C&lt;X3JG(H[7B15K;09OJCB&amp;^
M]!V6&gt;AOD1X&gt;=.*@T#7^?&gt;IKAQ/^J.5)6U9@K0L('&quot;ZXM/=3V6 23&quot;N)$RDN/
MC2#!WV;RMY$&quot;29O#3SZ&gt;^-_+2-G2\8?5R23:,(-8A6,P*YM7+[&quot;T=^Z?.M-.
MK^?G:'MB+\/'8OQF,XH16O[49-N'-/(5$J;75@*H LT2-2;V*,TE/KH4:&quot;&gt;F
M1IUE&quot;)QU5,I7@*6T92]@&amp;H@P-'56$&amp;N$(3O3?&amp;.V9Q%&quot;=?=U,1LS?E\Q9&lt;&amp;P
M:;G%@P$68 5F@T+8&lt;I\6'1V'8!RF@*7',FN'%CTA*G'D?0;!12+64F&lt;%::Z@
M% S(6CCH$RJ&amp;/(W'5U,#:#AB9UEV!.66/^;A69X';M(4$#25: 21&quot;3[H:0TC
M4S'H!(/_1FI* &amp;KCQGN3E$&lt;RASA6!(&amp;?-&quot;\DV 800 +&amp;&lt;U(YI7X698!*4T+&gt;
M(87$T7&gt;(UV+RDV8S8Q[U8A.JT K\]Q4&amp;E8&quot;)6#&lt;5*&quot;S1YF*X-H%N$D6&amp;EBAI
M-W&amp;[\(FM48B&amp;N(@N)8&gt;UP1H.UP8B&lt;WGT\8 HQ J=DDS#IEZO(7LVMGMKEA*X
M2#42*(%= 2YTIA-+$&quot;@CX']&gt;,RL(%'%75Q5;QVZ)U65J-XH^H3BV-'IVHR_ 
MEG[&lt;2&amp;RNF$;$(&quot;KRU#C&lt;%D%#0%7PEWY853HDA4/PM(2_QE!])&amp;,_]R7) 4A3
M\%$&amp;-8 AES'995+81P]_17Q=6&amp;SN(1M[TT/&amp;$U;[47E&gt;90+'_\%\U0$8$V-;
MQ;%&gt;'6@K'9*&amp;R1%'0J8VPT@D2&quot;0O8_0T\L@C8L&lt;1,I&gt;1*(186^!&lt;M5!D%:8F
M(2(&lt;:Y(3,]48F'$B8H(?(@@&quot;)40#174$9T,C*A)KE76*P@8(#%$L1G S5S $
MMG@7&amp;P(=#'DRQL ;&gt;E&gt;1VT=MMD&quot;40'E1(1E)&lt;J%5,84U.G)4R-0A=S=$2'*5
M!4F0QR-0@B=&gt;P^43*@(B#/=+!T1,&amp;A&lt;,E=)66GAFLP%P._D?\%,#.U&amp;7H056
MEQ&amp;)?D&gt;9H!9,) -ZG&amp;0S\P@&gt;8D),2RD.+G@CE11ID,&amp;!,:6).3A3=Z-Z:\(K
M8D0BID*1R&lt;!J\:@-BT ;W0.:\E-TG/_0&lt;-S!=K32/?-19&gt;A5B)W9##-$7E]G
M#[&gt;6&gt;[VX0T3X@R&lt;7&lt;&lt;&amp;E'+UI2A^9FV0YA$&quot;86^9P4ZF8+D_U&quot;LS9.*!B.NA(
M?OK(0=_I83_D+2A!0N!428SHE0;(#/4V'%MSGYA2&quot;&amp;H29D&quot;4&quot;/F&amp;0Q/R8)2 
MD*A(C.-U? [:1&gt;22@%=71COTH5P!/Z5&amp;E/SI&amp;=&lt;(B''9FMII*XUBHJQ2&quot;'^B
MA4CX3=6R/C2:4H8)EZBTD89@HTH'I&quot;/&quot;1L0#=$^&amp;+^=5?L^!GQ&quot;EF2]*%P,W
M0T9*?!Y88IX1%26)5%&gt;J0KIRAA.PF-U0/%IPG-J HK@V&amp;3RTA5CEA8=Q42?(
MH8I6%&amp;3(!.C_4RF&lt;)DZ*YSG/]*7+)A UAJ N&amp;J&quot; H#@&quot;VJ/&lt;U%P; @&gt;(M&amp;OI
M\(RG\Z.A^9D 2325LA&quot;?B73&quot;$8W--Y)@E3UD&quot;JB6^!)J&quot;AMH2B&amp;(ZAK[66IN
MY@:M) *7PFAYUC5X2I&amp;*^A/L!'+.6:.&lt;XTY()&amp;\+X2I%!YM[1*I@^@*J,H=I
MBG1A4DOG52M_D5RD%8&gt;0ZA1&quot;IXB/LX?KEI=9DR!$FA@2*J3&lt;\3)Q)7S(&quot;A$0
MLIP(JIQ,BG9)F!EZP1.296)'4:%8\VN,Z8_^P'JZ&quot;6Y$$B5;)03'F)[Z% %H
M-(VDF:Z]R(275CW]-9X4,QTV(XSI G+@F&amp;J^I&quot;&gt;T2B%BECFOE(L\_S=C*&quot;5_
M&lt;J(EFXH3)&lt;&amp;,_\JP&gt;8*ET:EE58-BJRJM.11V4KD%YG&gt;M+W&gt;H_)H!.UN1&gt;R5V
M3O8WT2.QF9:NK:JKK&quot;I:&lt;-.43[(EN2&amp;QG[(*D?44A,DRRTJI[Q@@S+&quot;T+AL%
MU1A:^0JV)$$$E-&amp;8O:)X2K*PA'!\8(!RN9D&gt;Z&quot;2-1DJ=2 !'&gt;!6VKM:R*#22
MN&gt;I3/&lt;:&gt;+8D.E,@ATR5_AS)(V&lt;JW'X!J,NBX.Q*TT[11;-EU;C-3P&quot;%U&amp;W2*
M&lt;,$%VG)G$2$C()&amp;JQ8B&amp;I&quot;6=DBMY7)LNFZ2DI3EL:-&lt;J\&quot;9 AG,&quot;^34QZ%-0
MJSMJ.E6)O8L&lt;9BML_,0[C(%&lt;+$&quot;Y[+5]F_^SEI4(O)=80*0J.Q,[O,$[(Y&lt;Y
M2&lt;&gt; &lt;DC;O?\%L?LEM[=Y:3JDN&gt;/TO.(##!GHLNR8?80:O(' 2E&lt;3N,O[ONC6
MA/9+?OF814$0-]&amp;7M3$+OU4BG@&quot;\4VLI2:VKD$7I5_)KO0(&lt;J?^H5$/*?B07
MKP_,'O1K; &lt;B9*-Z?K&quot;)EA;H(&quot;@S41=L8T-2A+&amp;TML4Y1X\9,=E;PMV03F.F
M'6$)3@/&lt;H+EF$H#6!Y&gt;9=#)A1S&quot;&lt;75-[9EH49IRP-;JD-BQ,!:8KP/^I:+?Q
MA*3R=B34PG('!ETG6:%&quot;E3I[50YPC&quot;X4Q H8,&gt;6R?:JB5 &amp;C1[TZMP]PEF*L
M?1G\LFM,I(^*#3?_REJQR;(*\0EPR)IOK+U78XJLB =*9:4996\H%&lt;?8=\ &amp;
M;&quot;?:0Z'82R:,I90UIFWF14-QJU:*_,=%HVV8L9P6$BQ&quot;]GPKQLD:.7$0&gt;J:=
M))&quot;&quot;U[^_1ZZ 5'M3,UP25(?&gt;&gt;\NXG,NZ++%+E(Q&amp;%+GE4+V#;,KUA\I_4E.'
M^S)&lt;8,@-1,L@&gt;&quot;]P2\Q=Q,A3VD(F*,W8?'@KH;LRA0O1G,UP:;%\!L[DK'9N
M;&amp;Q^&quot;Q[E#)&gt; )802L\[P+*;Y\:*;#,^,B67V;,\#)\\7F&lt;^+S&quot;3^',\);&amp;OK
M(''U'-#OZK8(+&lt;;M6\RON-&quot;V5W,0G&lt;U-K,#I/- 3K5 5G='LC*T&lt;S;X?_QW2
M(CW2)%W2)GW2*)W2*KW2+-W2+OW2,!W3,CW3-%W3-GW3.)W3.KW3/-W3/OW3
M0!W40CW41%W41GW42)W42KW43-W43OW44!W54CW55%W55GW56)W56KW57-W5
M7OW58!W68CW69%W69GW6:)W6:KW6;-W6;OW6&lt;!W7&lt;CW7=%W7=GW7&gt;)W7&gt;KW7
M?-W7?OW7@!W8@CW8A%W8AGW8B)W8BKW8C-W8COW8D!W9DCW9E%W9EGW9F)W9
MFKW9G-W9GOW9H!W:HCW:I%W:IGW:J)W:JKW:K-W:KOW:L!W;LCW;M%W;MGW;
MN)W;NKW;O-W;OOW;P!W&lt;PCW&lt;Q%W&lt;QGW&lt;R)W&lt;RO^]W,S=W,[]W- =W=(]W=1=
MW=9]W=B=W=J]W=S=W=[]W&gt; =WN(]WN1=WN9]WNB=WNJ]WNS=WN[]WO =W_(]
MW_1=W_9]W_B=W_J]W_S=W_[]WP &gt;X (^X 1&gt;X 9^X B&gt;X J^X S&gt;X [^X! &gt;
MX1(^X11&gt;X19^X1B&gt;X1J^X1S&gt;X1[^X2 &gt;XB(^XB1&gt;XB9^XBB&gt;XBJ^XBS&gt;XB[^
MXC &gt;XS(^XS1&gt;XS9^XSB&gt;XSJ^XSS&gt;XS[^XT &gt;Y$(^Y$1&gt;Y$9^Y$B&gt;Y$J^Y$S&gt;
MY$[^Y% &gt;Y5(^Y51&gt;Y59^Y5B&gt;Y5J^Y5S&gt;Y5[^Y6 &gt;YF(^YF1&gt;YF9^YFB&gt;YFJ^
MYFS&gt;YF[^YG &gt;YW(^YW2:7N=V?N=XGN=ZON=\WN=^_N&gt; 'NB&quot;/NB$7NB&amp;?NB(
MGNB*ONB,WNB._NB0'NF2/NF47NF6?NF8GNF:ONF&lt;WNF&gt;_NF@'NJB/NJD7NJF
M?NJHGNJJONJLWNJN_NJP'NNR/NNT7NNV?NNXGNNZONN\WNN^_NO 'NS&quot;/NS$
M7NS&amp;?NS(GNS*ONS,WNS._NS0'NW2/NW47NW6?NW8[NP)   [            
M                                                            
M                                                            
M                                                            
C                                                
 
end


begin 644 cart.gif
M1TE&amp;.#=A0 +0 J(   4#!=S&lt;W//S\Q87%NGHZ0\/#_S^_&quot;0B)&quot;P     0 +0
M @ #_V@FROUJR&gt;EHG%&gt;2*@5OGX5!X&gt;.$7)HQ+ %E\%?&quot;L4QWYWO?=N2XO@N+
MI_O1&amp;$#A4'&lt;D&gt;C+)W8C)S,VDTEZ0M-)&gt;7,&quot;2.&quot;8D3[?8M'K-;K&gt;7U/1S5:Z[
M&lt;F[X&quot;X7'JM!T2DT&amp;459F(Q4S2XEU9V9S@XT=5&amp;.49!YZBTY!C&amp;YH1E^2GD%)
MH#YZ&quot;@ *I36M+'@?4;)[?7&amp;CM[BY6(5;?89;87L[KZUTO*NB7!3$$&lt;$8BH=(
M@E.0S\,S8;57=;&quot;]3,?&gt;G=;6E3E1&quot;]@6VU7GR*&gt;_NC   -46SJH%A!'Y2_Q;
M\ZH,T)O$X4XS 07R 8HPT%:\AQ#9&lt; C03(XQ;Y9$:!0Q\?_0CG9QM/FI5N^/
MP84:_Z!,H9)&amp;-D8;7-(R\8E0)QEZ[H&quot;DN9 ESS?H/.J+2&quot;&gt;@F7.J!!CM$7&quot;(
M4H8&quot;ASZ&quot;8A1#&amp;(52B6K=JH8!0(7S&quot;@ 40$&quot;L6 D !P!( @&quot;KP+9K'P&quot;4._&lt;)
MP*1E[C9+:_=K*KCSW@)DJU&quot;IVGD_ #,4&amp;_B$&quot;[T,S@HL .0NB[NJ[D VP!@Q
M0L4.&amp;&gt;IM '&lt; NJ7(&amp;DX [56L:0]MS?X-B\^O@\!_$V9&gt;L+ES 6FV$+^]@#O1
MX[F3N 9L7#4JVE22&amp;S,6#.CI&lt;GT5D./F?'QQY,9&lt;PXL/-+R\^;-*EP=,&amp;!-\
MX;:W*5^(KI#^&quot;_ #U?[=;WY[8 +_;;6'%V[2&amp;066:AD4ET]92467E'#,J4&lt;:
M?Z(=1U$R&quot;J#7UG[I[1&gt;,9#Z(=9M7#ZI'HFB72&lt;@?@ 4$T&amp;%Y3\&amp;(H6@4U@4'
M@&lt;U!=(=7,39HW0E&amp;7:&lt;40EXY]]LI40$H$(F!+;4&lt;;%']R!F4XU5IY5\&gt;@+@A
M?_]%2.-]ZMTS$(XG)MA094&lt;6N(&quot;61WY68U,B&lt;J;B:CFB=22=)&amp;ZP98$G*B7?
M!.@Y8%]04N&quot;(Y7  %O=6FS1R$.=_#NH#HH.W!2FAG\Z@UP:$3J)F9YE/K.-)
M6&lt;Y=ITI21::2ZJF/#;DD!+N=!408B6:('&amp;6,Y=,&lt;92==Z6L\2!BZ9D/PE6=H
MF4%PBIRQ_RIN%VQSZ94IK)N'XF&lt;IA^!]R=-VI#7K+6\J)H::E[7(D^:!U6JW
MK'&gt;PFLALI8T6Y]^W$]3J!IF-_G,I5[&lt;EV=2IQ 4\Y9*FKNF.:O0TI&lt;.IB&gt; #
M9&quot;J\8?3KQ+=@-B&quot;QF,WF+(C=PLLLEW,R- !2&amp;0NV,&lt;;+4OOQ&lt;&amp;&amp;UQFW')I@U
MELG*&quot;L&lt;RCG%.-M=)-VG\[UUITCR&lt;HYYB=F1G&quot;FM:,K*&lt;[J&lt;NQ^M BM?0\H2[
M5;]O9&gt;&lt;&lt;Q&amp;BE*M]&lt;UXDF6]@53.&gt;!?EQO:9YSHE+L=AD$=,?@8E\*.Z^90WA&amp;
MYHMZ*PPN! S&quot;YN[=('_Y8J1#YWRC/RB^ZSB!YV;94&amp;O(V@J7!/\41=@:ETS^
M+42QQ*$[M,WS?N?QQX9!)_D)XL#PJ%'VND/M/*P 2UX+A-YPTJP1SU%-.R'T
MVI,&amp;FLSX]O%@O@GO9WJ.&amp;5?6C:,U^/2'/G! 5=+2,_=Y&amp; ];&amp;&lt;;99V[U$B]W
M&amp;*V;YVOH?.%T53]&quot;(&lt;?:S8)IW64 HL=V!WGGL&gt;8_7B)_\*&quot;!YAJ%!\BAY&quot;%.
M&amp;8;Q5)&lt;%3H0&amp;&quot;HXH0]N01\'LZ&lt;-:%F21MG!CD/RQ[V63P5J 5O8?JD$(*X13
M'P-I]P?_L ]QDH'A__:R+R3]8P&quot;P09&gt;?4H4!9]7H;SL4&quot; [])#WI,2T@&lt;R.B
M^53(#%30C51YJXJP.!;!/-3K&quot;Y@H GG_AJ*&quot;/^ A&amp;Z$H0B5D-T$*O@U?+X*&gt;
M9QP$!L\LZG*6&lt;TNNYA,6$(3N/X=[$#_4&lt;CI.M7$@AAF,:.;%F#YL1FK\05P)
M1R.TR0!1 PZTX./(\KD[@4 W%TO7F[HU+ F(B$DY,]D@BU6[J@6J&lt;4=T5AG]
M&lt;(9*6;*!SD#!)B0HRPJ4LI55-./$&lt;B*)@D&quot;0E0G&lt;B$@0@8YR96(F[VO@)=R1
ME5 QLXO0;,0Q=G20!&gt;PD.9%L@A&lt;,0!&amp;2!(,1X Q$-X7!&quot;N&quot;@@IK$[ HI3%&quot;\
M58[&quot;F98KGP.QZ8-8,I,3)0!&gt;=&lt;#I3EU&gt;R8GW!,[P?$$-CA@T@.0,QSC,,4]X
MP.&amp;6$2Q&gt;)'KI_\L#/L,&amp;3@$%*H8ID2Z88AW'K(@=%DB$GQP!HUII25@.@S2D
M?04PA12&amp;2'M9T#F&lt;@Z 6]2?%&gt;N&quot;3+7IQBU5JW50L@5 %2G&quot;F5BDI4*\PQG&lt;J
M,Z)/I2D,]&amp;G2EHP#%]L !4CZV='XU*41)H%8V\+9A4@P-9&lt;ZW:7/+,;6MKKU
MK7&quot;-JUSG2M&gt;ZVO6N&gt;,VK7O?*U[[Z]:]N15I$&lt;.))FY$4*FE-;&amp;(#&lt;!C .O:Q
MD(VL9&quot;=+V&lt;I:UK)_&gt;@-*&quot;_$;#K3LFO)0K&amp;C-R+K1FO:TJ$VM:FO&quot;U2IB36!;
M4T.=5DO;VMKVMKC-K6A;&amp;\Q5P.4RW5+84R8X6]T:EY59.:YRE\M&lt;T_]:M:.$
M$NSSA&amp;NP!W*MN=C-:7:WR]WNCJ&lt;&gt;T%TK(TFD-;3&quot;UKO8;2UZU\O&gt;]MINNK0Q
M9]I&amp;45SWXE:]]LVO?FT+4$\L93K)PM%79;O? AOXP CV;GW!*I0;+#C!$(ZP
MA&quot;=\O =+KBI@8,.#*&lt;SA#GOXP_Y5 ]):NV$0F_C$*.;PAFF#23&lt;2.,4PCK&amp;,
M([Q@)M&amp;N 6Y)0XEGS.,&gt;^SBW#W8!@$G3WP3]^,A(3O)M-]PZ!&amp;%AQTJ.LI2G
M/)X=JP#*4*:REK&gt;&lt;W7L\$!KJ!&amp;8=IA9B#7/YS&amp;C&amp;[F]?E14I7C=W@2BA(_PF
MDREDV&lt;AF3K.&gt;]VQ;O.AJ#WBI58P@@5&amp;O\*+_8?:P(SF4A LL\_G1D$[MD!XD
M,.L\)F([:EEY&amp;,W!&amp;&amp;;KI$..4L4V%&gt;E2FUJ7D5G R$R#6,Y$S-5X235:A)SJ
M]2R)2&amp;S&amp;YA,$&amp;QG0/IG4IPZVL'\U($L.EV:)NG*)HO,9Q##.U;9(#]! &quot;.PU
MW'G8V,ZVCK,S:&amp;.K*BK4-=BS&amp;898&gt;AS['673BZ]?;&amp;UMN_O=%=-+V'+T%$X'
M96?]H5 HL1=G'ZK7T? .N,!7&quot;XLKJ,:6.!QUG@?.\(:C6H)@Q#,VJ5AM=CO\
MXAC_E&gt;]&quot;L2QSHT4_5*)OQ3-.\I('M5N%G-RM5]/HD9O\Y3#W1(IHP]8&lt;FVX?
M)'9YS'?.\R&lt;;\BLB_T'B*W6^@VOW_.@7YY$MH4-G0NB&amp;Y0IO-]*G3G6$:)&lt;$
M/1/YPJG.=9Y;&gt;3;*T#IRC=[ULF&gt;;R?N@C74C86'?FM?L&lt;'&lt;WE*4-F+K3M:5Q
MK4S&lt;]X[Q$O&lt;%.1!]JI.A&lt; !!@9?OB#^[9@^#7T#IN-6)C[RVF5PNS-U&quot;2=L(
MTN$ESWE(0]D9$'EPD#I/^F!_/9^Y &amp;31(5_ZUN^9[!$1/&gt;O#^\][NO[VM85]
MZ!__YC4TWHJ'Q;WP=:K[A\B^]T&quot;Q$EF'SWS3%C\&gt;QX^M[]=.E-\W__KA&gt;;XN
MHF]TZX?9^]@/?^QUR?U1 *BQE[V&gt;]L7/_I:;L?RCR&quot;SXC]+^^B-O_&gt;XOU/_L
MI7YR^_O?OU04:Q978;PG?5OW?PCH3V.B+?QW?P5H=/B7@!*8?P:R &lt;1%?@\8
M=1.X@6XS(!=T6!$H=JN'? W(@2:H?*.7&quot;CSS:^^7@2)X@C H'F&quot;!#E!T@&amp;?D
M@F46@SJH'&quot;]S)YMW7@3(@@98@CM8A+8C4J GA XHA!!HA$Y8?5)%!&quot;$88IDW
M(558;K&gt;C5.WW@T^H3-&gt;459U54O,'!4,76H\!6H1#;_3$A&gt;(WA@FF&quot;6ZX74ZR
M;K!R=&lt;&amp;'7&amp;PS@D.8(&amp;R1(90$9E&gt;TA5WH5&amp;TB&amp;4GH8#RP.W&amp;XAR%B$SE6%*D1
M&lt;DDH4 E86H/X8N3V0+0V/ 4%$5:'AE&quot;1&gt;7-P'23_,Q?O\7:N5U1(QD@?9A=&amp;
M(E-FT'1_IWJ#)58?&lt;2KK8B[+(2+3%2S( &quot;&quot;NZ']TZ&amp;.L&quot;&amp;*?&lt;1O#B&amp;,H,4?B
M\6&quot;_ 1H?86&gt;M]A67]FJ+B'3-9G&gt;7M8W&lt;V(W&gt;R(UTD5&lt;N=5GC&quot;%G2!8W?!C&quot;H
MZ'I3&quot;&amp;$V=HW+I1F:=R^%8B/* 8:BE(-U4C#_UXX2%B,G!B4#\6P#:$&gt;9TV&quot;I
M]WC)*$ 7X@\&gt;*%;P.'7^B&amp;#E%9'+]23\5H&quot;K=XTUIG+N-&amp;A$4Q5889$]-Y%O
M*  )%Y&quot;WAA&quot;%H5T *0P!\&quot;=QZ(QW^ 6/N JU4WG8UW1)-HHH!ER^=2%O-UL5
M24_0IY$5PSN^A'KM9Y(0_T:+*?9&lt;&gt;B@3J))]O!&lt;36E=1/T&amp;2)&lt;EE\[..[JAH
MUE5?D0&amp;/S@@.&quot;P=Z741]K&gt;&gt;4&quot;&gt;:6QP5F%\B&quot;199_/. I9695W5!_&lt;'E@?7F$
M&quot;&quot;D*FG MN68I&amp;&amp;-)N[%_$F&gt;52IA\C B#?UE@D2ES84=,E==D?P(A.!8T&amp;&lt;)H
MN*8H)+B8RH&amp;43^59@SB9^H6:E'D&amp;0MD+4'E4_T(P/-(@&quot;A   %,DK2*: E0E
MT1=F==B%JFE?P7D+')4=T(*(LQD5,Y@DX,80KS4AC;D5O&gt;F%(S&quot;&lt;&lt;6&gt;=[#5X
MN]5,]X1.8&lt;B=GH0$:8*+8 ,5*2AJB@F$TDF:1G4?IYEFV&quot;E;5=F)7T!FBO9:
M[O_&quot;-6&amp;HCH.6(].YGM%I5$CQGF@6GUFP'N8  .AG&amp;;EV5:)&amp;+!V *G#$(%79
MDJ&amp;IGEKQG\IDFL )GZK%0]&quot;!'4*@*Z!#$( @/%JTCAI*%&quot;N*G,9&quot;H-LG&gt;( 9
M!Z/75(RI4U68*@1UG'8XFL$!9PATH:V65;CQ-8]9#AF1#/W%E5RF&gt;V697(!S
M)RC:.G 81@P1&gt;&amp;!IEVGE%)D1-L[ %D:3B[Y2)%?(EKYGGZX#I#&lt;0AD5&quot;GC93
M&quot;]_T #&gt;53E/%$W7)&lt;$Z:'@X9%R@9%PMX,!DR&amp;9DU+/5!+ DW%B,4(&lt;]398J%
M GR$:W/Z'&quot;NHG5&gt;&quot;EWBVD!917&lt;.@&lt;E* &gt;3S&quot;'0%EBT/_Q6I50 QPX  )=Z=X
M^A +HC X1&amp;GD)F^$&lt;)MN,34+F ^V^6W6P1OU=@!68J!UFA5*,GH46EU&amp;\)(4
M,Y\&quot;A*7$&quot;:*(&quot;*6[R376,3-:@T0ZZIPN$UR=!&amp;Z! HQ=F0M&gt; W925(:O\AO\
M,*@W!A@ R4/JV*Z_FECA-!;+N23[$R7&lt;&lt;I,GYRH1U!0Z&quot;7RO8G VY!)@4YZQ
MV2_(.I);XX$&gt;AXL08VYRQ*1;!GLCTIS&lt;86MKD9A Z:YINJCFAJ&quot;71FGSVHR[
MQ6VVTIFO=AH$DS:A-#%H*IK@YZPQ0';SPVCHB42O^J^A.##*^ #F.JS*&gt;*TP
M]WP=9RBDDFM&gt;11VA(DARDB(G_U ??1(VC)I8Y\=(FOEM&quot;U!X.FLDWP@7N0)7
M,J.-?O6U-7=W7)LQG5%IRFEU(]H!3U&lt;J#/-GQ/*&lt;00N87X20H% GA&amp;91/Y6E
M&amp;DA:?@B=+[HF@J)WO:,S$/NS^K&lt;1K$JD1FEF#O,P&gt;8.&gt;$YL#]+&quot;?_G*;&quot;7N(
M&amp;8&gt;=(8 :4NE\HM4&lt;Y9FP;V:D&lt;L&amp;WQL&gt;&gt;+*JZ;?!G .DW4I(#(W-=F-NN&quot;2.M
M&gt;3BW?DNGRG&quot;X?:N FPHNYRJKHT&amp;S'&lt;BZNQ&gt;@]/@OGWH!(Y.8S4&quot;J&lt;&quot;00UV.+
MN-B2 X&amp;I[P:LNL9-*9I:W-M[CH).=J91Z)FLR)NZRLL&amp;-8A-*T@'0&amp;D36 2M
M&quot;2)4)/\'K'I*)Z^Y6N%K@-3T/+&amp;0)8S!4M3F*RV:O(F;&gt;CBE0.NP$U4*5&quot;8W
MG!^PG+%9DQ34O_4E9%RT K&amp;FJKR9OD&gt;YOFH@9'%Z5-&amp;X4&amp;+)4SJ@O8JWNZ2;
M-[X;PHD%+9V+L-[+9JKX3P&gt;LO@G&lt;:$S)#0&amp;;=5(5J3&amp;L9!)L9(;V'+P+NHJ%
MMX8P;;DB#D7\F$)J?%%CID%@H1&gt;EA7DK%6O)G3_@P?!FG8EPBK@KQAC8Q#Y5
M$Q(#O&quot;+,PU/YNZ$Q?PL\Q4=&amp;QO-!IM V44R,HP(Q&quot;Q:&lt;5CLLPW'\@D48GS,G
M/8*DN:.%P;QQ((:U9&quot; &lt;HV]&lt;D#MHH)189'9,A&amp;:D)#-(:;K_-&lt;B4W,-RK(-D
M?&amp;6ID1R;;(/D%[EZ&lt;ERBG)&quot;5/,D;B,GIEK,;K%K&lt;&amp;W)NQL)N3,H &quot;LPYZ(2(
M;&amp;2JD*M&gt;3%N.C&amp;MD0:ZY1\M:&amp;JVR_(1X_ ^!BCVKS,K' URC8:G//,O37,C#
M;(35W$.K0'&amp;H&gt;[Q;:H#VJ\S07,H82H\=VHQ@^U+V+!PV-K86(\@:5L_B2'/^
M[!M;*]!1Z)[@',VA-&lt;K$?#7.:4-42KO\VL95S+)X2*G$209;97MN4[0.VKGO
M;,@)[9NZ&gt;&lt;F,BI4^ 0M?\Y)+UP[ NF.90&lt;?9&amp;!LL9M&amp;U-[%(TE^QC- C+0?E
M1&lt;W\8HO'BM$-JW26^ X336R9VK+F__=+(G6JZ0RNIRM1XKS3XW?0Z=2_2.&gt;/
M^KK$&gt;'.A(-'29_JR0'B]G/I^-V%3(3W552W,)36@\PR%N,L[)OH#M6K&quot;M #6
M,DH48? :.#9&lt;_3JF^^ (/)73\)R&gt;%0VC*76^;,Q0@5&quot;W'/K+#:34J^D# /.G
MN[-32@ [PD35A@W'SVH1ID#%)AB&quot;6E/:QA*Y#0U;N8BL%WS88MTOMTL=6 R%
M(E1LRT?8(,W9+L$Q6'UT?@?!72!%!@+*,/(RQ3(@Y+-Q6&lt;&quot;1YI)VS3LC_;06
M*!12NE!&amp;L.&quot;N4+L(^!K/:ZW6GQV,[:G1XI=EJZ0:90';H'JQ N,&quot;!V!OL_J;
MAX527$46A?\7N98&amp;:]BAW*'@3OC0'L)@??TZ!@ @E&quot;AD1ZSCS9U-R,C)AH^Q
M;VH*3X%,&gt;G-G4L;P2@J[JS5+27\J;220&amp;4#0FI&amp; HND\-03&gt;&amp;J^\5'^]&gt;DE!
MH2WIRV*X3]6)RW_&lt;&quot;![GW9XM0&amp;/U:D%&quot;5=3@XI(WD616P? !-/$K6&amp;WB-Q.&gt;
M7&amp;C,#4[F*@N(EQQE1;' U*MKWSO[*G'K:ID&lt;T=)\HWK(AO:ZLW*M3?WH!HQ,
M%3W4'I6#,+O3I&lt;_Q,/J084;%#+,]%)Y;KQB.*B2Z/^@LTCGIB&lt;E&quot;' J#SV2]
M.B,(L%&amp;K?VPXBF&gt;R(-?EK/Z0S:OJ5!IY;$ADJXU8QJ2A*3(&gt;553_ODK?D2T,
M2B!6&amp;ZMITT^1VJ/?AY+,&gt;;X&gt;Z-0!:S _:)(UYH.BXDM.0DER(NB2[G!)'FW@
MHC98![]J:A6FJC,$N0O&quot;&amp;VCTA1R]11S5^!0%[G';G:F56=W$ 9*3HZ\SK&lt;]I
ML:B?[&gt;4.9E&lt;N98BN6[A6V^L&quot;]]MEW%;CJ*02C0:1&gt;E?E^%+U_E@%SID4R]I+
M'8&gt;&quot;TW&amp;!;HTD]=&gt;T;NV.R=$)0[*(I&gt;[KKM.%5&lt;#1 (N-K3'F54 #UNP0+W&amp;T
M:G@&amp;@EKXV379+E:\K&lt;K MN3MYGW'$2&lt;],AIJJ\3^1W9$.1O.+/&amp;&lt;*)84&gt;B;+
MW0R=$=HB2V1BY2,-&quot;J\@,(_K^J!3@I*5_Q/=8'YY,R_EF&lt;%JKC*[I#L?=&lt;YY
M,&amp;]4T-M +%4I4+F6WDJ_R_3U/K[TI9O(8(=:J:Z3+\F\=6[#08J[@$X9_4*S
MKRZW3&gt;GP&quot;]_6M#OU!/9O3RU+;[R7JC6).,!R2@?W8%GPM7BRQGOL4)#BPG?U
M/H&gt;'T.:9H&lt;D2GG)6IY#YE&amp;YM-P'(#$_LK;:)3$&lt;6#V*:28&quot;I4S.&amp;GPCHKJY0
M#FI_DI^XFB_S]8O&quot;/63=]]%X.2QQ@!CZVG1N.1,7!&amp; :%ZL=G)[X% [5BLW\
MEF2\J_]?+G;W\ S&gt;3@ $NB(-R,JXLUWT%UUQNDY0P,\$?S:-SAGS5KH&amp;@QK,
M@-XK&lt;@^B^!'8LO^/]YBVH:62]VI_U(. FFJHA:-EF@@ )F9%JS2C@+TXZZT+
M_R#FA62)354#*0U+37 LSW1MWWBN[WSO_SR73RAC$&amp;\&quot;A9%R@D%H  ;P-9T&gt;
MJ]CLQ'@I,)(+BC0:I4FW0:VMK&amp;Z&lt;4&gt;'*6;)LM&gt;_XO'ZOONK\86)(@5M29X8J
M-'16?&amp;N-CV9VDH)@&quot;RE,@6QN/8!]&gt;A83!&quot;P6(RA?+)60JJNLK3&gt;=KS5C.Z0 
M'@4CM: &amp;3S-&quot;;W^N+&lt;#&quot;&gt;@0#LW9CH&amp;!EHZA L%G2.\DN2@H$ @^6&lt;)/%X.'B
M5=102&amp;7$,'4&quot;#$]23](2A.DUY7CVXSYO[O6A*=F!Z)EKA&quot;]8DB]&gt;*,#_&quot;T.'
M&quot;\!\$&quot;-*]/;#SQE;&amp;$,L0A,C28D '-,(*SC1#+]&gt;A61$8??,0Z@ACTCBV+:+
M2L@%* F5W,F3E&lt;QO'1$)]'9HTRF=LJ(5^\E3(#N;3)3(VRA(G4@^3&amp;?P*R/*
MZ )BB'J*';N'J&lt;6B-N!MR%7KIKHW0WTM)=OCG1,W;%#)P7 T(*&gt;8=Q *4&lt;(+
M&amp;0J7:)[27&lt;P8IM)(/,*&amp; &gt;O6*M)@(QMGD3!J3*K*%0&amp;K^8)T,%Z*ES6K7HUZ
M$(RLKU%@\W)!=D)]'7V]P1C['FNEUVJO[6*&quot;0RZVQ8TG7TZ\MIW.0']+9TTR
M&amp;18+=;!1J4- GC[*1%^PDV&lt;K#VRZ&quot;'.AB&gt;+=_XTAH3RXI:[&quot;X+86Q;N_RFF@
M?KI_ZCJ0=IH6H_#RC#KR%20@+^X1(H1\FP&quot;0TS3__;&amp;0-2VPT!\$&lt;:GDU7VS
M=+C# !QB5XD(B4!5X8ICF95%=I*0,=DUN#&amp;X22 0R&quot;- 5P)^Y@F+,SQ%HP,L
M=%7@+TI)-IH$$T;#@F$I=#7,@$!6R9,]=JDXQ0-2,ND%&amp;+/\!!]AJ&amp;GBAGT_
M6ED#AS)LI$ I2F*&amp;E6\.L&quot;2(A+S0@9B:?$:$90SGT42&gt;,QIB4X&amp;&quot; V42H0HD
M1D=AGY!M(LHLO0C1I W&gt;B&gt;B8IN?8^0(T-S8(Z:ASY0&quot;7EC\\&lt;&gt;D\#'+*$02B
M9&amp;0(F=W9&lt;I%YI,ZX1?\I5 R)BJLMK)I%=\#&gt;,-4*8'#X5):Y-KM*.?;5H&lt;6E
M&quot;]*7J&quot;FY%7M5KBXD^&quot;DI+,$&amp;C;:0G??:+NCVYI&quot;S[(I6Q&amp;3B*9H4&gt;):A)&gt;P/
MDH&amp;ZW8&gt;@D&gt;/LFY(T\^ZC_6Y)KAEA@3F)M^TV3&amp;=N$^!&quot;2F\#UPNQLB\%QN\,
MC89$VL'70GI07N5YU!QSRHV ',H=9,0R&lt;0-8$#-&amp;GFF7I\,XIQD#FW8*&quot;,C'
M U&lt;;*A_'#:=+!B&quot;'S&quot;=-PL&amp;A(XZ/QFFMN8EYV$UP9N:LM6.1HNFC#&gt;W BP8_
M-LY75X2WV'+&lt;RAJ8_1BI&gt;B7[Z0H#W/'KT$!&lt;)'0TBX&quot;9#5N5;+/UX)L.#-+_
MA'Z0/; VETF-Q1,KLZW!S$G+-:H1D+&lt;0,W\O3.JVA05_AVJ2!]99%6?6$:YZ
M+!#C_87@25F5)7Q^W2LZ+Z]K=2-^N.9ZZE&lt;+VYWB:*T1^*DR2OA=T^K,*PV\
MU%]WU 2#&quot;:J\$(.V!YB23F&amp;#C?=USL:YQ%&amp;50U5^(60:3T$I+J1S?O.CEI,&lt;
MQ7AV\]JL5)N10&gt;0@4*6SR#9!VB7RE[S05&lt;-1C-A&quot;@63W/?@Y,'\A&amp;=+Q6M.^
MS[TH$_0H5O9&amp;QZ?;]((V&amp;1)&gt;U=J0O_[TZGX9&lt;HX#5T@2#@2%&quot;7L26!PD=0#%
M/ (8E&gt;@%T'IDL6W%KRJ66$'%_%6V^Q1O&quot;L&quot;HU#O:_S/#%;+P;$'231&quot;)I$(S
MC0LKO$E=$;W7.AQ L&quot;=/X0Q.. ?#EY'@ &amp;9LV&lt;G2Z+(VSM&quot;*3G2B_(ISJQC!
M05K?&gt;%\D2!.M[5D&amp;7L7ZHE@RX(:.H6-X?DEDP@:T2$7N[I%Z@U@C&amp;PFKL070
M)MI 4QQ7QY2AK* VZ]!+0)2PP0M2I%J*^Q[06 &gt;W&amp;:Z#23:IG/^(YP&quot;[!2=&amp;
M&amp;;G&gt;)N'WIZ@04FQE.T02Y\4'M&amp;1-;'$*0%L8 !(O^DZ&quot;U^#&quot;%A.XM\&gt;ECX@#
M% .8%';-71(.@LR2I.X &quot;0G)&gt; =/-(G#+Z0@#Y383I [&lt;&gt;=-4L!$\%GP;4:L
MG\V@Z4U&gt;_H&amp;.#/HE_J1%!/\]8B9=,@05'CD%3[$T\E.\TH)\##JERN'Q&gt;-6\
M9S^;99&amp;-I;*!6BH2)1HJDFW Z$C969Z&lt; !A+)HR/@Z$Q8&amp;00^!B_:8FB&amp;UW1
M$7 8 [:MH2@%E!),GS6@SFA'*DL B0V=R=)O$&quot;85$(I:64 :!.&lt;P0Q.@4FE.
M&lt;_:S4.6.3#R-BCJ:(,-Q$$9#PS JC&amp;(*P(2.-4NEQ-0CZHF%=#S533C=*H!,
M);T/\2Y$ 7.&amp; 0QCUD^NA!F8H&amp;(SV*11DNX$A$PC%%LDQYRTL5$YES4:C6P6
M5[WR25^/#$4=6\61Y'&amp;C9R/U$T?&quot;F@J0.18BRRC%;1Y *XVR3E73.J(1VP%+
M,AC_801Y]2QC.M%,4K0'K$.+E8Y&amp;@9CQJ'9'0ZP/XZ#VEUQY 5FB/)2M;%N/
M9LHT0 &lt;AX5D30BB9'&gt;2BPF773FE -C,),R&quot;4^9U94P)=274QD*1&quot;%B[5^K&quot;E
M6BM@CTJ!6Y^C KJFEUM19)4.]8661'*/JJX ;;82 ;T&lt;O%8B B);,VS!6/#E
ME4?$LX^,+BG6 SO,16!+E^DN\ 9-EBK&quot;&gt;W *7_'@N/81L!$*NR T%HC#C [Q
MNW_TZ@4;;&amp;*KL;5UZ'('86K8&amp;O^JXL*6TUA()N1D)_?A%'S))G&lt;3-5U3#O4O
MR0 Q\+KHFM#.3K[WE3$[&gt;#AAOP*9&gt;2A&amp;&amp;.H.187I.F&gt;I_\&amp;-&lt;BO *:K4_ [-
M2,0@?_*S/BM7Q+L0CDQX&quot;&lt;2;6XB12K_DHGO&quot;J4/J3IK&quot;,^$I?&quot;3SYT3[$Y_F
MR&amp;;]LA/6/;_XAO&lt;T:(DZUX1NJN^C&gt;=,MOKYBE^[&lt;[Z62'C,YW&gt;QG8+(*DA!^
M#R+[O-$X!TEYW:B;H&quot;T%#B@;F9:D%:&lt;?MSR(2VR&quot;,\2A;&amp;7;F-DULG&amp;R -@&lt;
M@:-BX-B]I'NGXMU=,DJ[R:@[P47^&lt;C_*E:$&lt;+7J &gt;5ZI3Z1L;K&lt; &gt;M8F T6E
M8EG)S&gt;&quot;XW+$.55YRJ )8D&amp;95/$5)7-I=M?H&amp;V==3UJNQH;#J2D14A84!.22&lt;
M#:@\L+G-H&lt;(M&quot;4WQI3I)1:12_?^$IRU,)L&amp;N#Y2RMN$QG*-+(L#2$KN AUJ8
MH;(%@CS@LIG-+O*MIHTOSFTY6896&quot;7+JNIZKP$NW*E]&quot;N'+G*G:&quot;AN8:M6-W
MXUX9/4P%CAU@32--:=X1*@ 1)1ZM7?.(I6(_\GZ@]@ZA[6[[O3@0\G&amp;-EN?J
M/7K/-./^%%P0GG#W56!/!()UY,&lt;N R':,5XM8:@WC#0,,;+A:V @#[;V)2U&quot;
M-P,1&gt;1$N/O8!B9DY=ICA-&quot;6/D006P6MQ5@BZN88ZZ[T&gt;Y:N6MBZ?A%=.O,$8
M@=/##EH*12K@OP$8';=Z.7:^HDFF&amp;45EA0$4&lt;%6?&lt;#V\SO+%?'.JYL&amp;&amp;I_W:
M&lt;4$Y@6+_?M[2;WF@?*,-XQ)L7KDKOD_,%*JCOE0&gt;GWT1\A&lt;[=A?_IR+7-%J4
M &amp;!)P#@)P7154A&quot;2YWTD12W)9W74&lt;VN[\S%$!C'0Q'&lt;9 W:,=T &quot;H&amp;S+$&quot;.S
MM&quot;64EP,?2 M6]7XM5TL.4F8G9 &lt;YTAW\(&amp;)-9!ANY1F 8AT@YBDOT$XDUX!-
ML2LX1F8F-R44002#,74J 5TVPQ#N0%AX9RYH%RQ,5D'PIU!&amp;A(1;B%N! T2)
MY1JW87-B0&quot;OIDT6=,S&gt;3@%QB90C^ RZ^U#TYU4L8YWUYAR_(AW[C!W1+MPB$
M$2MA)&amp;N!,#,9 ES&amp;E7D-0(A#5DO[M'Q'DUEHU&amp;W@UG&lt;F8%DN_P,'V95KB80Q
M&lt;($(E?9':,%FU8)\'C--Q09%D&amp;!G&gt;09Q;;!#\&quot;)8[6-^-.4&amp;&amp;A9,87,JO,=%
M*((TLU1_$QAHLPA%_!=W+HA6@Z&quot;'K4-I*7)R6W 2#M9C)G&amp;&quot;.%,.I6:'6F0&gt;
M?U&lt;&quot;R($8 J8,*-1ONK:,%TA?HS$DQ_&lt;MTZ&lt;^&amp;Y-_?7!.T/%_TQ-%4B&lt;A*F0R
MRX=ZVU5BZ;*/MQ !V^4RO]4206@E WED,B&lt;.QQ=IT5)X,_%C-S2&amp;^B&lt;(+I8D
M&gt;J0898=O!&lt;(.'0-3P/!YHG=)6IAZY^12W_(&lt;HT4C+T5WTLA5=/%:08A8^]A$
MVK0 RF8M1;%FX7&lt;7$;1YZKB21&lt;&quot;0T?\@)5JV+Q\X!XJ2D#V5,)8BD@(C(]:V
M#8A&amp;4%]P )X3/?U4D&amp;)WD*BF)_YW=U3&quot;%L3#@$+F;@KAC:_&amp;;_F3'4(D4IT8
M&amp;1.S316P MA607VS'2E (A)R &quot;^ #!,32VNG'[IW8%A977.B&quot;O6E71$@/@Y6
M(V'PB&lt;'%@2V0&quot;X)S7B14:?&quot;'7D04@L'R$*7(5VZ&quot;B:&gt;!) 18A&gt;5Q(-F :WC!
M3@RQ#;8V&lt;Y_6(N[R+.,C1F?084/C*J^S2LAH==&gt;#&gt;R=2AS'U;L 87O6G=5QX
M5O%(9@$HE*&amp;Y(&quot;:55G%@4AYQ)];F.6DXDN/V&gt;1K7DK')!ZMF  % 7G9Y&quot;%P!
MEE60$XSSF(G_ET-_*'XA\SZ8V7V\@PK$4G+@Z'J#M71,H&amp;P9 2A!)S%2Z8?D
M5HC^X Z\TBWN.3B#Z4.]\V3&amp;616_ GGVPP.&amp;%6[K&lt;H&lt; -V(FPP6WX'J795F4
M&quot;'BU$*(B2AP!-9G!F!+R!!EP\8D=^&amp;\OJGRK)99-YU I:D^L(#1'LBLV)&quot;9%
M!9HQD9PCYI/JXIJ&gt;25%PD8F1V549.&amp;W&lt;DT$R:E^JY&amp;]FQGUDX9*.F(T9(3&amp;Y
M(&amp;YO$DDI-&amp;LW)6&quot;R.&amp;2;A8EN)WP7!XSQ,BVW9'8L)B_QQE'&lt;2750F9.XHPZV
MAB(WDZ3X(C.J$H)+L(!CU 8&quot;&amp;A4[HI?8&lt;#XKL0&gt;MV8[C,V*H4#=G_S6G_U*G
MA?E:2U5S]0FAJ7FCH&amp;@Z#@ Y5P&quot;?:UHZ/IDI!VE1,0@P7ID$$FJID+*@M&quot; :
MG!EC7#=_32145/2GIP$[XY8[7:B3;Q0L_].@?5 BME(_5&quot;:KEWJE@&amp;&amp;5=AB+
M]+)K%;$+8+E 1MI[9FE58H!__K*;,R4XN5AY!*@B9]!,-.JLX4&quot;K^M8[]8.G
M.7:K9@,L0A.*UCH:SXEY)P)!5[2%;3H-MM(=Y+%FGZ&amp;([#JKF#I5HAI^0K(H
MW3!P.(FA:]IK1VAMH-FD0!!5&gt;3&quot;1L68('')&lt;;^&gt;N&quot;=N=5V*K&gt;U839S4K[3&amp;=
MC'E, 22N?_%4XB$&quot;?T&gt;BRX&amp;SR4%9Q4IH)?];H]!*=&gt;U'I&quot;B8&gt;+$$0IJX.W[ 
MAN?C$&quot;J;#,MRK/= 4&gt;T%I(+XL_Y!LDR5J2T0B;B@LV94'T&quot;TL@'KD+QAG/98
M'NM3KG*Q5E.BMFHJM.6(%U/A$.]GEE@KA$'+M0UK&lt;51GHFO8GPU9%3GR/+,G
M'C4Y#0A!;O_ A3C*L&amp;K@I7;&quot;65)!M'E;$EK+2@RKK&gt;6TFLL%A&gt;\!LY6ALDDW
M#/-GF]!V(U%2@@:)K&quot;]2)+B /!48:9&gt;K4PM[D!FIL6&amp;Y'U[Y@C*F&amp;\SI@C4I
MJ0&quot;KF_;#&amp;SZ)I2)$!W&amp;):0E:N[=[LD(+'9:[M;&gt;88;:U#(1%G:&gt;))X9&quot;8W T
M=XQJLH'FO4)4D^__M:W0N[&gt;#A+(N:)@-!U+5^&quot;[#-&amp;S-RK9)T4XD*92BV[H/
MPVBEXY%ED[GK*[68Z[Y:F)/].Y;@6+'/.U.7(+8 1K3*F[HP(++J5, L0L#S
MQK&gt;=L&quot;#NL#&lt;B,I!0&quot;AALYTM&amp; [9'H\(?P,)F]$9@JL%9&amp;[UTPKF1TCC&lt;59!R
M6$2Q1Q\2DW54,CP$@+HZ,%$TUK&quot;/LUH!\VBH*&lt;._P&lt;'.(T(V'%H=5L);2Q &gt;
M41]_ PI+)WB&lt;&lt;&quot;$D=F_BLHY(!%A75D9P&gt;K&lt;4Z\32&quot;YO3.XL05YN$B:LU\;!&amp;
M1V-2*8-F=WG V0\R&amp;QGL1Q_8:B&quot;=TT[(@#EL/!U0K&amp;&gt;XBT!;D8\W^5U0_Z8C
M.&lt;+%296&quot;Y]EGO9L-%33'6ODCEJ&gt;M$I3(&gt;^7&amp;'CQ.CNAO7@RJ@MP;Q%NVT+8/
MYUBSG!.U_:&gt;^F%$^CUI+*%J_I/S$-&quot;S%-&quot;4DE(@+&amp;P1EZ*0Y&lt;1E&gt;G;Q;2\@D
M ,$-AY6O7H2_-]&quot;I]T&amp;,$TI=J_S+.['(S];(7T:[A+#+FFN-2FRN?YP&amp;*&lt;F]
MN5I3EGN-2'2@T7DFYP+.WGS.;;RYD\!Z&gt;,&amp;$5TLQ?5*%8XBN\ZMO!N6Q@=9B
MMT)0^:P9^&quot;S0XAP%+FH_(2NDM9I?HZH=\[&lt;_18&lt;1*@RBV6B)6EJIG!S0#RT1
M$8W2V#0)$H&lt;JZ&amp;4/*VU+PE$SV.LQKI+ ^90'P_]H&quot;IT1GRG]S&lt;%,?#^-J($;
M3&gt;'L&quot;)?#KTH:0&amp;RY*&gt;ML;H=T06GC#2XC5#,=U*S&lt;K@B\?$C[&amp;1[!L0LLT7Q&quot;
M@_LE@[A :NX9K_ )U(-'6LF2/'S)TEHM#EFMO,_0 &lt;!3*Y6&amp;)C+-+GZK+G&lt;\
M=C ';&gt; 4UFXX:&amp;==U^S;$WB=(N$6IU[!NTJ8T0/M.A2&amp;G6V(3Q698VH #V.0
M2KK+V*K5V/!J%9)=NEK\AI8]T#CW2PLGI_AE0_&quot;WU47L==*ZKJ0-:OLLSFI7
M&lt;:71VDO#8TU4!G#&quot;84:HU&amp;1,1*V(&quot;6&amp;2CAC 9+O=V]1=PS.A%BYFD?&gt;4U&lt;93
M'Z2!DIJ&amp;RX4-L&amp;DYEI?_((O&lt;K=5W[;Y2W068_=&lt; E'H#(@HD_8@O$XF9!6X?
M:M^@ (0*--WM:]K6_0?;F O%I2GIW&lt;I+?,'6.COIK)15ZD@2OB&quot;:,$D1SHR;
M&amp;5!LHM  ;M=#_2,.]\]QRD&gt;,=,5J$LH\NJM *)K]AZ1DA*P1[(&gt;ZW&gt;'O*M1O
MC 129QE(;6'Y51MVQN A6+G;@5]]/ 7@2A]M-[DK\$'52^,]Z=CL?6QN48,R
M:&gt;)+$TQ6$SB()7[#9\&quot;Q]B:50K&quot;'5)5.KM(?KCXA'J6CK,]-%1;R3=P^8,3F
MT&lt;W_U(? UN1E_KA0?N/])A&quot;HP+I)724&lt;&amp;K5/*[MK+-&quot;F&gt;NAK4L^VG&gt;=&lt;+&gt;#&quot;
M_\RMHNB-76Z?(L,-BV!^&gt;&lt;UUXHW+N&gt;QEXM'1%030C@YCD$[4'SMZ\&quot;TRF8@2
MVEDQKH+))G@'5$9;$SK6I;YOIP[B.E!)4=L79&lt;GCD*)?Z)@\-NLRKA?2W.9W
M+LP!,S-9G@J4N6YJNX[F,Q8)HE3C!!DQ-J$G#V&lt;C%&quot;?L_)?)C0XVT$6&gt;,:M^
MT_[HILS/:?'=S+!@2&quot;?LEPT=O64__8K&lt;U 8 B$:T+$%1S*&quot;K-R/?ZUYUU1WI
M+$H!^%ER[MTA&quot;4X.D&quot;PQV#)]7Y(5[=.TX&lt;'K)KEB\5OP!F_C?$MSQ:'M0*(D
M\QD&gt;E&gt;Y,'R;M,]4-1Y':R.OQF5'M ;:F^(-SF)C:RO]]V19;J1F?E&gt;#K[Q [
MDPR$YS+/Y@&gt;,JQ_9F ^E\P8&quot;[%9N)8*2=.C2%RBZUJ)EV+@2?#!]].P&gt;X#&amp;F
MK&gt;D+]:[\\QU\Y&gt;^8&amp;.15]2I YRC0[TV[:+:T**^=G%Y/ODG/MTWJ/Y\DMAJ)
MX C&amp;.=/#XK\F$@^(BGR6&lt;C+RF^%X]W@_$205J&lt;'T&lt;4-'8/&lt;FW%9&quot;[$30*/OC
M,A^=L\LNB27]?P@Q[X[_9&amp;=&gt;5QIR&quot;!YZ2&gt;TPV &gt;(]&quot;6?[1U_3;W MK*.+[F?
M-RJ9&quot;+A^^@0#]MX'S=X6\#197I9,D]MM786K,- ,VIR^[YXN[*S*!4IT[P8(
M_) K_)^&lt;&quot;&gt;INGVZ[ZFAO*SG_GE+]W($KE&gt;A\MOH&quot;;S/[JOW;O^&gt;%&amp;4%;[A ^
M$UB8WU91EM&lt;'O0:'3PX(0&quot;;6_C!&quot;P0QP%^BGBY)@*(YD:9YHJJXL&gt;[4P^L;B
M[%3-1^43AYTVFG 887R*EE]RB9,UFL2E$&quot;=X,5ZZA8' @$:_X+!XW J2RV?S
MHEFI:  ?1&gt;'= 'A!ZK,^0J!3=@5N6@4++W8.1R966G&lt;L?5I3A1 7B7N6EYB9
M:)HI&gt;41J;6P6;Y1U=%(DGIQA5W4W&amp;U=7&amp;Z,/C2*$MC2$40)S&amp;H( &lt;T\_N:O&amp;
MQ\B=R:EI2%0*;J3!TH&gt;+(ZK+4S.4 U)F.VTJ5&lt;.0,3B'8ZW5Y[O9[N_P2O$^
M9'E0_Q5]I,/Z%L7R\Y$.C:OV@=JT@P83)CR@L*%&quot;7QT0.IQ(BN&amp;T&lt;774E0/(
ML6,SC]AH?*NU!M*T+&gt;6V ?$XY *#0!%=6B-)S@E*(N? X'M&quot;&quot;)T=0RR#&quot;HT2
M,EE1&amp;/8VWI#01:6BH2TPVABGP*F^2BN7^K.YE41.+1E^2(-*5D37,SN0U&amp;!Y
M=)-7FA)&lt;HKI6=L6;2E:KU;1;$J&lt;@G*9NP&quot;Q$I6U=@&amp;&gt;'' E'$BO&lt;N?,,\RW1
MA1$Y-X*V2CY&lt;:Z&lt;\F;,&gt;,UO*2^X4S!BJ!./1P /GUY 2PS#RH!)C:#Q:@?P8
M-&gt;4_NK!/+&quot;Y7I&gt;FDM+*Q\/H]&gt;Q\]I6F#0XVN=#GURC&lt;8-__!RY:W&quot;=K@&amp;#GU
MMYFL+-&gt;C3LW8=2% .[O#98/843[$5TG2\VO:KK;_L(+=U8-&quot;+K$P,$!7]9$%
M1Q+W&amp;0)+ 0-D4=U:?&lt;FG5G$3IG#.+ 1TTT%3OJ&quot;G'T@0%0 112@F=*)&quot;Y[3Q
M7H*7P%C&quot;45R !&lt;MBVR X8@A66($+?N%8.$D/0^BVW%)A];./D#MB@AX%CAV)
MVX6!6-!.:)#%(^-H(X0&quot;P &quot;G&lt; #@4TU&amp;L. 28::HYAMSA+AF0VZN^&quot;8I*PHC
M%Q;OE0F0-4S.*-:7](7FDR0V;*F'H13*D.)&gt;&gt;.A9VX_HN,($4XSZ&amp;1M@57ZQ
M74^I&amp;0 FHHZ&amp; :JE20!515622I7_9H!C@'(AG1LY16JH&gt;C$!E*2T$&amp;=3I2SD
MU&amp;&lt;M,TCES9&quot;A:GE)+V QB*Q+Q&gt;7H@(B+_&quot;K&amp;J'$A4&gt;.EIHCX65;%:A A!ARR
MYX&amp;P?&lt;E 710$Y E#/N!N$=8X&amp;&amp;59+#+4=IE!+!FATQ,%IU#%C[33&gt;E&lt;3&lt;OAA
M %&amp;\;=4+T'&quot;U#;N&amp;0&quot;RT [&quot;9O$YV;ZFK/1'FO.XHO-:MI&gt;:0I':FP,*1Q[]1
M$&lt;&amp;/#Q,K;[7%)M(%#J@6[(IGW 9&lt;I %5ZB,75A-S_(DFV]3\ GLQ=2!GALN@
MG&quot;IQOF!0T 80X9HPQV]L^&quot;T3A/3!KZXK,18)LE'R!2&quot;\H@G=\;%U%#1'-*4$
M&amp;X&gt;-LP3]_P7*+ZF\P*&lt;;J!2&gt;*[)RZ6BZ6W2SA-&gt;J&amp;O*CA='N?'-+&amp;9_*&lt;[I8
M;JPVO9G8-G&lt;3/CZ[R$S&amp;CM%'B1+YT0683U3@0&gt;# =:LQDJXPC'-BVH*1J8!V
MP,OZY:LX;=]EHJ@JZ:&quot;[B4$RW&quot;8/V:/#LSKJ8XN%)&quot;V-G&quot;E2/^?TUSMD_057
MNLR[,=3:?:=SR1;/=LF7]ILU\X+KB1'&quot;SZ$TMUO33BPV2A&lt;S://WO:-5\&gt;\&quot;
M*&lt;4&quot;ND&lt;:&gt;/B.4HA('6NTD(C=\0AK%,A4L)0%J9DDQG?4DDF;'A&amp;W3O'O&amp;%O&quot;
MSDWN]YW'+8@]'[C=GCAQ'7*L;PU54U+SRE0%891L%D&gt;[5:14@/]!HA@B+3_)
MR/X^R(D0,LLE;0H 4K+E+@?]XG\@9*$&quot;D&lt;2FFY#&quot;2.UK$@E'R&quot;#&quot;,4)B3(-9
MJP#C1%1%K60V)&quot;+1A'&quot;G7E2@&amp;V6;#W[FA[^-V:TE^R'.E&quot;CRM-852Q0C)&amp; A
M=&quot;&quot;?'D9A:R_1GX3BJ$:!N&gt;!L,&amp;02-4BGCSL2917W$!D_;BC$&amp;6KQ(@^0V'C4
ME1Q'KDLF5WA$ 9_ R$:*B@9&gt;1-8@MCB&quot;F@%R%&amp;FT)!OSJ!7LG&amp;1*[/.C\RC0
M#5DXIQ=]^] &quot;&lt;_;*3\ &quot;3.H(S=?&quot;Z$HP&amp;$I66R(&gt;+5&quot;C2SQ*\0YZ:Q S:8@%
MO_5Q&amp;&quot;)4AH&quot;LXQN9M*N;U6S4&quot;1JQ/%G_D@0&lt;Q1 &gt;SZP&amp;3V_2H!&amp;TO P4'2A/
MU[7F+S&gt;,R?:JQZ;L3=*AVC.(# D:SS&amp;6D(L&amp;4&amp;(PD&amp;9'UM@BD:G2C3VIV;]_
MDN:CY6)83&lt;;T,HK-JYZ3,@W8$GB&quot;)VF*9W8[@@[L &quot;G\5103DB'9?P8&amp; 95*
MP&amp;N2^(M(3T8&amp;[+1RE3=194N]YSXDON(YP=I%0!]HF=,\;@@'&gt;HDAD#K1G\8(
M!5,*Q7Q4MA6$$@^A3!V;I, H1&amp;!&amp;)UY8'6&gt;97GA0U#Q1-315QE9[U37()155
M&quot;YK!(_II5EP-B!CIH0W+)I5/2D3-9WZ(JSGVP1ZEJ*(R6LTKF4(ELYO00ZHX
MA&lt;13X]?,(B76_X8_V&lt; 19-I8G&lt;WS%0097J%,0YXL*)$#86*L&quot;^[&amp;H,[2S48#
M7 V&amp;3$-1E\Z+K0G,U.)HFP*Z$I&gt;D))!#VT)6U&quot;G6UJ)HE41G\352*&gt;03F0_]
M4B4UN\O4CNQFA1V( #A(V&gt;9254\=F&amp;TP(+F(PCY2=&quot;H4R1:JY $5IE.X/PWJ
MS=R9*KDLU9/XV&quot;2&quot;&gt;&gt;A#.@1#A&amp;--#YIR=57'&quot;A._P_M+-7 H3&gt;PJ(9V;G6HG
M2 RXRCWQNS=5,5,0PK5.*36[2L+2?4-WW23Q)()+X%2Z!N)&quot;YG#5H (XT'JP
M&gt;,FTQ2# HB*7?6$L'&amp;#=EJ:6+8CJ8 ?5(B1I@BWK&lt;M,B81+&quot;*.D*;_]#'U! 
M!K_1T@H8KTL/1%5TD(5&gt;KTUS=LA$W&lt;AD*J\+KAJ*UQD)L],% )-2//VJ#P[]
M#D1!5XXG[2H@IVSD'2$K;V?:A;J\.5@-R;@Y0:R*H&quot;?,/R\8!I#G0J&quot;3AY0/
MF?YEM45TG%.)1-29UH;2'B[38AGL+YT1+,5GKH&lt;72P5H/\&gt;@9N&amp;]'XJOQ4#*
M%$IV.XP,NE*Q0U,+U&amp;IZ;=+&amp;.E ^:QK5''W6R;L2.PAC]X8-;&lt;EG#QZMF&gt;@M
M,R+E,B K&gt;C FO?W#&quot;$:ZFMK.99QFPIHRE2;NMO=K[MXTT-,5N]9O/=/II,@9
M9XU&amp;EQN$ 5C=@DL6Z @'KC\-&amp;]NLS+8F_@[_VHQWN)*@N.&quot;/E3/';WEM2MF;
M1]@KW0%C8&quot;@V!&quot;(S2!26#M%9YEP?V5$OCX['F&quot;5F&lt;?C&lt;FJL\.&lt;K-4@L&quot;QTOI
MF+0&amp;7I09&lt;J#J)%?\R,!E.7=D?9&gt;ZS-@))X77*==8B&gt;W7_EEZ 44]*=%4YN4W
M=4W&amp;L%5M'GO5#:AUX[B&amp;=_1@)DJ+\SS3&amp;C)9=4-^P;&gt;3W8C8U?X8'716I1)*
MN[@W++:ML3&lt;J5/B4Y\JG7 [C5;2&gt;S(]*&quot;2_ &gt;Q;]YZTUZ?U 5^M5PY@-7&quot;=4
MG#&gt;JL&gt;1571P.&gt;O3,:&lt;Z+0P&gt;INU#&lt;EIOS@VJU*C!'&quot;/UWP/TYA;UK -D&gt;):KR
MJ5P9E5A?9$I:+&amp;/G_WL +^:.)*%=X1X(O_9$&gt;=W2ID5@*Y#9+EJ'?FA%@FTB
M,Q[IO9 :_;11K3I41]:&quot;P?V5(!,;07!_P^=5)@=PR^0RYU=J^98OIE5*9&quot;&lt;$
M0]8I/U):QL=XV8$(G^(+?(-84R-!MH&lt;62'. O= FJ;8V)G4I_S&lt;SG=$Z&quot;R@=
M._!;D&quot;9\&amp;T5=V09_0],B$&quot;-08D&gt; P&lt;$8C;-@;3=R;4=R[X,'EF-WCG-M03=:
M+Z@?ZK%F+^8L_C&lt;9X&amp;52.X=$+%8J:8:!8D0L:'-]0T1RZ24]G5920[%QHQ)Y
MMO86/$&lt;@GP%8S2*$E+,&gt;\;$K72485$&lt;&gt;_8)+Y1&amp;% Q2&amp;JJ$11.B%1S&lt;^8/^1
M1E1G&quot;6&quot;T$ZU&amp;=-(&amp;%6IX&gt;(P&quot;&lt;2!06IX&amp;1DK&amp;7?)U=J['57&amp;$9]@&quot;&lt;U@20RO 
M@N+E0DGV&quot;#?'&lt;7Z6!U7B!&lt;Q&amp;'%!G4H]0(_34,$K(*D_H I1T$M0F&lt;\%B&quot;W'@
M(/V0 1.(4\*89QI@$0U59]3 -\SX)B&gt;&quot;)G!P $G *83A@]J&amp;A#*W/6XRC=/3
MA9&amp;V?K=W5I*X?#MV;#1Q@3.H%&gt;9&quot;&amp;(J3!'+0?[^7?M_!)S2Q7EOU+W(V?5F0
M$]*58W#0.&gt;=H5DFQ@H\!3ZD&amp;&lt;;%XD(&gt;B(.K(6C1'8EU8#,&quot;H&amp;D%E3Q?3-]LU
M080G&amp;XD'/#)T&gt;EF$@)TQAX 3&amp;%8U?;6%#?S&amp;&lt;P[_((/C!Q?08(,1EXY]YUP&quot;
MUC;Z&gt; LU@HRXLEJMEE088TXM*$DRR5:E5XO0$6&lt;(]VY5\2!KH&amp;0;0).&amp;^#(M
MI&amp;R9 $ZQYY3@(Y$[N8Y6R#VYD8#T  B?2 Y1XAA:%EC944B,H@&quot;.!P5Q=$OA
M!G&quot;_1UUOYPQ9*2]A)WG'D&amp;IU)V\ZR7&amp;@,C[!11&lt;[T8==\C\GYRI]8E-[ 7U1
M.9'O&amp;$K@])1_B9F'L7M+=)A%D9=E682M$W9!2&amp;:NB(=_UY,XV)GJM%&gt;L(A13
MAAJ[A%BFUW5^)RT:!W*MR7M-!INQV8WF0YL366Q(06(Z5@,FDU\A@)47U7-(
M]WY6R'S&quot;68!0.)M!@6L8_P(P]YB!T?F=+!&gt;=J!6&lt;'Q::KWF=U D;H$D_VZF.
M[+&quot;,#B4G=D8GZ74BX7AG0X&gt;=[NF:ZKF&gt;K]&amp;&gt;PR6:7O&amp;=+=! L(&gt;/E$(XE4%(
MJG5[XVF&gt;OXF&gt;UOF?$YH? EJ=[SF6=X438_)\=;!IT8&lt;*LL4S4'9E)RBAJ &gt;&lt;
MZ6FA*YJ=Q;FA*L987^9&gt;OQ-)^!)$&amp;!*C+]J?+.JB%RH=&amp;3IV:&gt;B95_&lt;T3R*B
M4#&quot; %S.2NUA0_Q1M&lt;WFC8PFDJWF8E\&gt;+R&quot;!5&amp;5&lt;[NCA $( +E&quot;&quot;E3_J%)@ -
MHH %*@,TM6%M5AJDP3&amp;DPRFC&lt;@I$J=1M(3!;'&quot;!BW#BG/0IIVC$6P0&lt;V&gt;OJF
M?_\:I]JII=\T$!:6A-X5AL 8&amp;BZ)CB&lt;9 J;(BLEB3&amp;@VE3PSA8!2I4 JIWL@
MJC&lt;H?E&lt;ZG:KFEVSB!?]GF)6*!W]A)[-G1OCA8PY#JFJ$JQ%HJL8)JE&lt;W7YT:
M&lt;PT!)BO2@O;'JW#J4ASI,*]&amp;D$56JX9ZJ.R9J.93IT=EDH;6&amp;J930):8DZ\:
M%U&amp;30K&gt;H/S'U.I&amp;&quot;B+KZ0&gt;GJFY%8I+Y*&lt;L&quot;'734$HBXWJ&amp;AXGCQ2'#GA%,-&amp;
MK@'H8^OZ/0&amp;+JEE:K:^!G$-AF_@J3X525E:23!!K)&lt;:$0]$*I3LRL!;+%@K+
M&amp;1@;GO:4&quot;X:Q/ VPB548D%/T:*&lt;*FQW;HF7*$8)4%EW_T*_F 5D+JY&lt;6D$+Q
M=F7O^I\K6Z$M:ZJL1Q8GRA)P(Z)D64O/^G2WH4!I@8M&amp;RK/.0ZT=(1=&amp;RQ*X
MT;._@P_..%!&amp;5Q-G@I,BX!A8:U&quot;RR:/%HY'BF+9P\HQJV[;20R&lt;1&gt;JIZHU5!
M&amp;)ARA+#1.K8_BJPLT8I]&gt;C=_&gt;XHN!(Q,&lt;VHS1;7D9QGW&gt;!\52Y$P.K5BN9;Q
M$'MU\148V;5-)V%PT82.&quot;Z2]&quot;6*(L4GSX&quot;+.&quot;9'+@+=8VI?2R725V+D^:J5I
M4;4'&quot;V:GFRU8JW$FPEN!*Q*[VUZV03.RFY03DD$5&quot;P4!X+;(NR:_F+S,V[P&amp;
M(8T) ;W.FV?+.[W)ZXQ*TU!N__B&amp;L7)=C&gt;M^(_(S]FH)5\01U9=9K,JMZMMZ
M]M:^ZZL45_N#/[F6&quot;0JRWFNH&quot;4I#P;L*WP8/]Y&quot;X=&gt;&amp;E9&gt;&amp;D^3L@D7F_Q=N[
M9[!W&quot;JQX'2%&quot;= 26H[L%,ON9,CF*CVD$R^FZ ]JXK8JA?_F[\6K!B$I-'P6\
M:4&gt;FK_N]9=O +.R&amp;&gt;FL&quot;E&quot;F8[8@^PXO +PRZ.8RE''NWK;BYI.%.=Y!!2[O#
MCVO$,AJ@S&quot;F3!R&amp;-@6!&lt;*NBDCTF+6NG&quot;2*RA5URP9&gt;$)[R6Q,=MA=9-.*GRF
M5J)H5IS%*XS&amp;*#BM(! B-Z:+,+FSJU0 &amp;K6C;:C&amp;[HK'?%L7GC!?+UL=!F$B
M5'!II_^H.E+XC7J&lt;QXGLJDI&lt; [I1&quot;7OD95X[OJ2!5&amp;;)AFBYR.VJR6O&lt;R*EJ
M!X8#+[Y0(+&quot;#(STIE-R&amp;&lt;:;+R:/*RK6;LHR&lt;N37J&quot;MV3 7[P.8OH:14W,@#K
MREKLRT=2N$*Z&gt;@:#*D:22N]BPRHW-)%B3Y,*S*8$S;VQ%)AXM.Y:!1NX#4=#
M'WN*,4@CO6J[3RD1@M)L%.4L@3F;SD][,H#@(D: .LQ3-.8J*([:*SZ&amp;8&gt;?&lt;
MR?G&lt;M?!6?=(J%!(T&quot;?O5,[.D2(0@IN&gt;$K0 '![4,E?L&lt;10_M&quot; XKL1G+QV_&lt;
M=-'#4:LQICU2P%AHP_,:T&gt;8LTBQP($(8M#%&lt; KCP&gt;&lt;@!DE__F!DM%Z6*&quot;X\D
M?:\UO=#&lt;=K,OD])&lt;4GJ3?(&quot;6(1&amp;#%K&lt;JP'8+&gt;=.QAM1.X!KHM&lt;&amp;P[*VT&quot;X9,
MFU2H&amp;)&amp;4K-2[BM44$@3T%S^==L:U^6(\:75:G0W,&lt;L86:DLOH$3%-%3ZTZV2
MF]13)5GVJ5XV7=;@@]8N&quot;L !V0:\I;-CYJO=RFBMC-&lt;CK&lt;YE'9@H=808;*Q7
M#5XAH6R[R]/Y#(F&amp;#5SC6#I6Q%=Z[8(9+&amp;;&lt;2-GE[$;&gt;9=B?EZT\@%K\@,D-
M(\&amp;4:KAYN,H=?-F]8[VV?=NXG3W654!L6]=PLA@*O'$T3*FT+47%/21P&amp;&quot;RB
M&quot;QQG6-B?YG&amp;8&lt;]S2G3E!7&quot;&lt;)L;=&quot;_R(^ZYR3VS?=QTTS?)#:1_W802MR-&gt;P6
MHLUEC^W=['U1'7JM?, XN9ER?AF;Z&lt;W!FN*.[:W4R!.B$UNB)Y$&lt;?8)JPRU&amp;
M]WUB#!G7^_W0K7&quot;3-Q,A$/.U8\?:)!!#@JI\PNT.^++@'*Z:R=4SQCQW#59X
MX.L5':2P%[3=^IP.=MOA-1V8L[PZ&amp;85M@J7@G\%2&lt;BG'V&lt; OS9UBG&gt;WB:H=S
M.&lt;9W/_:'4-,)@Y991'K@A5&quot;?TSBT0%[3GII&lt;W)-[8IV9&lt;R$9MBH/*:[C4?[E
MNL8::&amp;H9A/V.YMA2=LD&gt;=VJ:I,+D8/[F*5B9K)NJ6&gt; 2Y8E R/8&quot;G_+!!&gt;7F
M&lt;/[GE\D?\?_F#^@%5T=#I43BOO8-Z(S.,7@)ETR#'K9&lt;9.EV&lt;F,.@4_=Z)IN
MON=MEX@M*0S:S&amp;5\HV(5O1&amp;QOZ&quot;WZ:I.?.E;VA4CSZ;!4A&lt;2.TF'?;OBYZN&gt;
MZRS7ZF'D-S-1AW1V,#$-+FNBXKE^[$O(U&gt;MVWCSQ?:C&amp;&gt;C+.9@&amp;G,CL(3BSS
M;[B.[-)]VB5&gt;#M&gt;&quot;5W8[$AV29I_'+O9Q#L3ZC&quot;%B0RGZS]K^[LYDPQM]D24!
MB!87HM%C XF0=P\0(:@.U&amp;KE&amp;,V=[?&quot;NU6/%8$G2$Q:&amp;$J3]0WIA64&quot;R1;89
M@.ZG;H_*F@6?\:^96$JT+SN*IK)52=UP, N&quot;&amp;8G+#A,]8SG=G,;_^$L:1AX:
M'_-$$0L(WR&amp;D:9;U/G([EW1+6C&lt;OHU'D$T0YUJ^41O R+^4_Q&quot;&quot;V7&amp;T:J3&amp;A
M+*;:S+@&quot;'Z)U([OJ@&lt;P/#HEM]*U'W_5NV):[C&gt;@*:FM3+ZA;05_9J!NV6O1&gt;
MW_;-8:8,QYG,CO&amp;/N6: H_8'9:[\Z?9\GZK68A)ETQ1P1=1F2ADU]$ZCGC5?
MXFY.;&lt;U]__A1]&gt;F7%@[#05N$7]%B?V .#-1C/]:0__GU_D2V;$RX%!BD?UG?
M0G'UC/DEP#!&amp;U;]&lt;#_I\WUES\*%&quot;Q UH,E^**7N(B7 GMY5Y&amp;ONR[_6BC%&gt;'
M0-!^2*[#\O#O:KA/)4+07ZK#W_5;%C)\_TIY(;9G&quot; WQ&gt;_\6X:&amp;ZJ-A&quot;-3O]
M;7_+@PO&amp;(-C-H$'D .IV_F'QXT_^1\_MR/&quot;YD/OC\B_2!C+C[Q&quot;[&quot;T.S&quot;&amp;&quot;Z
MW/XPRDFKO3CKS;O_8&quot;B.9$D)&quot;F&amp;2 &gt;&quot;^&lt;&quot;S/=&amp;V[!0ZL?.__P*!P2&quot;P:CSY4
M1FE@]I1.I'1*K5JOV.P%I;HZ!=$L:JPMF\_HM#I-5H2/3#![3:_;[_C\TAQG
MR]]Z@8*#A(6&amp;AXB)BHN,C8Z/D)&amp;2DY25EI&gt;8F9J;G)V&gt;GZ&quot;AHJ.DI::GJ*FJ
MJZRMKJ^PL;*SM+6VM[BYNKN\O;Z_P,'&quot;P\3%QL?(R&lt;K+S,W.S]#1TM/4U=;7
MV-G:V]S=WM_@X?_BX^3EYN?HZ&gt;KK[.WN[_#Q\O/T]?;W^/GZ^_S]_O\  PH&lt;
M2+&quot;@P8,($RI&lt;R+&quot;APX&lt;0(TJ&lt;2+&amp;BQ8L8,VK&lt;R+&amp;CQX\@0XH&lt;2;*DR9,H4ZI&lt;
MR;*ERY&lt;P8\J&lt;2;.FS9LX&lt;^K&lt;R;.GSY] @PH=2K2HT:-(DRI=RK2ITZ=0HTJ=
M2K6JU:M8LVK=RK6KUZ]@PXH=2[:LV;-HTZI=R[:MV[=PX\J=2[&gt;NW;MX\^K=
MR[&gt;OW[^  PL&gt;3+BPX&lt;.($RM&gt;S+BQX\&gt;0(TN&gt;3+FRY&lt;N8,VO&gt;S+FSY\^@0XL&gt;
M3;JTZ=.H4ZM&gt;S;JUZ]&gt;P8\N&gt;3;NV[=NX&lt;^O&gt;S;NW[]_ @PL?3KRX\&gt;/NR),K
M7\Z\N?/GT*-+GTZ]NO7KV+-KW\Z]N_?OX,.+'T^^O/GSZ-.K7\^^O?OW\./+
MGT^_OOW[^//KW\^_O___  8HX( $%FC@@0@FJ.&quot;&quot;##;HX(,01BCAA!16:.&amp;%
M&amp;&amp;:HX88&lt;=NCAAR&quot;&amp;*.*())9HXHDHIJCBBBRVZ.*+,,8HXXPTUFCCC3CFJ...
M//;HXX] !BGDD$06:&gt;212&quot;:IY)),-NGDDU!&amp;*&gt;645%9IY9589JGEEEQVZ&gt;67
M8(8IYIADEFGFF6BFJ&gt;::;+;IYIMPQBGGG'36:&gt;&gt;=&gt;.:IYYY\]NGGGX &amp;*NB@
MA!9JZ*&amp;()DI7 @ [                                            
M                                                            
1                        
 
end


\H02::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


            The 8 bit Modplay 128 Board, a three-diode addition

                           by Nate Dannenberg


Hello all, Nate Dannenberg here again, with an update to my original
schematic and assembly instructions for the 8-bit DAC Circuit described
in disC=overy issue #1.

This change will require three 1N914 diodes, and some solder.

What we will be doing here is rigging the DAC Circuit to trigger all four
tracks simultaneously at the moment track 1 has been updated and clocked.
The point of this is that, when used with my MODplayer software, all four
tracks will output their samples at the same time, thus eliminating the
switching and mixing noise that the circuit was producing before.

Those who used this device for only 1 track output will probably not hear
any improvement, but multitrack players will hear a significant reduction
in the &quot;ringing&quot; sound that accompanies low sample rates.
 
1) Remove the jumper or wire that connect pins 7 and 8 of the MAX505
   together, and move any ground from pin 8 over to pin 7 of the MAX505.
   We want to take pin 8 completely out of the circuit.
 
2) Connect all three diode's ANODE leads to pin 8.  The Anode is the
   &quot;arrow&quot; in the diode symbol, the end of the diode opposite the line on
   the diode's case. 
 
3) Connect one each of the diodes' Cathode leads to pins 17, 18 and 19 of
   the MAX505, or to the corresponding pins on the User Port plug.
  
That's it!
 
Have fun and enjoy the wonders of 8 bit four track digital sound!
--
For questions or general commentary on this article, Mr. Dannenberg may be
reached at the following addresses :

Internet   : Bowes1@cris.com  or  Bowes2@cris.com
 
Snail Mail : Digital Audio Concepts, Ltd
             c/o Nate Dannenberg
             9804 Northcliff Drive
             Dallas, TX    75218
 
Phone      : (214) 319-9879 data, or (214) 320-1386 voice
 
 
\H03::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 

                            The Virtual PLUS/4 :

                     Upgrading your C16 to 64 Kilobytes!

                             by Martin Gierich
 

How many times have you heard from PLUS/4 fans, &quot;Your C16 is only good
as a PLUS/4 parts depot&quot; ?  How many times have you been offerred money
for your C16 by these same TED-chip-seeking adepts?  Disregard temptation
because now your C16 can be turned into the pseudo-equivalent of a PLUS/4
with the ability to run a great deal of PLUS/4 software.  You see, the
C16 and PLUS/4 belong to the &quot;264&quot; series of Commodore machines.  The C16
is actually a PLUS/4 with a few chips missing, notably the 6551 UART (and
userport) and a full 64 KB of memory.  In this article, we will be upgrading
a C16 to a full 64 KB, allowing us to run many PLUS/4 or &quot;generic 264&quot;
software (minus userport-terminal programs and some assorted misc. software).

 
:::Important:::

   Before starting read this carefully and check out the schematics
   in your C16 manual. You should be familiar with soldering. I have
   reconstructed this, it is about 10 years since I have done this.
   I can give you no warranty, do it on your own risk !  Neither myself
   nor the staff of the disC=overy journal is responsible for any use or
   misuse of information presented in this article.


1. Buy two 64x4 bit dynamic RAM chips like &quot;TMS 4464&quot; or &quot;41464&quot;.
   They should cost less than US$10 together.
 
2. Remove your two old &quot;TMS 4416&quot; RAM chips from your C16. They are
   labelled U5 and U6. You might destroy them, but be careful to not
   destroy something else ! I have used scissors to cut the pins and
   then I have desoldered the pins.
 
3. Now solder two 18 pin sockets in where the old RAM chips have been.
   Again do it carefully to avoid destruction ! Check out where pin 1
   is. Then plug in the new RAM chips.
 
4. Check everything again, then switch on your C16. It should still
   show &quot;12KB free&quot;.
 
5. Adress lines A0 to A13 are connected to the multiplexers U7 and U8.
   You need to connect A14 and A15 to them instead of +5V at U7 pin 2
   and U8 pin 14 (but the +5V connections at pin 16 must be left).
   For example get them from the CPU (U2) pin 21 and 22. First scratch
   the +5V connections. U8 pin 14 is connceted on the lower side only
   and should be easy to disconnect. U7 pin 2 is more tricky.
   Disconnect the line between pin 2 and pin 16 at pin 16 on the upper
   side (U7). Pin 16 still gets +5V from the lower side.
 
Now you have two choices:
 
6a. To always have 64KB:
   Connect U7 pin 2 with U2 pin 21 (A14).
   Connect U8 pin 14 with U2 pin 22 (A15).
 
6b. To choose between 16KB and 64KB:
   You need a double switch (or whatever this is called, it has 6
   pins). Connect U7 pin 2 and U8 pin 14 to the two middle pins of
   the switch. Connect U2 pin 21 and 22 to the two upper pins of
   the switch. Connect +5V or Ground to the two lower pins of the
   switch. With that you can chosse where your 16KB area is located
   in your 64KB area. I have used FB13 to get Ground and FB14 to get
   +5V.
 
Keep the connections short !
 
7. Check everything again carefully. Then switch on your C16. It
   should show &quot;60KB free&quot; if the switch is in right position.
 
8. It is a good idea to replace the 7805 (labelled VR1) with a 78S05,
   because the 78S05 switches itself off, if it gets too hot.
 
Simple, eh?  Enjoy !
--
For questions or general commentary on this article, Mr. Martin Gierich may
be reached at the following internet address : uj3w@rz.uni-karlsruhe.de


\H04::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

 
                    Continued Lt. Kernal Hard Drive Support
 
                                 by Ron Fick
 
             (rfick@nyx.net or Caped Crusader @ Batcave on CommNet)
 
 
  Probably my best enjoyment from this great Commodore 8 bit hobby is helping
fellow Commodore enthusiasts with my expertise on electronic hardware.  I
have been an electronics design engineer for 20 some years and I have an
in all types of computers, but the Commodore has always been my favorite
for hardware/software work ever since I bought my first C64.  
 
  One peripheral lacking on Commodore 64's and 128's was a means of mass data
storage.  Disk drives are slow and unreliable, especially for applications
where constant 24 hour use is required.  Commodore did make some hard
drives for the Pet series but none were produced by Commodore for the newer
64's and 128's.  It was time for some aftermarket designers to fill the void.

  Several designs came to market, but the one that has stayed popular the
longest is the Lt. Kernal hard drive system.  A couple of fellows named Roy
Southwick and Lloyd Sponenburg came up with the initial design of the Lt.
Kernal.  The story has it that Roy bought his son his first C64 and datasette
and quickly found that system drudgingly slow for loading and saving programs.
Even when he upgraded the system to use a 1541 disk drive, Roy was frustrated.
You all know how you can take a coffee break while some programs load off a 41,
which didn't impress Roy since he and Lloyd were software/hardware engineers
on mini-computers at the time.
 
  The Lt. Kernal hard drive system for the C64 was introduced in December of
1984 and it's main customers were businesses who found it could fill their
needs and was a lot less expensive than PC's at the time.  Since the Lt. Kernal
is designed to use the 'parallel-oriented expansion bus' instead of the serial
bus that disk drives use, it's transfer rate is many times faster than 'normal'
15xx serial transfer rates.  For example, in 128 mode a Lt. Kernal drive can
run up to 65 kilobytes per second.  Eventually, a family run company in Kansas,
Xetec Inc., provided additional design and manufacturing of the Lt. Kernals
and they became quite popular to hobbyists running Commodore BBS's.  It was
an expensive accessory, retailing -then- at over $1000, but then hobbies are
supposed to cost money, aren't they?  
 
  Here are some of the facinating features designed into the Lt. Kernal and
its operating system:
 
        - Fourty-two additional or enhanced system commands
        - Automatic power-up execution of any application program
        - Up to 7 files can be open for reading or writing simultaneously
                in addition to the command/error channel
        - Built in backup &amp; restore software using a speedy &quot;Fastcopy&quot; utility
        - User can set screen &amp; character colors
        - CP/M software can be run on the Lt. Kernal system
        - DOS allows Key File indexing which is not available on disk drives
        - Can run copy protected software with limitations
        - Ability to use up to 15 C64's or C128's on one drive simultaneously 
                using the multiplexer which I also build and support
 
 
  Xetec performed a great service to Commodore users by manufacturing several
peripherals for Commodores: printer adapters and software, plus accessories
for Atari's and Amigas and even the Macintosh.  But eventually, the market for
such accessories dwindled and Xetec decided to close it's doors in April of
1995.  They had an auction in May of that year to sell off their inventory.
Prior to the auction, Xetec contacted me since they knew I was in the habit
of assisting Commodore users with my electronics expertise.  I think Xetec
genuinely cared for the future of the Lt. Kernal users, and since these
precious unique parts would be forever lost to Commodore users by ending up
at surplus electronics dealers, I was contacted.  I emptied out my savings
account to rescue these parts and even though it was tempting to set up a
business of Lt. Kernal repair, I knew if Xetec wasn't making a profit at it,
I wouldn't have much chance either.

  My work with Lt. Kernals is strictly a hobby.  I charge folks just my costs
and eventually will be pleased if I break even on my investment in parts.
Besides, if I made a business out of my hobby, I might just suffer burnout
and that could ruin my hobby.
 
  Word of mouth has provided me with all the work I can handle with the Lt.
Kernal.  But it is a great pleasure to provide continued support for these
popular hard drives and I hope I'll have enough spare parts to continue to
support them for a long time to come.  
 
  Currently, the CMD hard drive system is the only commercially-available
Commodore hard drive system and it is better suited for the regular Commodore
hobbyist since it is more software compatible to your normal Commodore programs
than the Lt. Kernal system.  Commodore bbs's are the main use nowadays for the
Lt. Kernal since most Commodore bbs software was written originally with a Lt.
Kernal in mind.  The Lt. Kernal Multiplexer allows, for example, the Commodore
sysop to do true multi-tasking with his bbs without tying up the bbs for Sysop
functions and even provides the capability of running a multi-line bbs on the
Commodore.  CommNet is the largest network of Commodore bbs's in the world with
around 50 Commodore boards in the USA and Canada all networked and a good deal
of those bbs's are running on Lt. Kernal hard drives.  C-Net 128, DS-2 and New
Image bbs networks are all linked via this network and other Commodore networks
are encouraged to contact me to join this Commodore information highway.  My
bbs, the Batcave (303)/252-0735, has been operational for over 7 years and has
around 700 active members with around 100 of those Commodore 8 bit users and
guess what, it runs on a 105 meg Lt. Kernal!  :)  With Commodores getting
cheaper every day at garage sales and support available for these great
Commodore hard drive systems, there's no need to tie up a Pentium to run a bbs.

--
To our knowledge, Mr. Ron Fick is the best and last source of Xetec
hardware in 1996.  If you have any problems with your Xetec peripherals
or would like more information on Ron's stock of Xetec products, do not
hesistate to email him at rfick@nyx.net


\H05::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


                  &gt;&gt; The Metal Shop ---
                                *+*
                           --- with SMS Mike Eglestone &lt;&lt;

                   SysOp of Diamondback BBS (305)258-5039


Senior Master Sergeant Mike Eglestone has been a devout C= Hardware guru
for over ten years and is the Sysop of one of the most active BBS's on the
Commnet Commodore BBS network.  Mr. Eglestone has written for illustrious
magazines in the Commodore 8 bit community such as dieHard magazine and the
very distinguished Commodore World.  We are pleased to have him entertain
our questions pertaining to hardware concerns.  As always, the editors, the
staff of disC=overy, and Mr. Eglestone are NOT responsible for the use or
misuse of any information presented in this article.
--

&gt;&gt; Dear SMS Mike,
&gt;&gt; 
&gt;&gt; How do you run two or more SFD 1001 drives together with only one
&gt;&gt; interface? I have a Quicksilver 128 hooked up to my SFD and was wondering
&gt;&gt; how an additional SFD could be added to it?  Could you tell me please?
&gt;&gt;
&gt;&gt; GF

GF,

 Fairly simple, you daisy chain the drives with the appropriate cables. It
works just exactly like the serial bus on the standard C= drives, but you do
the hookup externally (cable to cable).
 
 My cables had MALE and FEMALE plugs on the same end. The cables hooked into
each other at each plug point. Male into drive, Female side out. Next Male
pluged into the back of that same connection, and so on down the line.
 
 If you don't have the cables with the double connectors, you can't make the
parallel hookup. I don't know where you might find those cables anymore.
They used to be quite common. I gave all my old ones away about six years ago.
 
 You might want to check with Bo Fain at Centsible Systems. He runs across a
wide variety of things that are not currently available.
 
 (318) 687-4613
--

&gt;&gt; Dear SMS Mike, 
&gt;&gt;
&gt;&gt; When I try to load up a program with my 1581, the power light starts to
&gt;&gt; flicker and then refuses to load.  What is going on here?
&gt;&gt;
&gt;&gt; RB

RB,

 If the power light only flickers when the drive is turning a disk, it sounds
more like a loose connection inside the drive.
 
 Just open up the case and check the drive power plug inside.
 
 It's fairly simple. There are NO dangerous voltages present inside that
drive. None!! 5 Volts and 12 Volts... That's IT!
 
 The drive unit can be seperated from the mother board in a few minutes, but
you don't even have to do that. Just check the drive plug. Run the drive with
the top off and LOOK... It ain't no big deal and you can't hurt anything.
 
 Just pull the two screws (on the bottom) that hold the top on, Turn it over
and lift the back of the top, take the top off... The front may fall off too,
but it just sits there on a couple of pins...
 
 Don't be afraid to LOOK inside that drive. It's easy to put back together
again.. Hell guy, I run two of them with NO tops at all.. Gotta smack one of
them now and then (to get it turning); it's easy with the top off.
 The plugs to the drive are obvious. Pull them out and put them back a few
times.. Might just be dirty connections.
 
 However, you may also have a dirty r/w head.  As Mr. Ron Fick pointed out
to me once, the power light can flicker after a file misread.  The solution
there would be to clean it lightly with drive-head cleaning solution available
from drive cleaning kits at Radio Shack and most any computer store vendor.
--

&gt;&gt; Dear SMS Mike,
&gt;&gt; 
&gt;&gt; I have an odd 1581 problem.  My 1581 does not always recognize disk swaps
&gt;&gt; and sometimes falsely indicates that the write protect is set.  There is a
&gt;&gt; small microswitch that detects the write enable and presumable the disk
&gt;&gt; swap as well.  What does your SAMS guide say about this?  It could also
&gt;&gt; be the circuitry.  What is the part number if the micro switch and is it
&gt;&gt; generally available?
&gt;&gt; 
&gt;&gt; RM

RM,
 
 The write protect sensor is nothing more than a optical cell. It is either
logic high or logic low depending upon the position of the write protect tab
on the disk. No moving parts involved.
 
 I would venture a guess that you have one of the old Newtronics drives in
that unit. If this is the case, the only way I have ever been able to recover
from a failed reset is to re-initialize the drive then try to re-inseart the
disk again. You should HEAR that dust shield slide back out of the way of the
read write heads, folowed by a very short motor run. That is the indexing
cycle for track 40. Unlike the other drives, the 1581 uses a fixed track index
sensor to pre-position the stepper motor. It's a real tricky system to align
properly.
 
 SAMS doesn't list the part numbers or the Manufacture Codes for any of the
sensors on those old Newtronics Drives. There are three of them involved in
the alignment process, and they have to be darn near perfect.
 
 Not much help here, guy... Those drives are no longer manufactured!
 
Note : On one of my old drives, I just removed the write protect sensor and
soldered the connections closed. It worked again, but you could not write
protect a disk anymore. Sometimes you have to fudge a bit!
--

&gt;&gt; Dear SMS Mike,

&gt;&gt; I have this old Apple IIE that I would like to infuse with software. I don't
&gt;&gt; have any telecommunications software or hardware for it though. I do have
&gt;&gt; a C-64 with modem and 1541 drive. I hear the disk ][ Apple drives and the
&gt;&gt; 1541 use a similar encoding scheme based on GCR. Is there a way to r/w apple
&gt;&gt; disks on my C-64 &amp; 1541, especially without hardware modification.
&gt;&gt;
&gt;&gt; OP

OP,

 Yikes!  Good question but as far as I know, I don't think there is an easy
&quot;software-only&quot; answer here.  I can think of a few options.  I know that
there was once an Apple II+ hardware emulator for the C-64.  This 'Spartan'
unit from Mimic systems allowed R/W to Apple disks, but I am not sure what
role (if any!) a 1541 played in this arrangement.  That being said, with
so many C= software/hardware throughout the years, it may be conceivable
that a disk ][ interface was available for the C-64.  I do not know if such
an interface exists, but the possibility might be worth investigating.

 As far as the actual drives are concerned, the following are known as
problems to be overcome for a potential 1541 - disk ][ reader :

- The 1541 rotates its disks at fixed speeds while its R/W head frequency
can be changed in four steps (in series from 250 khz to 300 khz I believe).
The disk ][ apparently has a variable speed drive engine which allows its
R/W head to sit at one fixed frequency as it read/writes.  As you can see,
here we have two opposite paradigms regarding what remains fixed and what
becomes variable to get the end-result of being able to read/write &quot;GCR&quot;.
Therefore, a 1541 could possibly read/write to a disk ][ format only in
those areas on the disk where the paradigms cancel each other (i.e., where
1541 Static Rotation + Variable Freq. = disk ][ Variable Rotation + Static
Freq.)  The 1541 frequency resolution as mentioned earlier is in 4 steps,
so it cannot match most of the changes incurred by the disk ]['s variable
rotation.  My guess is that a hardware modification to the 1541 would have
to be done.

- But that's not all, GCR does not equal GCR!  The disk ][ and 1541 use a
different GCR scheme!  The 1541 uses a 4-5 encoding and the disk ][ uses
an 8-9 encoding.  On top of this, you then have to rewrite the whole file
system on the C-64 end to match AppleDOS 3.xx whatever.. Not trivial.

- As an aside, some Apple sources I checked with tend to suggest that the
disk ][ runs at a constant 300 RPM.  This is contrary to my admittedly
limited experience with Apple hardware, but I was given a canonical
source to reference this point : BENEATH APPLE DOS.  It is supposed to
be much like the classic tome : INSIDE COMMODORE DOS.  If you or anyone
else wishes to attempt a 1541 to disk ][ project, these are the books to
get acquainted with.
--

&gt;&gt; Dear SMS Mike,

&gt;&gt; I hear the SuperCPU 128 will require a daughterboard or clip lead to the
&gt;&gt; VDC chip.  I don't want to open up my 128.  What gives?
&gt;&gt;
&gt;&gt; PO

PO,

 I have not heard this, but it would not surprise me.  The VDC is poorly
interfaced to main memory (for that matter, so is the Z80) in the C128.  I
can imagine a few reasons why additional hardware links above and beyond
a simple cartridge plug-in might be required for Super-CPU &amp; VDC operation.
I won't speculate much on this forum, since I lack proper information about
the SuperCPU paradigm and the VDC itself.  Although, now that I think about
it, I am reminded of the VDC article in disC=overy issue 1 (by S. Judd).  I
believe the goal of that article was to explore enough of the VDC internals
to &quot;time it out&quot; so to speak.  Now that we have gotten off-topic here :),
I have never run into a way to make a stable raster on the VDC.  Hmmmm,
according to my sources, the VDC runs at the 16 Mhz dotclock while everything
else on an NTSC C128 system runs at 14,318,181/14 Hz (on NTSC).  I can't see
a stable raster 100% under those conditions.  Anyways, as per your original
question, we will have to wait until CMD releases the SuperCPU 128 to find
out -what- is required and -why-.
--

&gt;&gt; Dear SMS Mike,
&gt;&gt;
&gt;&gt; I bought a VIC-20 at a thrift shop the other day, and OF COURSE, the
&gt;&gt; thing came with no cabling or power supply.  I managed to hack on a
&gt;&gt; power supply and had no problems using standard C= serial cables for
&gt;&gt; drive access, but how do I get a video/audio signal out of it?  By
&gt;&gt; the way, the VIC-20 will let me blindly type in and load a directory,
&gt;&gt; so I'm pretty certain it works.
&gt;&gt;
&gt;&gt; FN

FN,

 Here is the quickest way I know how to do it.  Just remember that this is a
VIC-20 Video Cable for use with TV/VCR/Monitors with VIDEO IN/AUDIO IN ports.
Now looking at the back of your VIC-20, you will see the 5 DIN video port,
as follows :

                               /--\_/--\
                              /         \
                             /  3     1  \
                            [  .       .  &Uuml;
                            [    5   4    &Uuml;
                             \  .  2  .  /
                              \    .    /
                               \_______/
 
Pin 1 : +5-6 V, max. 10 mAmps (WARNING : DO NOT CONNECT THIS PIN!)
Pin 2 : Ground
Pin 3 : Audio Out
Pin 4 : Video Low (Not Connected)
Pin 5 : Video High

You'll need a 5-pin DIN connector, two RCA jacks, and RCA cables.

 Take the 5-pin DIN connector (remember that the pins will be reversed when
you view the connector as it faces you) and connect the pins, as follows :

Pin 3 (Audio Out) to an RCA jack (label this one as audio out)
Pin 5 (Video Out) to a second RCA jack (label this one as video out)
Pin 2 (Ground) to the ground sleeve/prong of -both- RCA jacks.

 Using RCA-style cables, connect these Audio/Video-Out jacks to their respective
Audio/Video-In counterparts on a VCR or Monitor/TV.  You should now be able to
watch your VIC-20 in action.  If everything is connected properly, you will
see the powerup message with a CYAN border and WHITE background (NTSC VIC-20).

 Your video difficulties should now be resolved.  You also mentioned a problem
in securing power supplies for the VIC-20.  Although you resolved this issue,
the traditional steps for those who might not be familiar with the VIC-20 is
to swing your VIC to where the On/Off switch is located and find the power
socket next to the switch.  (It will be the socket closer to the big open
port (for cartridges) at the back of your computer).

 If you look at your VIC-20's power socket and notice that there are more
than 2 prongs :) on it, you are in luck.  A regular C-64 power supply will
work with your VIC-20.

 If you look at your VIC-20's power socket and it does have two prongs facing
out, then you have to search!  Find a power supply with at least 9 Volts AC
delivered at 1 Ampere (with two prongs, each delivering power at 180 degrees
out of phase from each other) and hook it up.  If this is not an option, you
can pull 9 Volts AC @ 1 Ampere from a C64 or flat C128 power supply.  For
example, the online 'zine C= Hacking, issue #6, has an article on building
power supplies for the C-64.  With two extra wires drawing off the 9 VAC and
the proper two-prong nylon connector, the power supply described in the article
becomes an excellent &quot;old-style VIC-20&quot; supply.
 

:::::::::::d:i:s:C=:o:v:e:r:y:::::::::::::::::i:s:s:u:e::2::::::::::::::::::::
$2bad:::::::::::::::::::::::::::E:R:R:A:T:A:::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


                      E R R A T A   :   I S S U E  1


&gt;&gt; /S04 - &quot;A complete dissection of Gfx-Zone&quot;
&gt;&gt; $d000   by &quot;XmikeX&quot;

     - In TBB's music player code, &quot;lda #$7f : sta $dc0d&quot; was described as
       enabling timer interrupts when in reality it disables timer interrupts.

     - The author may be reached through the Editor-in-Chief of disC=overy. 


&gt;&gt; /S05 - &quot;A Beginner's Guide to the JCH Editor V2.53, NewPlayer V14.G0&quot;
&gt;&gt; $d400   by Sean M. Pappalardo        

     - SHIFT and SPACE inserts the sustain marker in the blocks (+++),
       * NOT * SHIFT and RETURN, as written in the article.

     - The author's internet address was omitted!  Mr. Pappalardo is
       available for questions and comments at : pegasus@planet.earthcom.net


&gt;&gt; /S07 - &quot;Some preliminary data on VDC timing&quot;
&gt;&gt; $d600   by Stephen L. Judd

     - At least one of the uuencoded files included in the original article
       was found to be corrupt.  Both have been verified and included below.
       Note: 'vdc-explorer' is the basic portion, which loads (from drive 8)
       the ML object file (vdc-explorer.o).

begin 644 vdc-explorer
M 1PP' H F2 BFY/6Q,,@Q5A03$]215(@0ED@TU1%4$A%3B#,+B#*541$(CK^
M&quot;R Q $P&lt;% &quot;+(,(HT2@B,3,P,&quot;(I*;(Q,C @IR T, !C'!X _A$B5D1#+458
M4$Q/4D52+D\B '$&lt;* !.LC$R,#I#LC  DQPR /XF.D:R,3J7(#4S,C8U+,(H
M-3,R-C4I(*\@,C,Y *(&lt;/ &quot;/($9!4U0Z1CTR -X&lt;1@&quot;&amp;(%0Q*$XI+%0R*$XI
M+%0S*$XI+%0T*$XI+%0U*$XI+%0V*$XI+%0W*$XI+%0Y*$XI+$%6*#@I #@=
M4 &quot;9(I,B.E1%4U2RT2@B,31#.2(I.E(QLE1%4U2J,3I2,K)2,:HR.D%2LE(R
MJC(Z4C.R05*J,CI2-+)2,ZHR.D93LE(TJC(Z34&amp;R1E.J,CI&amp;1K)-0:HR 'P=
M6@!!5B@Q*;(P.D%6*#(ILC Z058H,RFR,#I!5B@T*;(P.D%6*#4ILC Z058H
M-BFR,#I!5B@W*;(P.D%6*#@ILC  BAUD ($@2;(Q(*0@3@&quot;:'6X GB#1*&quot;(Q
M,S P(BD PQUX %0Q*$DILL(H5$535&quot;DZ058H,2FR058H,2FJ5#$H22FK,3&quot;M
M1@#Q'8( 5#(H22FRPBA2,2FJ,C4VK,(H4C&amp;J,2DZ058H,BFR058H,BFJ5#(H
M22D 'QZ, %0S*$DILL(H4C(IJC(U-JS&quot;*%(RJC$I.D%6*#,ILD%6*#,IJE0S
M*$DI $T&gt;E@!4-&quot;A)*;+&quot;*$%2*:HR-3:LPBA!4JHQ*3I!5B@T*;)!5B@T*:I4
M-&quot;A)*0!['J  5#4H22FRPBA2,RFJ,C4VK,(H4C.J,2DZ058H-2FR058H-2FJ
M5#4H22D J1ZJ %0V*$DILL(H4C0IJC(U-JS&quot;*%(TJC$I.D%6*#8ILD%6*#8I
MJE0V*$DI -&lt;&gt;M !4-RA)*;+&quot;*$93*:HR-3:LPBA&amp;4ZHQ*3I!5B@W*;)!5B@W
M*:I4-RA)*0#P'KX 5#BR,C4VK,(H34$IJL(H34&amp;J,2D 'A_( %0Y*$DILL(H
M1D8IJC(U-JS&quot;*$9&amp;JC$I.D%6*#@ILD%6*#@IJE0Y*$DI %T?T@&quot;9(&quot;(3$1$1
M$2)).U0Q*$DI.U0R*$DI.U0S*$DI.U0T*$DI.U0U*$DI.U0V*$DI.U0W*$DI
M.U0Y*$DI &amp;,?W &quot;&quot; )D?Y@!/2+)!5B@Q*:U..IDBDP5415-4,3H@3U9%4DA%
M040](D]((B!%6%!%0U1%1#TB,ZU&amp; +4?\ &quot;9(AQ415-4,CH1G9V=G9V=HZ.C
MHZ,B.P#,'_H 4U*R*$%6*#(IJT%6*#$I*:U. .&lt;?! &amp;9+&quot;)324Y'3$4@4D5'
M25-415(](E-2  ,@#@&amp;9+&quot;)%6%!%0U1%1&quot;!604Q513TB,3&quot;M1@ -(!@!C2 V
M,#  *2 B 9DBGU1%4U0S.A&amp;=G9V=G9VCHZ.CHR([ %&lt;@+ &amp;9+&quot;)324Y'3$4@
M4D5'25-415(@5%=)0T4](BA!5B@S*:M!5B@Q*2FM3@!S(#8!F2PB15A014-4
M140@5D%,544](E-2K#( ?2!  8T@-C P )D@2@&amp;9(IQ415-4-#H1G9V=G9V=
MHZ.CHZ,B.P#&quot;(%0!5%*R*$%6*#0IJT%6*#$I*:U..IDL(E1/5$%,(%1)344]
M(E12 /(@7@%44[)44JLH,S&gt;L-:LQ*:U&amp;.IDL(DU)3E53($Q/3U @3U9%4DA%
M040](E13 !0A: &amp;9+&quot;)$258@,S&lt;@0DE4+4Q/3U!3/2)44ZLS-S&quot;M1@!#(7(!
MF2PB/3X@0DE4+4Q/3U @4D50151)5$E/3E,](BA44ZLS-S&quot;M1BFL1JTW $TA
M? &amp;-(#8P, !I(88!F2(&gt;5$535#4Z$9V=G9V=G:.CHZ.C(CL DB&amp;0 9DL(E17
M3R!214%$4R!214&lt;@,3@](BA!5B@U*:M!5B@Q*2FM3@&quot;R(9H!F2PB15A014-4
M140@5D%,544](E-2K#*J.*U&amp; +PAI &amp;-(#8P, #8(:X!F2(?5$535#8Z$9V=
MG9V=G:.CHZ.C(CL !R*X 4TQLBA!5B@V*:M!5B@Q*2FM3CJ9+&quot;)/3D4@345-
M3U)9($9%5$-(/2)-,0 [(L(!15:R4U*L,ZHQ,JU&amp;.IDL(D584$5#5$5$(%9!
M3%5%/2)%5B(@1$E&amp;1CTB33&amp;K158 =B+, 9DL(E!23T(N($Y532!215!3(%1/
M(%=!250@1D]2(%9$0R!&amp;151#2#TB*$TQJT56*:TH-ZU&amp;*0&quot; (M8!C2 V,#  
MG&quot;+@ 9DBGE1%4U0W.A&amp;=G9V=G9VCHZ.CHR([ ,LBZ@%54K(H058H-RFK058H
M,2DIK4XZF2PB3$]/4&quot;!-14U/4ED@1DE,3#TB55( _2+T 553LE52JS.M1JLR
M-3:L*%-2JCFM1BDZF2PB15A44D$@5D1#(%=!2513/2)54P O(_X!F2PB059%
M4D%'12!&quot;250M3$]/4&quot;!215!)5$E424].4SHB55.M*#(U-JPWK48I #DC&quot; *-
M(#8P, !5(Q(&quot;F2*!5$535#@Z$9V=G9V=G:.CHZ.C(CL A&quot;,&lt; E92LBA!5B@X
M*:M!5B@Q*2FM3CJ9+&quot;)43U1!3&quot;!&quot;3$]#2R!&amp;24Q,/2)64@#$(R8&quot;F2PB/3X@
M05!04D]8(%9$0R!424U%($9/4B R-38@0EE412!&quot;3$]#2R!&amp;24Q,/2)64JLR
M-*U&amp;JS.L4U( RB,P CH X&quot;,Z HT@-C P.HL@0[(Q(*&lt;@-3DP /,C1 +^)3I#
MLC$Z1K(R.HDX,  &quot;)$X&quot;F2*?0EE%(2(Z@  9)%@&quot;H2!!)#J+($$DLB(B(*&lt;@
,-C P !\D8@*.    
 
end

begin 644 vdc-explorer.o
M !-XJ?^-!-V-!=VI&amp;: (C0[=ZNKJZNJ,#MVI_SCM!-V-R12B$JD9C0[=C@#6
M+ #6$/N,#MTXJ?_M!-V-RA2I_^T%W8W+%*D9C0[=C@#6+ #6$/N. -8L -80
M^XP.W3BI_^T$W8W,%*G_[07=C&lt;T4HB2I&amp;8T.W8X UBP UA#[RA#UC [=.*G_
M[03=C&lt;X4J?_M!=V-SQ2B$JD9C0[=C@#6+ #6$/NM =R. -8L -80^ZT!W(P.
MW3BI_^T$W8W0%*G_[07=C=$4J1F-#MV. -8L -80^XT!UNB. -8L -80^XT!
MUJ(?C@#6+ #6$/N,#MTXJ?_M!-V-TA2I_^T%W8W3%*(2J0&quot;. -8L -80^XT!
MUHX UBP UA#[C0'6J1F@ *(?C0[=J6:. -8L -80^XT!ULC0\J (C [=.*G_
M[03=C=04J?_M!=V-U12B$JD C@#6+ #6$/N- =;HC@#6+ #6$/N- =:I&amp;:(?
MC0[=J6:. -8L -80^XT!UJ(8J0&quot;. -8L -80^XT!UJ(&gt;J?^. -8L -80^XT!
MUJ(2C@#6+ #6$/N,#MVM =:-UA3HC@#6+ #6$/NM =:-UQ0XJ?_M!-V-V!2I
:_^T%W8W9%%A@                      #6
 
end


&gt;&gt; /S09 - &quot;Software analysis and reconstructive therapy, a historical view
   $dd00   on 'cracking'&quot;
           by Pontus Berg

     - The author's internet address was omitted!  Mr. Berg is available
       for questions and comments at : PBG@hk.mobitel.telia.se

--
Note : None of these errors are present in the 'WordPerfect for Windows
       5.2' version of disC=overy, issue 1.


:::::::::::d:i:s:C=:o:v:e:r:y:::::::::::::::::i:s:s:u:e::2::::::::::::::::::::
\END::::::::::::::::::::::::::October 1, 1996:::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


</pre></td></tr></table></center>
</body>

</html>