<html>

<head>
<title>C=Hacking #18</title>
</head>

<body bgcolor="#a098ff" text="#000000" link="#ffffff" alink="#ffffff" vlink="#404040">
<center><table><tr><td><pre>

                   ########
             ##################
         ######            ######
      #####
    #####  ####  ####      ##      #####   ####  ####  ####  ####  ####   #####
  #####    ##    ##      ####    ##   ##   ##  ###     ##    ####  ##   ##   ##
 #####    ########     ##  ##   ##        #####       ##    ## ## ##   ##
#####    ##    ##    ########  ##   ##   ##  ###     ##    ##  ####   ##   ##
#####  ####  ####  ####  ####  #####   ####  ####  ####  ####  ####   ######
#####                                                                    ##
 ######            ######           Issue #18
   ##################             July 3, 1999
       ########


...............................................................................

	Time flies like the wind; fruit flies like a banana.


	&quot;Yet if the only form of tradition, of handing down, consisted in
	 following the ways of the immediate generation before us in a
	 blind or timid adherence to its successes, 'tradition' should be
	 positively discouraged.   We have seen many such simple currents
	 lost in the sand; and novelty is better than repetition.  [Tradition]
	 cannot be inherited, and if you want it you must obtain it by great
	 labor.&quot;
		T. S. Eliot, &quot;Tradition and the Individual Talent&quot;

...............................................................................

BSOUT

	Tradition.  C=Hacking is a magazine of considerable tradition, a
tradition that is not merely imitating the successes of previous generations.
C=Hacking has a tradition of true excellence, and once again, great people
have contributed their time and talents towards the 64 community, and another
fine issue of C=Hacking.  And once again, innovative ideas have grown and
borne delectable fruits for those seated at the C=Hacking table.  And once
again, in keeping with one of C=Hacking's most hallowed traditions, the
issue is really, really late.

	A new job, a new move, a new house, a new puppy -- what can I say?
This real world stuff takes some getting used to, and so this issue is
even later than usual.  On the plus side, I think you'll find it worth
the wait (at least, I hope so!).

	A lot has happened in the C= world since the last issue of C=Hacking.
At the personal level, all my moves and uphevals have led to a few changes.
Now that I'm fabulously wealthy (compared to my old graduate student salary,
I am fabulously wealthy), I splurged on a custom domain name.  The Fridge
is now located at http://www.ffd2.com, and thus the Official Unofficial
C=Hacking Homepage is now located at

	http://www.ffd2.com/fridge/chacking/

And in the &quot;well, it's news to me&quot; department:

	- SuperCPU acitivty seems to be picking up steam, at long last.
	  The giga.or.at scpu mail list recently revived itself, and several
	  new projects and web pages have appeared.  

	  Moreover, 65816 assemblers have finally started to appear.
	  El Cheapo Assembler (CheapAss), for SuperCPU-equipped 64s,
	  is available in the Fridge.  A new cross-assembler, ACME, is
	  being worked on.  And a *third* project, Virtualass816, is said
	  to be underway.

	  In addition to the assemblers, there is an 816 backend to LCC,
	  some new operating system projects (e.g. JOS), rumors of games, 
	  game fixes (including a Flight Simulator patch by Maurice Randall),
	  and more.

	  http://come.to/supercpu is a good place to learn more about new SCPU
	  developments.

	- There will be an English version of GO64! magazine, starting with the 
	  August issue, available by subscription.  For more information, visit
	  http://www.go64.c64.org

	- The annual Chicago Expo will take place in -- amazingly enough --
	  Chicago, on September 25.  Last year was a hoot and hopefully 
	  our group will be there again this year.  For more details,
	  http://members.aol.com/~rgharris/swrap.html will surely contain
	  info as the date draws near.

	- Justin Beck, a dj at station KDVS, in Davis, CA, runs a SID radio
	  show every tuesday night at 8PM Pacific time.  You can tune in at
	  90.3 in the Davis/Sacramento area, or the webcast at
	  http://www.kdvs.org.  For more information, write jrbeck@ucdavis.edu;
	  actually, write him anyways, to tell him how cool the show is!

	- CBM FIDO echos are available at several places on the web
	  these days -- http://cereal.mv.com is a pretty popular source.

	- Craig Bruce has been placing old issues of the Transactor online at

		http://www.pobox.com/~csbruce/commodore/transactor/

	   Well worth a visit.

	- Another unzip program has appeared, by Pasi Ojala.  Visit his homepage

		http://www.cs.tut.fi/~albert/

	  for more details.

	- Richard Atkinson &lt;rga24@hermes.cam.ac.uk&gt; has drawn up schematics
	  of the Commodore Sound Expander, a Yamaha-chip-based cartridge.
	  For more info, email Richard!  (And maybe look in a future issue
	  of C=Hacking??? :)


This weekend, here in the states, we are celebrating our independence
(I think the Canadians tried to invade us once, or something...).  I can't
help but reflect that the Commodore 8-bits also represent a kind of
independence.  As the above (and the below) amply demonstrates, that
independent spirit is alive and thriving, a fact that is not only remarkable,
but even perhaps worth celebrating.

Enjoy the issue!

-S
.......
....
..
.                                    C=H 18

::::::::::::::::::::::::::::::::::: Contents ::::::::::::::::::::::::::::::::::

BSOUT
	o Voluminous ruminations from your unfettered editor.


Jiffies
	o Maybe next time!


The C=Hallenge

	o Yet again, no C=Hallenge, sigh...


Side Hacking

	o Data Structures 101: Linked Lists

	  DS101 is a new article series.  The idea is to review different
	  data structures, with examples of their use in 64 programming.

	  This installment covers linked lists, and how to use them to
	  make a zippy insertion sort with almost zero overhead.

	o Counting Sort, by Pasi Ojala

	  And, since we're on the subject of sorting algorithms, Pasi
	  wrote up the counting sort.  What's a counting sort?  Well,
	  read the article!


Main Articles

	o &quot;VIC-20 Kernel ROM Disassembly Project&quot;, by Richard Cini
	  &lt;rcini@msn.com&gt;

	  This installment covers interrupts -- IRQ and NMI sources,
	  the kernal handler code.

	o &quot;A Diehard Programmer's Introduction to GEOS, and geoWrite 
	   Disassembly Notes&quot;, by Todd S. Elliott &lt;Eyethian@juno.com&gt;

	  As part of his effort to learn about GEOS programming, Todd
	  disassembled geoWrite 128, and patched it to be more accepting
	  of new devices and such.  This article summarizes that adventure --
	  the results and the lessons learned.

	o Masters Class: &quot;NTSC/PAL fixing: FLI&quot;, by Russell Reed 
	  &lt;rreed@egypt.org&gt;, Robin Harbron &lt;macbeth@tbaytel.net&gt;, and S. Judd.

	  This time around the subject is FLI and IFLI graphics, and
	  a tutorial on fixing them.  Several pictures are provided for
	  the reader to fix, in the included .zip file.

	o &quot;Obj3d: The 3D object library&quot;, by S. Judd &lt;sjudd@ffd2.com&gt;

	  Obj3d is a set of routines for creating, manipulating, and displaying
	  3D worlds on the 64.  It consists of routines to add and remove
	  objects, move and rotate objects, render the display, and so on,
	  and hence vastly simplifies the creation of 3D programs.

	  This article actually consists of three articles.  The first article
	  describes the library, and walks through a simple example program.

	  The second article is the &quot;programmer's guide&quot;, containing memory
	  maps and a list of all the routines.

	  The third article discusses &quot;stroids&quot;, a more advanced example
	  program in which a space ship can fly around a randomly drifting
	  asteroid field, to demonstrate that sophisticated programs can be
	  written with only a few hundred lines of code.  The program is
	  purposely left incomplete -- it's up to you to finish it up!

	  We had hoped to include a &quot;3D Object Editor&quot;, written by Mark
	  Seelye, but it wasn't quite done yet -- next issue!

	  Source code and binaries are included at the end of the issue.

	  
.................................. Credits ...................................

Editor, The Big Kahuna, The Car'a'carn..... Stephen L. Judd
C=Hacking logo by.......................... Mark Lawrence

For information on the mailing list, ftp and web sites, send some email
to chacking-info@jbrain.com.

Legal disclaimer:
	1) If you screw it up it's your own fault!
	2) If you use someone's stuff without permission you're a serious dork!

About the authors:

Todd Elliot is 30 years old, working as a Community Client Advisor
for the Center On Deafness - Inland Empire, working with deaf people in
the local communities.  He got his first 64 in December 1983, using it
for games, BBS activities, and dabbling in programming.  Nowadays Todd
focuses on ML programming, and his latest project is an AVI movie player
for the SuperCPU.  Todd is a huge fan of sports and the Miami Dolphins in
particular, and enjoys writing articles and watching movies.  At the 1998
Chicago Expo Todd enjoyed meeting all those people who were previously
a name and an email address; according to Todd, &quot;The Chicago Expo truly
embodies what is going on with today's CBM community.&quot;

Richard Cini is a 31 year old vice president of Congress Financial
Corporation, and first became involved with Commodore 8-bits in 1981, when
his parents bought him a VIC-20 as a birthday present.  Mostly he used it
for general BASIC programming, with some ML later on, for projects such as
controlling the lawn sprinkler system, and for a text-to-speech synthesyzer.
All his CBM stuff is packed up right now, along with his other &quot;classic&quot; 
computers, including a PDP11/34 and a KIM-1.  In addition to collecting
old computers Richard enjoys gardening, golf, and recently has gotten
interested in robotics.  As to the C= community, he feels that it
is unique in being fiercely loyal without being evangelical, unlike
some other communities, while being extremely creative in making the 
best use out of the 64.

Pasi 'Albert' Ojala is a 29 year old software engineer, currently
working at a VLSI design company on a RISC DSP core C compiler.
Around 1984 a friend introduced him to the VIC-20, and a couple
of years later he bought a 64+1541 to replace a broken Spectrum48K.
He began writing his own BBS, using ML routines for speed, and
later wrote a series of demos under the Pu-239 label.  In addition
to pucrunch and his many C=Hacking articles, Pasi's most recent project
is an &quot;unzip&quot; program for the 64.  Pasi is also a huge Babylon-5 fan, and
has a B5 quote page at http://www.cs.tut.fi/~albert/Quotes/B5-quotes.html

Robin Harbron is a 26 year old internet tech support at a local
independent phone company.  He first got involved with C= 8-bits
in 1980, playing with school PETs, and in 1983 his parents convinced
him to spend the extra money on a C64 instead of getting a VIC-20.
Like most of us he played a lot of games, typed in games out of
magazines, and tried to write his own games.  Now he writes demos,
dabbles with Internet stuff, writes C= magazine articles, and, yes,
plays games.  He is currently working on a few demos and a few games,
as well as the &quot;in-progress-but-sometimes-stalled-for-a-real-long-time-
until-inspiration-hits-again Internet stuff&quot;.  He is also working on
raising a family, and enjoys music (particularly playing bass and guitar), 
church, ice hockey and cricket, and classic video games.


.................................. Jiffies ...................................

Blah.

............................... The C=Hallenge ...............................

Bleah.

................................ Side Hacking ................................


Data Structures 101 -- Linked lists and a nifty sorting algorithm
-------------------
			by S. Judd and Pasi Ojala --

	Every computer science major has taken a class in data structures.
The 64 programming world, however, is full of non-CS majors.  Data structures
are such useful tools for programmers to have in their toolbox that I thought
it would be a worthwhile thing to have various people periodically review
different types of data structures, and common algorithms which make use 
of them, and their relevance to an 8-bit CBM.
	What is a data structure?  Perhaps a reasonable definition is that
it is an abstract method of storing and retrieving data.  These abstractions
may then be implemented on the computer, to solve different types of problems.
Whereas no single data structure is ideal for all problems, often a given
problem has a data structure ideally suited for it.  The &quot;optimal&quot; data
structure for a given problem depends heavily upon what kind of data is
stored, and how it is stored, retrieved, or otherwise manipulated.

	(On a more humorous note, /dev/null is ideal for storing information
provided you don't need to retrieve it, ever -- this probably doesn't
count as a data structure, though).

	A simple example of a data structure is an array: abstractly, it
stores and retrieves data by means of an index value, e.g. A$(I).  On the
computer it might be implemented in many different ways, depending on the
type of data stored (integers, strings, floating point, custom records, etc.),
the dimension of the array, the computer hardware, and even whether the index
is e.g. an integer or a string.  So it is worthwhile to distinguish the
abstract concept of an &quot;array&quot; from its actual implementation.

	Another type of useful data structure is a linked list.  Imagine 
attaching a pointer to some chunk of data (usually called a &quot;node&quot;).  This
pointer can then point, or link, to another chunk of data -- the next node
in the list.  This can be schematically illustrated as:

  +---+     +---+     +---+     +---+     +---+
  | 3 |----&gt;| 1 |----&gt;| 4 |----&gt;| 5 |----&gt;| 9 |----&gt; ...
  +---+     +---+     +---+     +---+     +---+

Here each node contains some data (a number) and a pointer to the next node.
Starting from the first node -- called the &quot;head&quot; of the list -- a program
can reach every other node by following the pointers.  This is the basic
idea of a linked list.
	Linked lists are used all over the place in the 64.  BASIC programs
are a type of linked list.  Each line of a basic program is stored as
a line link, then a line number and the data.  The link points to the next
line in the program.  Having links speeds up BASIC programs (imagine
finding and counting the ends of each line for every GOTO or GOSUB), and
links are useful because each program line can be of different size
(imagine storing a program in something like an array).  The end of the
list is specified with a line link of 00.
	A better example is the DOS.  Every 256-byte sector on a disk
drive starts with a 2-byte track and sector pointer, pointing to the next
sector in the chain, and contains 254 bytes of data.  This is exactly a
linked list.  The directory tells where the first sector of a program is --
the head of the list -- and the program is loaded by simply traversing the
list -- following each link and reading the data.  The end of the list is
specified by using a special link value (track = $FF).
	The reason it is &quot;better&quot; is that whereas a BASIC program is
stored sequentially in memory, a program stored on disk might be strewn all
over the place.  This is an important feature of linked lists: they can join
together data that is spread all over memory.  If you think about it for 
a moment, you'll quickly realize that elements may be added into (or removed
from) the middle of a list simply by changing a pointer:

  +---+     +---+     +---+             +---+     +---+
  | 3 |----&gt;| 1 |----&gt;| 4 |-+        +-&gt;| 5 |----&gt;| 9 |----&gt; ...
  +---+     +---+     +---+ |        |  +---+     +---+
			    |        |
			    |  +---+ |
			    +-&gt;| 1 |-+
			       +---+

(Well, okay, two pointers :).  Inserting sectors into the middle of a 
program isn't exactly very useful for disk storage, but there are plenty of
applications where it is extremely useful; one such application, discussed
below, is sorting data.
	Both BASIC and the disk drive are examples of a forward- or singly-
linked list.  But imagine attaching a second pointer to each disk sector,
pointing to the _previous_ track and sector:

  +---+     +---+     +---+     +---+     +---+
  |   |----&gt;|   |----&gt;|   |----&gt;|   |----&gt;|   |----&gt; ...
  |   |     |   |     |   |     |   |     |   |
  |   |&lt;----|   |&lt;----|   |&lt;----|   |&lt;----|   |&lt;---- ...
  +---+     +---+     +---+     +---+     +---+

This would be a &quot;doubly-linked list&quot;.  The downside would be a loss of two
bytes per sector; the upside would be that if your directory track were
destroyed, you could recover all programs on a disk -- in a singly-linked
list like C= DOS, you have to know where the start of the list, i.e. the
first track and sector, is.  Moreover, with a doubly-linked list you
can _delete_ a node without even knowing where the node is in the list;
with a singly-linked list, you have to search through the list to find
the pointer to the node.

	Of course, you could add even more pointers to a list, which is
done for certain types of trees, for example.  (Trees will perhaps be
covered some other time).

A fast sorting algorithm
------------------------

	Let's say you had a list of numbers that you wanted to sort from
largest to smallest.  For example, the obj3d library, discussed later
in this issue, needs to depth-sort objects, so that far-away objects
don't overlap nearby objects when drawn on the screen.  This amounts to
sorting a list of 16-bit numbers.  These numbers are stored in a simple
list -- not a linked list, but an array, like:

lobytes
	lo0
	lo1
	lo2
	...
hibytes
	hi0
	hi1
	hi2

A typical sorting algorithm would have to spend a lot of time swapping
numbers, moving stuff around, etc.  Even with 16-bits this is a fair
amount of overhead, and with even larger numbers it gets very time-
consuming.
	But, as mentioned earlier, a linked list is tailor-made for
rearranging data.  That is, if we start with a list of sorted numbers,
then inserting a new number into the list amounts to finding the right
spot in the list, 

  +---+     +---+     +---+
  | 1 |----&gt;| 2 |----&gt;| 5 |---
  +---+     +---+     +---+

changing the first part of the list to point to the new number,

  +---+     +---+     +---+  
  | 1 |----&gt;| 2 |----&gt;| 5 |-+        
  +---+     +---+     +---+ | 
			    |       
			    |  +---+ 
			    +-&gt;| 6 |---
			       +---+

and having that new number point to the rest of the list.

  +---+     +---+     +---+             +---+     +---+
  | 1 |----&gt;| 2 |----&gt;| 5 |-+        +-&gt;| 8 |----&gt;| 9 |----&gt; ...
  +---+     +---+     +---+ |        |  +---+     +---+
			    |        |
			    |  +---+ |
			    +-&gt;| 6 |-+
			       +---+

So sorting a list of numbers amounts to inserting these numbers into
the right spot in the list, one at a time.  Amazingly enough, this type
of sort is called an &quot;insertion sort&quot;.

	Your first thought might be &quot;doesn't that mean a whole lot of
overhead in copying data and changing pointers?!&quot;  It might, if we were
lame PC programmers; but, of course, we are 64 coders, which means we
are handsome, witty, superior, humble -- and most of all, sneaky.  All
we _really_ need is

	a) an index into the list of numbers
	b) a pointer to the next number

The trick is simply to combine the two, by storing the linked list just
like the list of numbers, as a sequential array of *8-bit* links:

list
	link0
	link1
	link2
	...

Now each link not only points to the next list element -- it exactly points
to the next number as well.  For example, let's say that the earlier list
of numbers was 23,16,513

lobyte
	23
	01
	16

hibyte
	00
	02
	00

Sorting from largest to smallest should give 1-0-2 -- that is, element 1
is the largest, followed by element 0, followed by element 2.  So the linked
list could have the form

head = 1
list
	2
	0
	$80

To see how this works, start with the head of the list, which points to
list element 1.

	LDX head

To get the next element in the list is easy:

	LDA list,X

Now .X is the current element, and .A is a link to the next element.  To
traverse the entire list, then we simply need to TAX and loop:

	LDX head
:loop	LDA list,X
	TAX
	BPL :loop

This will traverse the list, until the $80 is reached.  The thing to
realize is that .X is *also* a list into the list of numbers, so for
example you could print out the numbers, in order, with some code like

	LDX head
:loop	LDA lobyte,X
	LDY hibyte,X
	JSR PrintAY
	LDA list,X
	TAX
	BPL :loop

Now all we have to do is construct the list!

	get next coordinate
	traverse linked list
	    compare to coordinates in linked list, to find correct spot
	split linked list in half
	make bottom half of list point to the new element
	make the new element point to the rest of the list

So far it is just your basic insertion-sort; if you are familiar with
AmigaOS, it is similar to Enqueue(), which inserts nodes by priority.
The beauty here is that the index registers make all this really, really
easy; here's the sort code from obj3d, to sort positive numbers, stored
in CZ and HCZ = lo and hi bytes, from largest to smallest.  It starts
at the head of the list (at list+$80), traverses the list to find the
right spot, and inserts the &quot;node&quot;:

 :loop	[copy number to be inserted to TEMP, TEMP+1 for a little speed]

         LDY #$80         ;Head of list
:l1      LDA VISOBJS,Y    ;Linked list of objects
         BMI :link
         STY TEMPY
         TAY              ;Next object
         LDA CZ,Y         ;If farther, then
         CMP TEMP         ;move down list
         LDA HCZ,Y
         SBC TEMP+1
         BCS :l1
                          ;Nearest objects last in list
         TYA
         LDY TEMPY        ;Insert into list
:link    STA VISOBJS,X    ;X -&gt; rest of list
         TXA
         STA VISOBJS,Y    ;beginning of list -&gt; X
         DEX
         BPL :loop
:rts     RTS

Here, VISOBJS is the linked list of sorted coordinates.

	Personally, I think that's awfully nifty -- an insertion sort with
almost zero overhead.

	In summary, a linked list is simply an abstract method of storing and
retrieving data.  For certain kinds of problems it is extremely useful, even
optimal, and for certain problems it can be implemented in a very efficient
and convenient way.  And as pointed out in the beginning of this article, that
is the essence of a data structure.
	
	I suppose that about wraps things up.  So, who wants to volunteer the
next data structures article?

    ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

Counting sort
------------- by Pasi Ojala &lt;albert@cs.tut.fi&gt;

	Because we got ourselves tangled up with sorting algorithms, we may
as well take a look into another one called counting sort.  The idea is to
sort a list of symbols according not to the symbols themselves, but rather
according to a &quot;key&quot; associated with the symbols.  This will become clear
shortly.  This sorting algorithm can be used with integer-valued data when
the range of sorting key values (the values by which the order is decided)
is small enough.

	The foundation for counting sort is to make one pass through the
data and determine the sorted order of the data, then make another pass and
perform the actual shuffling of data.

	Now, what kind of a data structure is used for counting sort?
Surprise, we only need a counter for every possible sorting key.  This is
why a limited range of values is required or the memory consumption would
simply be too large.  And we need an array of input data and an array for
the sorted output data, as the sorting can't be performed in place.

	An example sorts the following data, which in fact represents a
Huffman tree.  The sorting keys are the code lengths, and the associated
data is the corresponding symbol.  The sorting of symbols is required in
some of the Huffman tree creation routines.

	key: 4 3 1 5 3 6 3 6
	sym: A B C D E F G H

	The sorting keys can have value from 1 to 6, so we need 6 counters.
Their initial values are set to zero:

	for(i=1;i&lt;7;i++)
	    count[i-1] = 0;

	count: 0 0 0 0 0 0

	Then we perform the counting stage by going through the data and
incrementing the counter corresponding to the sorting key value.  In the
end the counters contain the number of each code length found in the data.

	for(i=0;i&lt;#ofvalues;i++) {
	    count[sort_key[i]-1] = count[sort_key[i]-1] + 1;
	}

	count: 1 0 3 1 1 2

	Then cumulative counts are calculated for this array.

	for(i=1;i&lt;6;i++) {
	    count[i+1] = count[i+1] + count[i];
	}

	count: 1 1 4 5 6 8

	If you take a close look into the meaning of the values now in the
count array, you might notice that the last count value gives us from which
element downward to stick the data with sorting key 6, the previous one
where to stuff data with key 5 and so on.

	So, next we simply copy each element in the data into its final
place in the output array using the cumulative counts calculated
previously.  Note that in C the indexing starts from 0, but in the table
from 1 for the reader's convenience.

	for(i=#ofvalues-1;i&gt;=0;i--) {
	    count[key[i]-1] = count[key[i]-1] - 1;

	    outputkey[count[key[i]-1]] = key[i];
	    outputsym[count[key[i]-1]] = sym[i];
	}

            1 2 3 4 5 6   1 2 3 4 5 6 7 8
	---------------------------------
	6   1 1 4 5 6 8   x x x x x x x 6
	H             7   X X X X X x X H

	3   1 1 4 5 6 7   x x x 3 x x x 6
	G       3         X X X G X x X H

	6   1 1 3 5 6 7   x x x 3 x x 6 6
	F             6   X X X G X x F H

	3   1 1 3 5 6 6   x x 3 3 x x 6 6
	E       2         X X E G X x F H

	5   1 1 2 5 6 6   x x 3 3 x 5 6 6
	D           5     X X E G X D F H

	1   1 1 2 5 6 6   1 x 3 3 x 5 6 6
	C   0             C X E G X D F H

	3   0 1 2 5 6 6   1 3 3 3 x 5 6 6
	B       1         C B E G X D F H

	4   0 1 1 5 6 6   1 3 3 3 4 5 6 6
	A         4       C B E G A D F H


	So, after the loop we have sorted the symbols according to the code
lengths.  We haven't talked about the O() notation, but the counting sort
is an O(n) process.  Counting sort only needs three fixed-sized loops, thus
if the amount of data increases linearly, the sorting time also increases
linearly.  With insertion sort the sorting time increases geometrically
because searching for the right spot to add a node takes longer and longer
when the number of already sorted nodes increases.

	One extra bonus for counting sort is that it preserves the
so-called inside order.  The order of elements with identical keys is
preserved in the end result.  This is very important in many algorithms,
like the Huffman tree creation GZip uses (and which gunzip.c64 used
before the algorithm was changed to not require sorting).

	On the minus side is the necessity of the output buffer. Other
sorting algorithms can sort the data in-place, although that also means
that the data must be copied a lot of times.

	The preservation of inside-order also allows the sorting of data by
multiple keys:  first sort by secondary keys, then by primary keys.  After
this the data is sorted by the primary keys and all elements having
identical keys are sorted by the secondary keys.

	And that's it!

.......
....
..
.                                   C=H #18

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

				  Main Articles
				  -------------



VIC KERNAL Disassembly Project - Part II
Richard Cini
May 21, 1999

Introduction
============

	Last issue, we began by examining the VIC's start-up sequence. We 
began with the processor jump at power-on to location $FFFC upon power-up 
and ended at the Kernal?s jump into the BASIC ROM.

	This issue, we will look at the two other hard-coded processor 
vectors, the IRQ and NMI vectors. Just like the RES* pin on the 6502 
processor, the IRQ* and NMI* pins (the hardware portion of the interrupt) 
are hard-coded to two memory locations, $FFFE and $FFFA, respectively. When 
the processor senses a negative-going pulse on these pins of at least 20uS 
in duration, the processor will jump to the respective vector locations 
(the software portion of the interrupt, also called an &quot;interrupt 
handler&quot;):



FFFA		;===============================	
FFFA		; - Power-on Vectors				
FFFA            ;				
FFFA A9 FE	.dw NMI				;$FEA9
FFFC 22 FD	.dw RESET			;$FD22
FFFE 72 FF	.dw IRQ				;$FF72

	Both the IRQ* and NMI* lines are available at the expansion connector
at the back of the VIC. They are also connected to the IRQ* output lines on
the VIC's two 6522 VIA chips (just like the 64); the IRQ* is connected to 
VIA2 and the NMI* to VIA1.

	Hardware interrupts on the VIC-20 may be triggered by any one of 
several events which is recognized by either one of the VIC's two VIA 
chips, or by an external event which triggers the IRQ* or NMI* pins on the 
VIC's expansion connector. The software IRQ routine (at $FF72) is also 
entered by the execution of the BRK processor instruction.

	The VIA chips are capable of generating a hardware interrupt based 
on the events as outlined in register $911D, as described in the section 
titled &quot;VIA Registers Used in Following Code.&quot; In general, interrupt events 
result from the VIA's internal timers reaching 0 and active transitions in 
the logic level of the CA1/CB1/CA2/CB2 handshaking pins. 

	Some of the timers and handshaking pins are programmed or connected 
to hardware within the VIC. For example, timer 1 on VIA2 is initialized to 
provide a periodic interrupt every 0.015 seconds, or an approximate rate of 
65 Hz. This interrupt is used to update the time-of-day clock and to 
provide timing pulses for cassette tape operations. This timer sharing is 
the main reason behind the jiffy clock losing time during tape operations. 
Similarly, the processor NMI* line is triggered by the IRQ* output on VIA1. 

	In summary, by default, the interrupt handler code is executed as a 
result of the following:

	For the IRQ code: the 60Hz periodic interrupt from Timer 1 on VIA2 
	and the processor BRK instruction.

	For the NMI code: pressing of the RESTORE or Run/Stop-RESTORE key 
	combinations and RS232 operations.

	The IRQ and NMI software routines could also be triggered if the 
programmer makes use of some of the other VIA pins for a home-brewed 
project. For example, if a home-brew alarm system is configured to trigger 
the CA2 pin when there is motion in the back yard. The user's program could
be set up to watch for an interrupt generated by the CA2 pin, to sound a
siren.

VIA Registers Used in the Following Code
========================================

	The 6522 VIA has 16 byte-wide registers which control the 
functioning of the chip or enable the receipt or transmission of data on 
the I/O pins. For the sake of space, we'll only discuss the registers 
directly applicable to this issue's code.

	$9111 is the Port A output register, an 8-bit I/O port which 
automatically uses the CA1 and CA2 pins for handshaking. Port A is 
duplicated at $911F, but changes to the register do not affect CA1 and CA2 
(so, no handshaking). In the above code, only BIT7 and BIT6 are relevant. 

	The bitfields are:
	BIT7 	 IEEE ATN out
	BIT6 	 Cassette sense switch
	BIT5 	 Joystick fire button
	BIT4 	 Joystick left
	BIT3 	 Joystick down
	BIT2 	 Joystick up
	BIT1 	 IEEE Serial Data In
	BIT0 	 IEEE Serial Clock In

	$911D is the register (the Interrupt Flag Register, &quot;IFR&quot;) that 
indicates which event triggered the interrupt. BIT3, BIT2, and BIT0 are 
left unprogrammed in the above code, but are shown below for completeness. 
BIT4 manages the RS232 receive function, and BIT1 is connected to the 
RESTORE key.

		  SET BY		CLEARED BY
	BIT7 	 NMI status (set when any of the lower bits are set)
	BIT6 	 Timer 1 time-out	read T1 LW and wrt T1 HW latch
	BIT5 	 Timer 2 time-out	read T2 LW and wrt T1 HW latch
	BIT4 	 CB1 transition		R/W Port B
	BIT3 	 CB2 transition		R/W Port B
	BIT2 	 Completion of 8 shifts	R/W shift register
	BIT1 	 CA1 transition		R/W Port A ($9111 only)
	BIT0 	 CA2 transition		R/W Port A ($9111 only)

	According to the 6522 data sheets, the shift register interrupt is 
an allowed interrupt, but there is a bug in early 6522s that prevented the 
shift register from working properly. In the VIC, the shift registers are 
disabled by default and remain unused in the KERNAL. It is possible for a 
user program to enable the shift registers and use them, but the quality of 
the results would be lacking because of the bug.

	$911E (the Interrupt Enable Register, &quot;IER&quot;) is the register that 
enables or prevents the lower six bits in the IFR from triggering an 
interrupt. Writing a 0 to BIT7 clears the bits in the IER according to 
the bit pattern in the lower six bits. Writing a 1 to BIT7 sets the IER 
according to the bit pattern. For example, if one wanted to enable all of 
the above as sources of interrupts, one would write %11111111 to the IER. 
Disabling all of the above as interrupt sources would be accomplished by 
a write of %01111111 to the IER.

	$9110 is the I/O register for Port B of VIA1. This 8-bit port is 
connected to pins PB0-PB7 of the VIC User Port. When the RS232 interface 
module is connected to the User Port, Port B doubles as the RS232 port, 
with the following bitmap:

	PB7 	 Data Set Ready (DSR) in
	PB6 	 Clear To Send (CTS) in
	PB5 	 [no connection]
	PB4 	 Data Carrier Detect (DCD) in
	PB3 	 Ring Indicator (RI) in
	PB2 	 Data Terminal Ready (DTR) out
	PB1 	 Request To Send (RTS) out
	PB0 	 Receive Data

	CB1 acts as the interrupt source for the NMI receive routine and is 
physically connected (externally) to PB0 so that a received bit of data 
triggers an interrupt. CB2 acts as the RS232 transmit line.

	Register $9114 is an 8-bit register which holds the least-
significant byte of Timer 1's countdown value.
	Registers $9118 and $9119 are the least-significant and most-
significant bytes of Timer 2's countdown value. Together, they provide a 
16-bit countdown capability for use as the baud rate clock.

	Register $911C is called the Peripheral Control Register, the 
&quot;PCR&quot;. The PCR controls how the four handshaking lines (CA1/2 and CB1/2) 
act. On VIA1, CB2 is connected to the RS232 transmit line, and CA2 is 
connected to the cassette tape motor control circuitry. Both CA2 and 
CB2 have eight possible modes that can be manual or automatic, positively 
or negatively triggered, input or output oriented. Input modes set flags 
in the IFR based on programmed transitions. When programmed as outputs, 
CA2/CB2 lines are triggered based on writing to Port B.

NMI Processing
==============
Let's look at the NMI routine first. The NMI is triggered through the 
use of the RESTORE key connected to the CA1 line, the CB1 RS232 receive 
data line, and the expiration of Timer 1 and Timer 2, which manages framing 
for RS232 transmit and receive operations, respectively.
	The NMI code begins with some stub code that enables the redirection 
of the NMI processing if so programmed by a user. The indirect jump at 
$FFEA is similar to chainable interrupt processing on MS-DOS based computer 
systems -- save the old pointer, redirect pointer to your own code, and 
then chain to the system NMI processor. Several other Kernal vectors are 
handled in the same way: IRQ, Break, Open, Close, Load, Save, Set Input, 
Set Output, Input, Output, Get Character, and Clear I/O Channel.

FEA9           ;==============================================
FEA9           ; NMI - NMI transfer entry				
FEA9           ;==============================================
FEA9		NMI
FEA9 78			SEI		; disable interrupts
FEAA 6C 18 03    	JMP (NMIVP)	;$FEAD allows redirection of NMI

	The actual NMI processing code follows the redirect stub. The NMI 
routine is broken into three parts: RESTORE processing, RS232 transmit 
management and RS232 receive management.
            
FEAD           ;==============================================
FEAD           ; LNKNMI - Link to actual NMI code. The first			
FEAD           ;	part manages the R/S-R keys
FEAD           LNKNMI				
FEAD 48          	PHA		; save registers .A
FEAE 8A          	TXA
FEAF 48          	PHA		; .X
FEB0 98          	TYA		
FEB1 48          	PHA		; .Y
FEB2 AD 1D 91    	LDA D1IFR	;check VIA1 interrupt flag register
FEB5 10 48       	BPL WARMEOI	;no flag present, then issue EOI
             
FEB7 2D 1E 91    	AND D1IER	;see if found interrupt is allowed
					; based on IER mask
FEBA AA          	TAX		;save bitmask of enabled and active 
					; interrupts
FEBB 29 02       	AND #%00000010	;VIA1/CA1 RESTORE key?
FEBD F0 1F       	BEQ WARM1	;not RESTORE, so move on to RS232

					;Got here, so NMI must be RESTORE
					; key
FEBF 20 3F FD    	JSR SCNROM	;scan for A000 ROM (covered last
					; issue)
FEC2 D0 03       	BNE LNKNMI1	;no ROM at $A0, so skip ROM NMI 
					; routine
             
FEC4 6C 02 A0    	JMP (A0BASE+2)	;jump to ROM NMI routine
             
FEC7             LNKNMI1		;continue NMI processing.
FEC7 2C 11 91    	BIT D1ORA	;test ATN IN(7)/cass switch (6)
					; bits
FECA 20 34 F7    	JSR IUDTIM	;update TOD clock
FECD 20 E1 FF    	JSR STOP	;check for STOP key Z=1 if STOP
					; pressed
FED0 D0 2D       	BNE WARMEOI	;no stop key, so skip vector 
					; restore, VIC and I/O 
					; initialization. Go EOI.

	We reach the following code block if Run/Stop is pressed along with 
the RESTORE key. The code results in a soft reset: it restores the default 
system vectors, initializes the I/O chips to their default, and initializes 
the screen editor. The routine then jumps into BASIC, bypassing BASIC's 
normal initialization routines, leaving program RAM undisturbed.

FED2             ;==============================================
FED2             ; WARMST - Default USER vector				
FED2             ;	    Also get here from BRK instruction (through IRQ
FED2		 ;	    vector) or RUN/STOP-RESTORE key combination
FED2             WARMST				
FED2 20 52 FD    	JSR IRESTR	;restore default vectors (covered 
					; last issue)
FED5 20 F9 FD    	JSR IOINIT	;initialize I/O (covered last 
					; issue)
FED8 20 18 E5    	JSR CINT1	;initialize screen editor (covered 
					; last issue)
FEDB 6C 02 C0    	JMP (BENTER+2)	;jump to BASIC NMI routine

	If program execution gets here without passing through the WARMST 
code, then the NMI resulted from an RS232 event, such as when the transmit 
or receive timers time-out (signaling that the VIC is done transmitting or 
receiving a character of information). For now, we'll skip the actual RS232 
transmit/receive code; it'll be covered in a later issue.

	Since the Kernal programmers could not reliably use the shift 
registers in the VIAs, it appears that they synthesized a shift register 
in the NMI routine. This emulation enables the RS232 code to work properly. 

	The code continues with the NMI part of the RS232 transmit and 
receive character processing routine:

FEDE             WARM1				
FEDE AD 1E 91    	LDA D1IER	;get IER bitmap
FEE1 09 80       	ORA #%10000000	;set mask for enabling interrupts 
					; according to existing bitmap
FEE3 48          	PHA		;save &quot;enable&quot; bitmap
FEE4 A9 7F       	LDA #%01111111	;mask-disable all interrupts on 
					; VIA1
FEE6 8D 1E 91    	STA D1IER	;go do it

FEE9 8A          	TXA		;restore mask for active interrupts
FEEA 29 40       	AND #%01000000	;IFR bit6 =TIMER1 time-out (RS232
					; clk)
FEEC F0 14       	BEQ WARM2	;T1 done, go to RS232/RX chr
             
FEEE A9 CE       	LDA #%11001110	;set/reset bit5 to xmit char
FEF0 05 B5       	ORA NXTBIT	;RS232 transmit - next bit to send;
FEF2 8D 1C 91    	STA D1PCR	;CB2 manual L/H; CB1 neg trans for
					; IRQ; CA2 manual H; CA1 neg trans
					; for IRQ; CB2=TX, CA2=cass motor
					; control
FEF5 AD 14 91    	LDA D1TM1L	;get VIA1/T1 count low byte
FEF8 68          	PLA		;restore IER bitmap...
FEF9 8D 1E 91    	STA D1IER	; ...and save it
FEFC 20 A3 EF    	JSR SSEND	;send RS232 char
FEFF             
FEFF             WARMEOI				
FEFF 4C 56 FF    	JMP EOI		;end of interrupt

FF02             WARM2			;RS232 receive NMI routine
FF02 8A          	TXA		;restore IFR mask from above
FF03 29 20       	AND #%00100000	;VIA1/T2 time-out (done receiving
					; character from RS232 channel)?
FF05 F0 25       	BEQ WARM3	;yes, so move byte to buffer

					;collect bits...
FF07 AD 10 91    	LDA D1ORB	;get user port bitmap
FF0A 29 01       	AND #%00000001	;bit0=RS232/RX
FF0C 85 A7       	STA INBIT	;save received bit
FF0E AD 18 91    	LDA D1TM2L	;get VIA1/T2L count
FF11 E9 16       	SBC #$16	; subtract 22d
FF13 6D 99 02    	ADC BAUDOF	; add low word of bit transmit time
FF16 8D 18 91    	STA D1TM2L	; save it
FF19 AD 19 91    	LDA D1TM2L+1	;get VIA1/T2H count
FF1C 6D 9A 02    	ADC BAUDOF+1	; add high word of bit xmit time
FF1F 8D 19 91    	STA D1TM2L+1	; save it
FF22 68          	PLA		;restore old IFR bitmap...
FF23 8D 1E 91    	STA D1IER	; ...and save it
FF26 20 36 F0    	JSR SERRX	;signal RS232 receive routine
FF29 4C 56 FF    	JMP EOI		;end of interrupt

FF2C             WARM3			;received new char, so buffer it
FF2C 8A          	TXA			
FF2D 29 10       	AND #%00010000	;CB1 interrupt (RX data bit
					; transition)
FF2F F0 25       	BEQ EOI		;no bit, exit

	One interesting fact about the VIC is that originally it was supposed 
to include a 6551 ACIA (RS-232) communications chip as standard equipment. 
	However, when MOS could not supply an adequate number of working 
chips to support the anticipated VIC production volume, the VIC engineers 
decided to emulate the 6551 in software. The VIC Programmer's Reference 
Guide makes mention of the 6551 registers, but the VIC clearly does not 
contain a 6551. See Cameron Kaiser's Commodore Knowledge Base for more 
details. The URL is http://calvin.ptloma.edu/~spectre/ckb/
	
	The 6551 pseudo-Control Register contains the stop bits, word length,
and baud rate parameters. The pseudo-Command Register contains the parity, 
duplex, and handshaking parameters. The pseudo-Status Register contains a 
result code bitmap. After setting the baud rate divisor, the routine updates 
the number of bits to transmit and exits.
 
FF31 AD 93 02    	LDA M51CTR	;pseudo 6551 control register
FF34 29 0F       	AND #%00001111	;pass the baud rate parameter only
FF36 D0 00       	BNE $+2		;I/O delay
FF38 0A          	ASL A		;shift left
FF39 AA          	TAX		;save shifted baud rate bitmask and
					; use as an index into a data table
					; with the receive timer values
FF3A BD 5A FF    	LDA R232TB-2,X	;index into baud rate divisor table
FF3D 8D 18 91    	STA D1TM2L	; and save the divisor into the VIA
	
FF40 BD 5B FF    	LDA R232TB-1,X	; timer count register
FF43 8D 19 91    	STA D1TM2L+1			

FF46 AD 10 91    	LDA D1ORB	;read RS232 output register
FF49 68          	PLA		;restore IFR bitmap
FF4A 09 20       	ORA #%00100000	;T2 interrupt flag
FF4C 29 EF       	AND #%11101111	;pass T2 int. flag but not CB1
FF4E 8D 1E 91    	STA D1IER	;save new interrupt bitmap
FF51 AE 98 02    	LDX BITNUM	;get total number of bits to TX/RX
FF54 86 A8       	STX BITCI	;save as receiver bit count
FF56             ;				
FF56             ; EOI - End of Interrupt	
FF56             ;				
FF56             EOI				
FF56 68          	PLA		;restore registers
FF57 A8          	TAY			
FF58 68          	PLA			
FF59 AA          	TAX			
FF5A 68          	PLA			
FF5B 40          	RTI		;return from interrupt


IRQ Processing
==============

	The IRQ routine is another very important routine for the VIC, as 
various housekeeping chores are performed during the interrupt. The 
processor BRK instruction also points to the IRQ vector, so there is some 
testing early in the routine to handle the BRK instruction. 

	The entry code is similar to the NMI entry code, and similarly, 
allows function chaining. For example, one could write a small IRQ routine 
to provide keyboard &quot;click&quot; feedback, with the code activated during IRQ 
processing.

FF72             ;==============================================
FF72             ; IRQ - IRQ transfer point
FF72             ;==============================================
FF72             IRQ				
FF72 48          	PHA		; save .A
FF73 8A          	TXA		
FF74 48          	PHA		; save .X
FF75 98          	TYA			
FF76 48          	PHA		; save .Y
FF77 BA          	TSX		; get stack pointer
FF78 BD 04 01    	LDA FBUFFR+4,X	;look in stack for PSW BRK flag
FF7B 29 10       	AND #%00010000	;bit4 of PSW; breakpoint or IRQ?
FF7D F0 03       	BEQ BRKSKIP	;IRQ, branch	
FF7F             
FF7F 6C 16 03    	JMP (BRKVP)	;jump to breakpoint processor,
					; which is the WARMST location.
FF82             BRKSKIP					
FF82 6C 14 03    	JMP (IRQVP)	;jump to normal IRQ routine at 
					; $EABF

	When the code is finished determining if the interrupt was 
triggered by a timer tick interrupt or through a BRK instruction, the IRQ 
code continues at $EABF. If it is a BRK instruction, code execution 
continues at the WARMST location. The rest of the IRQ code calls the clock 
update routine, handles blinking the cursor, tape motor control, and 
scanning the keyboard -- all functions that could be considered &quot;user 
interface&quot; functions.

EABF             ;=====================================================	
EABF             ; IRQVEC - IRQ Vector					
EABF             ;					
EABF             IRQVEC					
EABF 20 EA FF    	JSR UDTIM	;update system clock FFEA=&gt;F734
EAC2 A5 CC       	LDA BLNSW	;cursor enable (0=enable)
EAC4 D0 29       	BNE IRQVEC2	;non-zero, so skip blink code
EAC6             
EAC6 C6 CD       	DEC BLNCT	;decrement blink count
EAC8 D0 25       	BNE IRQVEC2	;not reached 0, so move on to
					; cassette timing stuff
EACA A9 14       	LDA #$14	;reset blink timer to 20d (ms)
EACC 85 CD       	STA BLNCT	;save new count
EACE A4 D3       	LDY CSRIDX	;get cursor column
EAD0 46 CF       	LSR BLNON	;get blink phase into C flag
EAD2 AE 87 02    	LDX CSRCLR	;get color under cursor
EAD5 B1 D1       	LDA (LINPTR),Y	;get character code of current char
EAD7 B0 11       	BCS IRQVEC1	;blink already on, so continue
EAD9             
EAD9 E6 CF       	INC BLNON	;increment blink on flag
EADB 85 CE       	STA GDBLN	;save char under cursor
EADD 20 B2 EA    	JSR CCOLRAM	;get pointer to color RAM
EAE0 B1 F3       	LDA (COLRPT),Y	;get color code for cursor location
EAE2 8D 87 02    	STA CSRCLR	;save it
EAE5 AE 86 02    	LDX CLCODE	;get color under cursor
EAE8 A5 CE       	LDA GDBLN	;get char again
EAEA             
EAEA             IRQVEC1				
EAEA 49 80       	EOR #%10000000	;update cursor with blink phase
EAEC 20 AA EA    	JSR PRNSCR1	;set char and color
EAEF             
EAEF             IRQVEC2		;scan for tape switch pressed
EAEF AD 1F 91    	LDA D1ORAH	;read I/O bitmap
EAF2 29 40       	AND #%01000000	;cassette switch pressed?
EAF4 F0 0B       	BEQ IRQVEC3	;no, turn motor off
EAF6             
EAF6 A0 00       	LDY #$00	;set motor &quot;on&quot;
EAF8 84 C0       	STY CAS1	;clear motor interlock flag
EAFA AD 1C 91    	LDA D1PCR	;get PCR bitmap 
EAFD 09 02       	ORA #%00000010	;set motor control bit to &quot;on&quot;
EAFF D0 09       	BNE IRQVEC4	;go to timer1 test
EB01             
EB01             IRQVEC3		;set motor to &quot;off&quot;
EB01 A5 C0       	LDA CAS1	;get cassette interlock flag
EB03 D0 0D       	BNE IRQVEC5	;is flag 1, then exit-motor is off
EB05             
EB05 AD 1C 91    	LDA D1PCR	;get PCR bitmap
EB08 29 FD       	AND #%11111101	;set motor control bits to &quot;off&quot;
EB0A             
EB0A             IRQVEC4				
EB0A 2C 1E 91    	BIT D1IER	;IER bit7=IERs/c bit6=T1
EB0D 70 03       	BVS IRQVEC5	;is timer 1 still enabled? Yes, 
					; skip update
EB0F             
EB0F 8D 1C 91    	STA D1PCR	;set motor status
EB12             
EB12             IRQVEC5				
EB12 20 1E EB    	JSR ISCNKY	;scan keyboard
EB15 2C 24 91    	BIT D2TM1L	;D2T1 latch LSB bits 7-6

EB18 68          	PLA		;restore registers and return from 
EB19 A8          	TAY		; interrupt
EB1A 68          	PLA			
EB1B AA          	TAX			
EB1C 68          	PLA			
EB1D 40          	RTI			

	
Conclusion
==========

	The VIC's NMI and IRQ routines are important to the smooth operation 
of the VIC, handling a few critical functions that make an impact on 
usability. The NMI handler deals with soft-reset processing and RS232 
communications timing, and the IRQ handler deals with the cursor, the 
keyboard, and cassette deck timing. The division of labor between the two 
routines is a sensible one. The routines are relatively compact, but allow 
expansion through chaining.

	Next time, we'll examine more routines in the VIC's KERNAL, including
some of the routines called from NMI and IRQ. 
.......
....
..
.                                   C=H #18


::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


geoWrite Disassembly Notes
By Todd S. Elliott - Eyethian@juno.com

Introduction
============

As part of an effort to learn GEOS programming and to improve an
application I was working on, I disassembled geoWrite 128, and along the
way, I made several modifications to make it work with modern day GEOS
systems. This article contains the fruits of my efforts and some of the
lessons I learned. The first part of the article describes largely the
territory that comes with GEOS programming. The second part discusses my
particular disassembly procedure, and the last part contains the actual
disassembly notes to geoWrite 128 v2.2.

Background
==========

When GEOS came out in mid-1980's, I tried it and it was cumbersome and slow.
I took an immediate dislike to it and sparingly used it, as if it were a
demo. But, CMD arrived with their powerful peripherals and I began to enjoy
using GEOS. Little did I realize it, GEOS insidously has made me a convert
and a believer in the fact that a c64/128 can do a GUI OS.

But, I was still a user all of this time, and I'll admit that I didn't think
about programming for it and was a little bit intimidated. But, the WWW craze
hit, and there were browsers popping up everywhere. All of a sudden, scarce
GEOS information was made immediately available, including programming
docs. I thought to myself, why not try GEOS programming? All I needed was an
idea. Naively, I thought I would try to create a graphical (mono) browser
that could read in HTML files off a local system, and thought that GEOS 128
was a natural fit. Thus, 'Constellation' was born, nutured and died an
untimely death, like so many of my other projects before and after then, and
they shall remain nameless. :(

First off, I had to use geoProgrammer and it was not an easy package to use
and master, and its manual was the heaviest in the business. Secondly, GEOS
uses an event driven nature of programming and that goes against my beliefs
in programming for the CBM 8-bit machines for years. Third, there were a lot
of system calls at my disposal and I really didn't know how to use them
effectively, or used wrong calls, and Berkeley Softwork's own programming
docs had inaccuracies and incompleteness. Fourth, GEOS 128, while a marvel
and a technological breakthrough, it was too limited, in my view, for a
serious application such as a mono graphical browser.

My main obstacle, as one would strangely call it, to GEOS programming is the
Berkeley Softwork's (BSW) own programming suite, geoProgrammer. One main
feature that set it apart from other assemblers was that it had a linker.
This was a new concept for me and took a while to warm up to the idea. (BTW,
Merlin is the only other assembler that I know of which uses a linker.) Next,
Berkeley Softworks added a host of features, directives, psuedo-ops and even
included a very powerful symbolic debugger in this programming suite. This
made programming for GEOS a complex task and I really had to keep tabs on my
projects and track my GEOS development. This complexity was only exacerbated
by several bugs that made GEOS programming an exactingly task.

But if used correctly, geoProgrammer does a very good job in creating GEOS
programs easily and quickly. Fortunately, Concept, Maurice Randall's integrated
development environment for Wheels, comes to my rescue by fixing most of the
problems plaguing geoProgrammer and boosting productivity in programming for 
GEOS.  Despite Concept's ease of use and its integrated development 
environment, one still has to know geoProgrammer in order to use it 
effectively. This is because Concept has an integrated development environment
in which it acts as a desktop and allows the programmer to select geoWrite,
geoAssembler or geoLinker and work on source code files. Secondly, Concept
does not work in GEOS and is specific to the Wheels upgrade. For more
information, download Concept at:

http://people.delphi.com/arca93/files/concept.wr3

There are other development packages available for GEOS programming, and I
won't go into them as I never have used them but will name them for the sake
of completeness. There was a program called geoCOPE, which was reviewed in
the Transactor and was billed as a simple alternative to geoProgrammer for
novices who desire to learn a little bit about GEOS programming. Then there's
the MegaAssembler, a german GEOS programming suite which is supposedly
powerful and complex as geoProgrammer. I do not know if it is in the public
domain or if it has an English version.

Once I got past the intricacies of geoProgrammer, I was stymied at first by
the event-driven nature underlying GEOS. I was conditioned to create a main
loop checking for user input and do various activities as necessary. The
opposite is used in GEOS. I had to GIVE up control of the application to the
GEOS main loop and let it do its job. That meant I had to set up the icons,
the menus, the screen interface, etc. and do an RTS. The GEOS main loop then
takes over and if an icon was clicked upon, for example, my application
finally takes control again and acts upon the icon click. As I got used to
it, I began to appreciate the event-driven nature of GEOS and how it has made
my job programming for GEOS that much easier.

The event-driven nature of GEOS is backed up by a phalanx of GEOS system
calls, of which most can be accessed by the programmer without the need to
ever use the KERNAL at all. Some system calls can be quite complex and can
basically take over the entire computer or can be very destructive if used
the wrong way. To make matters worse in trying to understand this entirely
new graphical OS, BSW's own programming docs were incomplete and had
inaccuracies. Despite that, both programming docs, the Official GEOS
Programmer's Reference Guide and the Hitchhiker's Guide to GEOS contains a
lot of useful information and when taken together, is truly the 'bible' on
GEOS programming. Anyone wishing to do serious GEOS programming needs both
books.

Still, I managed to overcome these obstacles to GEOS programming and actually
created a user interface for Constellation. But I ran into a serious
limitation of GEOS 128; it had no memory management routines. I required that
Constellation be able to handle HTML files ranging from 254 bytes to 2Mb
monsters with equal aplomb. GEOS 128 has system calls for using REU memory,
but I was not very familiar with using them and there was no way of telling
how GEOS 128 used expansion memory. Secondly, I wasn't too sure on how to
display text and graphics with ease and whatever methods that I looked at, it
simply looked too cumbersome and difficult.

However, there was a 'browser' already in the GEOS environment; users simply
do not view it as that way. It's geoWrite, and it reads and mixes in text and
graphics with ease. Secondly, it is a full-blown BSW application that works
seamlessly with GEOS as opposed to Constellation's often mysterious crashes.
At that point, I decided to scuttle Constellation and open a dissection into
the inner workings of geoWrite 128 and use that knowledge to revive
Constellation. And as a bonus, I would learn a lot more about GEOS
programming far better than what BSW's own docs could provide. Only that it
exactly hasn't turned out that way so far...

As I progressed into disassembling geoWrite 128 v2.1, I came across several
sections of code and said to myself, 'I could change this or that'. There
were code that mostly dealt with file handling, and this stuff was obsolete
by the time high powered GEOS systems came into fruiton. For example, BSW put
in code that merely 'toggled' the data device, and at that time, it was
sensible as two drive systems were possible. But today's GEOS systems can
support up to four drives and this code is an annoyance and limits geoWrite
128's usability in modern day GEOS systems.

So, I disassembled geoWrite 128 with the full intention of porting such GEOS
knowledge to Constellation and wound up improving geoWrite 128 instead.
Here's what I improved so far in geoWrite 128 v2.2:

* Complete four drive support in its file requestors.
* Capable of booting up from any drive (A-D) when a datafile is clicked upon.
  Improved booting up sequence.
* Loads completely into expansion memory in Wheels equipped systems. In this
  case, geoWrite 128 no longer needs to access the disk device to retrieve
  its own modules, and simply fetches them from the faster RAM expansion. A
  very useful feature for users who only have 41's, 71's, 81's or FD's. This
  feature does not work in GEOS 128 because there is no reliable way of
  knowing how it manages RAM expansion.
* Semi-intelligent - Does not prompt the user to insert a new disk if
  non-removable media is used.
* Displays the DISK icon when a Native ramdisk is used. Previously, geoWrite
  128 would not display a DISK icon (used to change disks or partitions)
  when a ramdisk is accessed. But native ramdisks have their own
  subdirectories and the DISK icon is activated accordingly.
* Also displays the DISK icon if a ramlink 1581 partition is used.
* The DISK icon is also displayed in the disk device from which geoWrite 128
  was loaded from, because geoWrite 128 is now 100% ram resident.
* Autodetects whether it is running in GEOS 128 v2.0 or Wheels 128 systems.

The rest of this article mainly focuses on how geoWrite 128 v2.2 is
constructed, how to disassemble a GEOS program, and mostly tries to offer
inspiration for others to undertake GEOS programming endeavors. There is so
much that needs to be done and can be done in GEOS. Without further ado...
Onward!

Disassembly For Dummies. :)
===========================

Before we begin with the disassembly notes, let's describe how I conducted
the disassembly of geoWrite 128 v2.1. In fact, a program called geoSourcer
(64/128 versions) was recently released into the public domain while I was
busy disassembling geoWrite 128 v2.1. Since I haven't disassembled seven
other VLIR modules, I plan to use geoSourcer to do the job and will post a
review, tutorial or critique of sorts either here in a future issue of
C=Hacking or on comp.sys.cbm.

First, I personally use the DarkStar suite of disk utilities (ZipCode,
etc.) and use its excellent disk editor. The reason is that I need to 'link'
or 'de-link' the individual VLIR modules from the rest of the program for
later disassembly or reassembly. One must have knowledge of how VLIR files
are structured at this stage of disassembly.

There are two formats under GEOS; the sequential format (not to be confused
with SEQ files) and the VLIR format. The sequential format simply consists of
a file running in a contigious fashion and is loaded in at once. The VLIR
format is similar to CBM REL files in which there are 127 individual records,
and each record can basically be of any length.  VLIR files are broken into
records, or if in program files, 'modules'. With respect to programs and not
datafiles, VLIR #0 will be the main module which is loaded and executed
first in GEOS. In turn, this module will load in other modules in its VLIR
file structure whenever necessary. This allows for much larger GEOS programs
to run and still have room to spare. For example, geoWrite 128 is 35K, and if
it were a sequential file, there would be no room left over for the actual
datafile to coexist. What about geoPublish at 99K? The VLIR file format is
the only way geoPublish can run in GEOS and on the CBM 8-bit platform. In
essence, the VLIR format allows GEOS to use the disk device as virtual
memory device by loading in modules as needed.

geoWrite 128 v2.1 consists of eight VLIR files.  VLIR #0 loads in at $0400,
and contains the main 'meat' of the program, with icons, menus, dialog box
info, etc.  VLIR #1 contains mostly screen setup routines, the geos kernal
ID check, checking the printer driver and other initialization routines.
VLIRs #2 through #4 are unknown at this point, while VLIR #5 contains the
main routines for datafile handling. VLIR #6 is unknown, while VLIRs #7 
and #8 contain the printing code.  VLIRs #1 through #7 all load in at $3244,
and VLIR #8 loads in at $0680.  I focused on VLIR #0 and #5.

To disassemble the VLIRs, I located the record on the disk and created a
separate directory entry pointing to the record as a PRG (non-GEOS) file. I
looked at the first two bytes of the file. They are actual pieces of code,
but outside of GEOS, they are mistaken for as load addresses. I wrote down
these two bytes somewhere so I could later retrieve them. At this point,
I have to know its true load address. Let's say that it's $3244. So I
replaced these first two bytes with the true load address plus two, in a
low/high byte order, as in $46 $32.

I'm done with the disk editor at this point and used a disassembler program.
The disassembler read in the load address -- my user supplied value of $3246 --
and went from there, disassembling that particular VLIR record. I used a
symbolic disassembler modified for LADS 128 by James Mudgett and it works in
128 mode. Theoretically, I could supply a symbol file containing GEOS equates
and it will produce some GEOS compliant source code. I haven't done this yet.
Next, I used the Make-ASCII program by the authors of EBUD to convert the PRG
disassembly to a SEQ petascii file.

I used EBUD to modify the source code file, add GEOS equates, fix some minor
addressing problems in the ML code, add comments, etc. In short, I
followed the program flow and logic and adding comments here and there,
fixing up stuff, etc. This is the true guts and grits of disassembling and
takes up quite a bit of time, reference to documentation, etc. At times,
this process was enlightening and at times, it was quite dull and boring.
(Ever try to translate codes into ASCII text that GEOS uses?)

My best friend during this disassembly process was dialog boxes, menus,
icons and prompts. Why? They shed light on the calling routines. Some
routines were so obscure at an initial glance that I couldn't figure them out.
But when it called a dialog box, presto! I understood now what the routine
was trying to do in the first place. This disassembly process goes on and on.
Maurice Randall also was very patient in answering my email correspondence
as I progressed through the disassembly. In case if I haven't said it, I'm
saying it now... THANKS! :)

Anyway, the reason why I decided to use non-GEOS tools is because I wanted to
produce an exact copy of the original code from my disassembled code. I
couldn't do that with geoProgrammer as it doesn't always produce an exact
copy. Maurice has fixed many problems in geoProgrammer with the release of
Concept and can be downloaded from his website. I've been using Concept to
assemble the patcher program that patches a user's copy of geoWrite 128 v2.1
and have full confidence in that programming package.

Upon assembling the source code, I ran a compare of the resulting code
against the original PRG file that I extracted earlier in a disk editor. I
used my Action Replay v6 ML monitor to do the comparisons. If the files did
not match, then I went back into the disassembly and figured out why, etc.,
and fixed them. Once I did have a match, then I knew my disassembly was
perfect and that I could add any changes to it I wanted, etc., and is what
I've done with geoWrite 128 v2.2.

Having a perfect copy of the VLIR #5 to work with, I went back into my disk
editor to patch it back into the VLIR application on a 5 1/4 disk. I did this
by modifying the VLIR table as to include that PRG file as a VLIR record and
remove the directory entry pointing to it as a PRG file. Remember the
modified load address of $3246? I removed it and added the original two
bytes of code, so the GEOS application would run fine within the GEOS 
environment.

As for serialization and the GEOS Kernal ID check, I don't want to get into
this area, but suffice it to say that I used the Action Replay v6 ML
monitor to remove these. You may have to remove these if the code you want to
disassemble is somehow blocked by serialization or serial number checks. This
is also an another reason why I decided to use non-GEOS tools. GEOS can't
remove the serialization by itself, obviously, and Action Replay v6 does not
run in 128 mode and may crash the computer when running in 64 mode running
GEOS. The GEOS Kernal ID check is a form of copy protection and is used often
by major BSW applications.

This is largely the process I've been using to patch geoWrite 128 v2.1 to a
v2.2 by modifying VLIR #0 and #5. I haven't touched other modules yet and
there are 7 more modules to go. :(  Hopefully I haven't missed anything and
that it has been helpful and instructive. I plan to finish disassembly of
geoWrite 128 v2.1 and will certainly post more disassembly notes in the
future, either in C=Hacking or wherever appropriate.

Disassembly Nota Bene
=====================
The rest of the article will mainly focus on routines that I've either
disassembled or revamped in the geoWrite 128 v2.2 upgrade. The labels as
used are largely from BSW itself, in the Official GEOS Programmer's Reference
Guide and the Hitchhiker's Guide to GEOS. The format for the article is as
follows:

* The routine name is displayed, along with its actual address and VLIR
  module number and then the category it is under. For illustration of the
  admittedly unorthodox addressing scheme, let's give an example: $3a41x5.
  The $3a41 is the actual address, and the x5 is the VLIR module number of
  where it is located. (VLIR modules #0 through 8)
* A brief description of the routine follows in the function field.
* Parameters, if any, are described.
* Variables or routines that the routine will use are listed.
* Listing of any variables or flags that are set or accessed when the routine
  is done.
* Posting of any psuedo-registers or registers that are used by the routine
  and not preserved.
* The description of the routine, with a sequence of events or branches.
* Finishes up with any proposed modifications that would be suitable for
  future work.

The disassembly comments pertaining to VLIR #5 of geoWrite 128 are only
applicable to the v2.2 version as patched, and not its original v2.1 version.
Traces of the original v2.1 version still remain, notably the lbxxxx labels
throughout the disassembly. The numbers following the 'lb' refers to the
actual locations in the v2.1 version. Any absolute addresses that do not
contain a VLIR number is presumed to be addresses for VLIR #0. Also, this is
not 100% complete, there are still several gaps of which I have not been able
to figure out and they are duly noted, or have been guesstimated as such.

The patcher program is now available and is being marketed by yours truly,
a multinational corporation. :) Ok, so I'm no corporation nor paper tiger,
but email me for more details at eyethian@juno.com about acquiring the
patcher program.

There is a geos programming emailing list maintained at cbm.videocam.net.au.
One need not join, but can read past archives covering various topics of geos
programming. The URL for the geoProgramming:The Millennium (GTM) emailing
list is: http://cbm.videocam.net.au/gtm/

That all said, there are plenty of GEOS programs, especially those BSW
applications, that are ripe for disassembly for further exploration and
knowledge of GEOS programming. As a bonus, these programs really do need
modifications as to make them work all but seamlessly on modern day GEOS
systems with hulking CMD power.

I hope that the following disassembly notes will be instructive to people
wishing to get into GEOS programming or to upgrade other existing BSW
applications. At any rate, enjoy.

setProgDevice &amp;		- $0daax0 -		Disk Routines
setDataDevice		- $0daex0 -

Function:	Sets the disk device from which the application was loaded
from. Sets the disk device for which the datafile activities take place.

Parameters:	None.

Uses:		progDrive
		dataDrive
		toggleZP
		SetDevice

Returns:	None.

Destroys:	.A

Description:	Depending on the entry point, it checks either progDrive or
dataDrive and issues a SetDevice call to change the active disk device.

Proposal:	This needs to be overhauled, as the disk device driven model
is obsolete in modern day GEOS systems. This needs to be changed to a
directory driven model, where directories rule and not the disk device. Users
can change directories, subdirectories, partitions, etc. and the program
needs to keep track of all of this activity and the current routines fall
short.

VLIROps			- $0dddx0 -		Disk Routines

Function:	Loads in geoWrite 128's own individual VLIR modules.

Parameters:	.A containing the VLIR number for the geoWrite 128 module to
                load.

Uses:		PVLIROps
                CVLIRNum - Current geoWrite 128 VLIR module in memory
		setProgDevice
		RVLIRB2F - restores a geoWrite VLIR module from BackRAM
                $3172 - Address location of which starting tracks and sectors
                for the nine individual VLIR modules can be found and is used
                as an index.
		$2798 - ReadFile
		SVLIRF2B - saves a geoWrite VLIR module to BackRAM
                GotoFirstMenu
		lb29dc - Error message
		lb233a - Canned DB to display error message

Returns:	None.

Destroys:	r1, r2, r7, r10, .A, .X and .Y.

Description:	First, it loads r7 with $3244 for the loading address for the
VLIR modules. Next, it copies r7 into r10 for the error handler. Next, it
checks the value passed in .A against CVLIRNum and if they match, then the
VLIR module in question is already in memory and there is no need to load it
in from the disk device, and it simply RTS's without any further action.

If the numbers do not match, then CVLIRNum will take on the number passed in
.A and opens the disk device housing the application through setProgDevice.
Next, it calls RVLIRB2F, and sees if a copy of the VLIR module is already
located in BackRAM. If so, the routine simply restores the VLIR module by
fetching it from BackRAM, and doesn't need to access the disk device at all.

If the VLIR module is not located in BackRAM, it then checks the index
located at $3172 and retrieves the starting track and sector of the VLIR
module and issues a ReadFile to load in the VLIR module. The maximum VLIR
module size is only 4,000 bytes. Then it calls SVLIRF2B, to determine if the
newly loaded in VLIR module should also be saved to BackRAM. If there is an
error, a DB is generated and the VLIR module in question tries to get
accessed again.

Note: There is an alternative entry point, PVLIROps, which is for the VLIR
#8, the printing code. The reason is that this module loads in at $0680 as
opposed to $3244 for VLIR modules #1 through 7. The entry point is located at
address $0de5, or just eight bytes beyond VLIROps, and requires passing r7
the $0680 address.

Proposal:	This routine can be modified as to allow retrieval of VLIR
modules from expansion ram in Wheels or MP3 operating systems. Already
implemented in the patcher program for Wheels users.

StashGW128			- $2bdbx0 -		Setup

Function:	Stashes all eight VLIR modules of geoWrite 128 v2.2 into
expansion memory, and enables the ram-based VLIR code.

Parameters:	a7L (Wheels flag) and $d4 (LoadOptFlag)

Uses:		RAMOps - Core ram-based VLIR code
                setProgDevice
		obtainRec - loads in an individual VLIR module from disk
                $3172 - Address location of which starting tracks and sectors
                for the nine individual VLIR modules can be found and is used
                as an index.
		$2798 - ReadFile
		standard - loads r7 with $3244
                deviate - loads r7 with $0680
		checkDisk
		i_MoveData
		VLIRAMOps - Replacement routine for the following routine:
		VLIROps - the routine being replaced by the previous routine.
                CVLIRNum - Current geoWrite 128 VLIR module in memory
		toggleZP
		DoRAMOp
                EnterDeskTop
		lb29dc - Error message
		lb233a - Canned DB to display error message

Returns:	None.

Destroys:	r0, r1, r2, r3L, r7, r15L, .A, .X and .Y.

Description:	First, it checks a7L and determines if it is running under a
GEOS 128 or Wheels 128 system. If it is GEOS 128, then the routine simply
jumps to $3244 of geoWrite's VLIR #1 and goes from there. Secondly, it checks
LoadOptFlag to determine if the datafile was passed through the printer icon
for printing. If that is the case, then the routine would jump to $3244 of
geoWrite's VLIR #1. In either event, no RAM activities take place.

If the routine gets past the checks, then it stashes VLIR #1 into expansion 
memory because it is already sitting there in FrontRAM memory. Next, it calls
setProgDevice and proceeds to stash VLIRs #2 through 7 into expansion memory.
Lastly, it stashes the memory region from $0680 to $0b80 into expansion
memory. Then it loads in VLIR #8, the printing code, into that region
beginning at $0680. Next, it performs a SWAP of memory located at $0680 and
that in expansion memory, putting the printing code into expansion memory and
restoring the original code located at $0680.

Next, it fetches VLIR #5 from expansion memory and modifies the checkDisk
code as to allow the DISK icon to be placed in the file requestor, even if it
is displaying the disk device from which geoWrite 128 originally loaded from.
Next, once the code is modified, VLIR #5 is stashed into expansion memory.

Lastly, VLIR #1 is fetched from expansion memory. Next, it replaces the code
as found in VLIROps with the ram-based VLIR code located at VLIRAMOps.
Finally, it jumps to $3244 in geoWrite's VLIR #1.

Proposal:	None. Code may change to support ram expansion capabilities
of MP3 128 systems.

VLIRAMOps		- $0dddx0 -		RAM Routines

Function:	Loads in geoWrite 128's own individual VLIR modules via
expansion RAM.

Parameters:	.A containing the VLIR number for the geoWrite 128 module to
                load.

Uses:		PVLIROps
                RAMOps
                CVLIRNum - Current geoWrite 128 VLIR module in memory
		toggleZP
		DoRAMOp
		lb29dc - Error message
		lb233a - Canned DB to display error message
		EnterDeskTop

Returns:	None.

Destroys:	r0, r1, r2, r3L, r7, .A, .X and .Y.

Description:	First, it loads r7 with $3244 for the loading address for the
VLIR modules. Next, it checks the value passed in .A against CVLIRNum and if
they match, then the VLIR module in question is already in memory and there
is no need to load it in from RAM expansion, and it simply RTS's without any
further action.

If the numbers do not match, then CVLIRNum will take on the number passed in
.A and checks to see if it is VLIR #8, the printing module. If that is the
case, then only 1,280 bytes gets fetched from expansion memory. Otherwise,
it's 4,000 bytes. Next, it calculates the RAM expansion address offset of
which the correct VLIR module can be found.

Lastly, when all registers are prepped, DoRAMOp does the job of fetching the
VLIR module into the correct memory location. If there is an error, a DB is
generated and the application aborts to deskTop.

Note: There is an alternative entry point, PVLIROps, which is for the VLIR
#8, the printing code. The reason is that this module loads in at $0680 as
opposed to $3244 for VLIR modules #1 through 7. The entry point is located at
address $0de5, or just eight bytes beyond VLIRAMOps, and requires passing r7
the $0680 address.

Proposal:	This routine replaces the disk-based VLIR routines as found
in geoWrite 128 v2.1. This routine may need to be changed to support the MP3
128 platform.

checkDrives			- $2b0dx0 -		Disk Routines

Function:	Checks available drives on a user's system.

Parameters:	r0L via deskTop with LoadOptFlag
		r2 via deskTop pointing to diskname of the disk containing
                the datafile.
		r3 via deskTop pointing to datafile's filename.

Uses:		DrACurDkNm
		DrBCurDkNm
		DrCCurDkNm
		DrDCurDkNm
		setDataDevice
		setProgDevice
		$27b0 - FindFile
		curDrive
		numDrives
		toggleZP
		prepDlgBox
		enterDeskTop

Returns:	progDrive - The drive geoWrite was loaded from.
		dataDrive - The disk device that houses the datafile.

Destroys:	r6, .A, .X and .Y

Description:	First, it checks curDrive and stores the value there into
progDrive. Next, it stores the same value into dataDrive. It checks then the
LoadOptFlag to determine if a datafile was clicked on. If so, it checks the
name of disk A and compares it against the name of the disk that has the
datafile. If there is a match, then the datafile is on drive A or C. Next, a
value of eight is stored into dataDrive.

If they are different, then the routine checks for additional drives. If
there are no additional drives, then a dialog box is fetched, warning the
user that a datafile and geoWrite must be on the same disk on single drive
systems. After that dialog box is over, geoWrite quits to deskTop. If there
is an additional drive, then geoWrite will put a value of nine into
dataDrive.

Proposal:	This code can be modified to search drives A-D in sequence.
This way, a user can click on a datafile anywhere in his/her system and
geoWrite 128 can boot up correctly. Secondly, it should use FindFile to
nearly pinpoint the proper disk containing the datafile because disknames
can be identical. Already implemented in the patcher program.

checkVer			- $2b75x0 -		Misc. Routines

Function:	Checks the current GEOS version.

Parameters:	None.

Uses:		Version
		c128Flag
		DoDlgBox
		enterDesktop

Returns:	None.

Destroys:	r0 and .A

Description:	First checks to see if it is running in GEOS v2.0 or higher
systems. Next, it checks to see if it is running on the 128 version of GEOS.
If both conditions are not met, then a dialog box is printed to that effect
and geoWrite 128 aborts to deskTop. Otherwise, the routine RTS's w/o further
action.

Proposal:	The routine can be modified to check for Wheels or MP3
systems and designate a variable for later routines to rely upon. Already
implemented in the patcher program, where it designates a7L as the Wheels
flag.

toggleZP			- $251bx0 -		Housekeeping

Function:	Toggles the state of all zp variables, thereby preserving two
zp spaces, one for the actual application usage and the other for stock
GEOS/Kernal usage.

Parameters:	None.

Uses:		None.

Returns:	None.

Destroys:	None. All registers are preserved via the stack.

Description:	It's a toggle routine. When called, it performs a swap of
zero page space located at $80 to $fb towards a buffer located in $2e22, and
the buffer contents are similarly swapped back. This way, geoWrite 128 can
use that zp region freely, and swap it out whenever calling GEOS Kernal
routines that rely on this area, and when these routines are done, the toggle
routine is called again to swap back in those values for use in the
application. This is the most heavily used routine in geoWrite 128.

Proposal:	While this routine is nice as it allows the application more
zp space, this is unnecessary routine and should be eliminated. It slows down
the application somewhat, as this must be called twice whenever a GEOS Kernal
call is used.

prepDlgBox			- $2314x0 -		Dialog Boxes

Function:	Preps the pointers for the actual DoDlgBox function call.

Parameters:	.A has low byte and .Y has high byte pointing to the dialog
box text.

Uses:           DoDlgBox
                $2538 - Does something to the VDC

Returns:	Carry flag is set.

Destroys:	r5, r14, .A, .X and .Y

Description:	The routine uses a `canned' dialog box with preset icons,
placement and size. The only thing that is controllable is the text. The
pointer passed on in .A and .Y registers points to the text. Commonly used to
create error dialog boxes with an OK icon.

Proposal:	None.

layoutScreen			- $32cex1 -		Appearance

Function:	Draws up the main menu bar and the overall screen layout for
geoWrite 128.

Parameters:	None.

Uses:           DoMenu
                i_GraphicsString

Returns:	Carry flag is set.

Destroys:	r0, .A

Description:	The routine draws the screen layout using various
GraphicsString parameters. Additionally, it builds the main menu bar at the
top, with its table located at $0bbcx0.

Proposal:	This may need changing, especially if new menu items are
added or old ones deleted and maybe the screen layout should be changed or
left as is.

InitGW128			- $3c70x1 -		Startup

Function:	Initializes geoWrite 128 with variables, flags and vectors.

Parameters:	None.

Uses:           toggleZP
                closeRecordFile
                dispBufferOn
                RecoverVector
                checkSerNbr

Returns:	None.

Destroys:	.A

Description:	The routine sets the following locations to zero: $41e4-e5,
$0200, $021a, $2dfa, $db, $de, $e1, and $f7. It also closes geoWrite 128's
own VLIR record, and as well as activates the software mouse as sprite zero.
It sets the dispBufferOn flag as to allow only writes to foreground and sets
the RecoverVector to point at $2199. It sets $f1 to have a value of $c0 and
sets $023a &amp; $023c to have a value of $ff.

Proposal:	This may need changing, when new variables or flags need be
set.

CheckPtrDrv			- $33e7x1 -		Startup

Function:	Checks the status of the printer driver and loads it in, if
necessary.

Parameters:	None.

Uses:           loadPtrDrv
                getDimensions
                setProgDevice
                maxPtrHgt ($2dfb)

Returns:	None.

Destroys:	a9L, .A, .X

Description:	The routine sets the maximum printer height ($02f0) in card
rows to maxPtrHgt. Then it loads in the printer driver, and if there is an
error, no harm is done as the maximum printer height is already established.
But, if a printer driver is successfully loaded in, then a call to
getDimensions will place the maximum printer height in card rows at
maxPtrHgt.

Proposal:	Why not just call getDimensions when the printer driver is
always loaded into memory in GEOS 128 configuration?

InitGW128			- $325cx5 -		Dialog Boxes

Function:	Prints the copyright message and calls the infamous Create,
Open or Quit DB.

Parameters:	None.

Uses:           $1baf - Turns off text cursor.
                DrawStripes
                i_GraphicsString
                printCopyrightMsg
                $2538 - issues a dialog box
                createOpenQuitDB - DB table

Returns:	None.

Destroys:	all registers.

Description:	It turns off the text cursor, draws the striped pattern you
see in the upper right corner of the screen, clears the screen with a default
pattern, prints out the copyright message, and issues the infamous
create/open/quit DB. The routine will then branch to routines that handle
creation of datafiles, opening of datafiles or quitting the application.

Proposal:       None I can think of right now. Maybe abolish this dialog box
in favor of allowing the user to boot geoWrite 128 to a blank screen and have
him/her to select from a menu an appropriate action to undertake.

printCopyrightMsg	- $3375x5 -		Text

Function:	Prints the copyright message.

Parameters:	None, but can only be used once.

Uses:           crflag
                $1f05 - calls system font
                currentMode
                i_GraphicsString
                i_PutString

Returns:	None.

Destroys:	r1, .A and possibly others.

Description:	Sets the crflag as to reflect that the copyright message has
been printed. That's why this routine can only be used once. It calls the
system font, and then uses inline routines to draw and print the copyright
message.

Proposal:	No change. Unless someone patching this copy wants to add
their own message.

createDocRoutine	- $33ddx5 -		Disk Routines

Function:	Creates a new geoWrite v2.1 datafile.

Parameters:	none.

Uses:           queryFilename
		nameBuffer
                $27b0 - FindFile
                lb3f67 - File exists text prompt
                $2314 - issues a DB
                createNewFile
                $de - currently unknown
                $d3 - currently unknown
                currentMode
                TitlePage
                HeaderHeight
                FooterHeight
                FirstPage
                PageHeight
                CPageHeight
                PageWidth
                gPFlag
                $2393 - Something to do with fonts
                SetScrollSprite
                printDataName
                lb404a - creating file error text string
                $233a - issues a DB
                InitGW128

Returns:	None.

Destroys:	r6, .A, .X and possibly others.

Description:	First turns on the icons related to drive activity and then
calls the DB that prompts the user to enter the filename. If the user cancels
or no filename was inputted, the routine then goes back to the main DB in
InitGW128. r6 is then loaded with the inputted filename and the FindFile
function is called. If a file exists on disk, the routine informs the user
with a DB and prompts the user for a new filename. It then calls
createNewFile and sets up variables relating to page length and width,
margins, headers and footers, etc. Next, it sets up the fonts and the
scrolling sprite. Last, it will print the datafile's filename in the upper
right corner of the screen.

Proposal:	One thing could be changed; instead of requiring the user to
make a new filename upon notice that a file already exists, the user could
override it and use the same filename, but get rid of the old one. This could
be a `TEMP' file concept. If a new version of geoWrite is written with a new
version of a datafile, then this routine would need be revamped accordingly.

Setup4DB			- $3449x5 -		Disk Routines

Function:	Preps the dialog boxes with the appropriate drive icons and
the DISK icon.

Parameters:	None.

Uses:           nameBuffer
                setDiskIcon
		checkDisk
                setDataDevice
                readDiskName
                iconLTable
                iconHTable
                driveType
                curDrive
                onLTable
                onHTable
                offLTable
                offHTable

Returns:	None.

Destroys:	r1, r7H, r0, r5, .A, .X &amp; .Y

Description:	First, it delimits the nameBuffer. It then checks for a
ramdisk and application disk in order to turn on/off the DISK icon. It then
reads in the disk name so that it will appear in the requestor DB. Next, it
checks all available drives and activates the drive icons accordingly. Last,
it loads in r5 with nameBuffer.

Proposal:	No change.

fileRequestor			- $34b2x5 -		Dialog Boxes

Function:	Calls up the file requestor box w/ 4 drive support.

Parameters:	None.

Uses:           setup4DB
                permName - (Write Image)
		restoreDBTable
                dBTable - DB table w/ DBGETFILES
                $2538 - Issues a DB
                InitGW128
                curType
                lb3f45 - pointer to text (Insert New Disk)
                $2314 - Issues a DB
                $27ad - OpenDisk
                openServiceRoutine
                dataDrive
                setDataDevice
                toggleZP

Returns:	None.

Destroys:	r7L, r10, r0L, .A, .Y

Description:	When called, the routine first preps the drives via the
setup4DB routine. Since the dBTable would be shared by other requestors, some
modifying code was used. The routine modifies the dBTable w/ restoreDBTable
data. It sets up DBGETFILES to search for only APPL_DATA files containing the 
permanent name string of `Write Image'. Finally, the DB is issued, complete 
w/ 4 drive support.

If the user cancelled, then it aborts back to InitGW128. If the user opened a
file, then openServiceRoutine is run. If the user clicked upon the disk 
selection, it checks to see if non-removable media is present. If it is
removable media, then an another DB is issued to prompt the user to enter the
new disk. Otherwise, it displays the file requestor again w/ new contents of
the newly selected partition. If a drive icon is clicked, it will issue a
setDataDevice command and OpenDisk the new drive and repeats the file
requestor w/ new contents of the newly selected drive.

Proposal:	No change.

openServiceRoutine	- $364dx5 -		Disk Routines

Function:	Opens a geoWrite v2.1 datafile.

Parameters:	None.

Uses:           setDataDevice
                nameBuffer
		InitGW128
                $27b0 - FindFile
                TSDFHdr
                dirEntryBuf
                lb35fc - pointer to DB data (File Write Protected)
                $2538 - Issues a DB
                PageWidth
                CheckDFVer
                lb3f86 - text pointer (version higher than v2.1)
                $2314 - Issues a DB
                convertDataFile
                lb356e - extracts global variables stored in a datafile's file
                header
                $260c - r0 points to filename
                OpenRecordFile
                toggleZP
                AdjPageWidths
                windowBottom
                $d3 - currently unknown
                $de - currently unknown
                SetScrollSprite
                printDataName
                lb403d - text pointer (opening file error)
                $233a - Issues a DB

Returns:	None.

Destroys:	r5, r6, r0L, .A, .X &amp; .Y

Description:	First, it calls setDataDevice, and checks nameBuffer to see
if a filename was selected. If no name is selected, it quits to InitGW128,
otherwise, it will find it by FindFile. It then stores the T/S for the
datafile's fileheader, and checks to see if it is write-protected. Next, it
stores in a max width of 639 into PageWidth. Next, it checks the datafile's
version and if necessary, converts it to a v2.1 format. Next, it gets global
variables stored in the datafile's fileheader and stashes it into zero page.
Last, it finally opens the datafile with OpenRecordFile. It will also read in
geoPublish data and adjust page widths. It stores a $00 in $d3 and $de and as
well as a $c7 (scanline 199) in windowBottom, Last, it will set the scrolling
sprite and prints the datafile's filename on the upper right corner of the
screen.

Proposal:	Changes may be necessary if new formats are to be supported
in addition to regular geoWrite v2.1 datafiles.

checkDisk			- $371bx5 -		Disk Routines

Function:	Checks to see if the data drive is a ramdisk or holds the
application and sets the DISK icon accordingly.

Parameters:	None.

Uses:           a7L
                dataDrive
		progDrive
		driveType
		cableType

Returns:	Carry clear indicating the existence of a ramdisk or that the
application is on that same disk as designated as a data device. Carry set
means that the DISK icon can be placed in a requestor DB.

Destroys:       .A, .Y

Description:	First, it checks to see if the application is on the same
disk as being designated as a data device housing the datafile. If that is
the case, then the DISK icon cannot be placed. Next, it checks the
appropriate driveType entry to check the existence of a ramdisk. If a 41/71
ramdisk is being used, then the carry flag is cleared as to prevent the DISK
icon. If a 81 ramdisk is being used, then it checks the Wheels flag at a7L to
determine if it's a 81 RL ramdisk as shown in cableType. If that is the case,
then the carry flag is set as to allow the DISK icon, otherwise it is cleared
as to prevent the DISK icon because it's just a regular 81 ramdisk. The carry
flag is set if a native ramdisk is being used, as to allow the DISK icon to
appear.

Proposal:	If geoWrite 128 can fully load itself into RAM, then the DISK
icon can be placed in the requestor DB even when the disk device houses both
the application and the datafiles. As it stands, the DISK icon must be
removed because the user might select a different disk, partition or
subdirectory and the application then can't find its own VLIR modules.
Instant crash.

*UPDATE* I have added ram routines and geoWrite 128 is now 100% RAM resident,
and therefore, the DISK icon can be displayed in this case. But there is one
major caveat, among others, in using this approach. The fonts are keyed to
the disk device from which geoWrite 128 was loaded from. If the user changes
the disks or partitions or subdirectories from that same disk device, then
geoWrite 128 would not be able to find the font data and may lead to
unpredictable results. The same goes for Text Scraps and other features that
are tied to the disk device from which geoWrite 128 originally loaded from.
In the future, I would have to work on font routines and other routines as
necessary as to eliminate this dependence on the original disk device.

readDiskName		- $3739x5 -		Disk Routines

Function:	Reads in a disk name housing the current datafile.

Parameters:	None.

Uses:		DrACurDkNm
		DrBCurDkNm
		DrCCurDkNm
		DrDCurDkNm
		diskName
		dataDrive

Returns:	None.

Destroys:	r0, .A, .Y

Description:	Depending on the value of dataDrive, r0 is loaded with the
appropriate current diskname and its contents are transferred to diskName.
This way, the file requestor can display the disk name along with other info.

Proposal:	No change.

recoverFile			- $3781x5 -		Disk Routines

Function:	It recovers a file.

Parameters:	None.

Uses:		GotoFirstMenu
		$dd - some kind of unidentified flag
		i_MoveData
		CNameBuffer
		NameBuffer
		openServiceRoutine
		lb4005 - text pointer (Cannot recover)
		$2314 - Issues a DB

Returns:	None.

Destroys:	.A, .Y

Description:	Calls GotoFirstMenu to close its menu selection, then tries
to recover the file by copying the current filename into the filename buffer
and calling openServiceRoutine. It does check the flag at $dd before
determining whether a file could be recovered. If it can't be recovered, a DB
is issued to that effect.

Proposal:	No change.

RenamFile			- $379bx5 -		Disk Routines

Function:	It renames a file.

Parameters:	None.

Uses:		GotoFirstMenu
		queryFilename
		CNameBuffer
		NameBuffer
		$27b0 - FindFile
		toggleZP
		RenameFile
		printDataName
		SetScrollSprite
		lb40a7 - text pointer (File Exists error)
		$2314 - Issues a DB
		$260c - r0 points to NameBuffer

Returns:	None.

Destroys:	r6, r0, .A, .X, .Y

Description:	First calls GotoFirstMenu before calling queryFilename. The
new name is then put into CNameBuffer and calls the RenameFile routine. Of
course, if a file exists, then the DB pops up, reporting the error. Last, it
prints the new filename onto the upper right corner of the screen and sets
the scrolling sprite.

Proposal:	No change.

queryFilename		- $37dbx5 -		Dialog Boxes

Function:	Prompts the user for a filename for a v2.1 datafile.

Parameters:	.A must pass either a zero or a $12 to turn off/on the drive
icons and the system DISK icon from the DB.

Uses:		renTable
		setup4DB
		NameBuffer
		lb3f45 - text pointer (Insert New Disk)
		$2314 - Issues a DB
		replaceDBTable
		dBTable
		qDBTable - DB table data
		$2538 - Issues a DB
		dataDrive
		setDataDevice
		$27ad - OpenDisk
		curType

Returns:	.A containing the value of r0L.

Destroys:	r0L, .A, .X &amp; .Y

Description:	First, it shuts off/on the drive icons and the DISK icon
before calling setup4DB to prep the DB with appropriate icons. Next, it
modifies the DB table to replace the DBGETFILES with DBGETSTRING, as this DB
table is also shared by the file requestor. If a drive icon was clicked upon,
the drive gets accessed and the DB is reissued with the updated icon data. If
a DISK icon was selected, it will prompt the user to insert a new disk, or
skips that process if it's on non-removable media. Last, upon exiting, it
loads .A with r0L so that the calling routine will know what the user
selected.

Proposal:	No change.

createNewFile		- $3839x5 -		Disk Routines

Function:	Creates a new geoWrite v2.1 datafile.

Parameters:	None.

Uses:		CPageHeight
		NameBuffer
		lb38c4 - (word) Page Height stored in a datafile's fileheader
		dFileHeader
		toggleZP
		SaveFile
		$27b0 - FindFile
		CheckDFVer
		dirEntryBuf
		TSDFHdr
		$260c - r0 points to filename
		OpenRecordFile
		$27a7 - AppendRecord
		$27aa - UpdateRecord
		PointRecord

Returns:	None.

Destroys:	r10L, r9, r6, .A, .X &amp; .Y

Description:	First, it stores the current page height into the global
variables as hidden in the datafile's fileheader. Next, it points the first
two bytes of the datafile's header (dFileHeader) to the filename and calls
SaveFile. Next, it calls FindFile to load in the newly created datafile's
fileheader into memory and preserves its t/s pointers. It also checks its
version identifier. Next, it opens the datafile and creates 127 blank VLIR
records and updates it and then finally points to VLIR #0 for further
handling.

Proposal:	Changes may be necessary to support a newer format or support
other file formats.

convertDataFile		- $393ex5 -		Data Handling

Function:	Converts a datafile to a v2.1 format.

Parameters:	.Y contains $31 or higher to correspond with ascii values of
1 thru 9. .A contains $32 or lower to correspond to ascii values of 2 through
0, i.e., .A is the `2' in `v2.1' and the .Y is the `1' in the `v2.1'.

Uses:		lb3fbf - points to the version string of `v2.x' where x = 1
		or higher
		VerFlag
		convertFileDBTable
		$2538 - Issues a DB
		toggleZP
		sysDBData
		fileHeader
		lb38bd - global variables controlling document
		lb356e - extracts these global variables from the file header
		TSDFHdr
		$27b6 - PutBlock
		$260c - r0 points to filename
		OpenRecordFile
		PointRecord
		lb3978 - modifies a VLIR record of the datafile
		NextRecord
		$279e - Closes the VLIR datafile
		lb3fc1 - text pointer (Converting File Error)
		$233a - Issues a DB

Returns:	.A to indicate error status ($00 = no error)

Destroys:	r4, r1, .A, .X &amp; .Y

Description:	First, it modifies the file header of the datafile as to make
it to show v2.1. Depending on the values passed, it will set VerFlag as to
control further file conversion to a v2.1 format. Next, it issues a DB
informing the user that it's converting the datafile to a v2.1 and asks
permission. Then it modifies the fileheader of the datafile as to incorporate
new global variables. With the fileheader modified, a PutBlock call is
issued.

Finally, it will read in all used VLIR records of the datafile and convert
them to a v2.1 format. Next, it will read in the header and footer VLIR
records and modify them as well. Last, it will then close the datafile.

Proposal:	Changes may be necessary to support a newer format or support
other file formats.

lb3978				- $39f0x5 -		Data Handling

Function:	Converts an individual VLIR record of a datafile to a v2.1
format.

Parameters:	The VLIR record must have been already opened.

Uses:		fileData
		VerFlag
		toggleZP
		ReadRecord
		lb39da - fixes v1.x ruler escapes to conform to the v2.1
		standard
		lb3fbf - the V2.X identifier string where X is accessed
		lb3a09 - fixes the width of a v2.0 page to a v2.1 page
		WriteRecord

Returns:	None.

Destroys:	r2, r7, .A, .X &amp; .Y

Description:	It will first read in a VLIR record of a datafile, and
depending on its original version (set by VerFlag), it will modify ruler
escapes as to make the current record conform to v2.1 specifications. When all
of these modifications are done, the record is written back w/ WriteRecord.

Proposal:	Changes may be necessary to support a newer format or support
other file formats.

lb39da				- $3a52x5 -		Data Handling

Function:	Converts an individual VLIR record of a datafile from a v1.x
to a v2.1 format.

Parameters:	The VLIR record must have been already opened and read w/
ReadRecord.

Uses:		fileData

Returns:	None.

Destroys:	.A &amp; .Y

Description:	It merely moves the first 20 bytes of the first ruler escape
on a VLIR record back by seven bytes and zeroes out some parts of the ruler
escape.

Proposal:	Changes may be necessary to support a newer format or support
other file formats.

lb3a09				- $3a81x5 -		Data Handling

Function:	Converts an individual VLIR record of a datafile from a v2.0
to a v2.1 format.

Parameters:	The VLIR record must have been already opened and read w/
ReadRecord.

Uses:		$d0 - word pointer to last byte of individual VLIR record of
		a datafile
		$25a1 - points r15 to start of fileData
		toggleZP
		$26d7 - compares r15 against $d0
		$25e1 - increments r15
		$25db - increments r15 three times
		$25f7 - skips ruler escapes pointed to by r15

Returns:	None.

Destroys:	r7, r15, r1, .A &amp; .Y

Description:	The v2.0 page has a width of 1.2 to 7.2 inches, and the v2.1
page has a width of 0.2 to 8.2 inches, and this routine searches for every
ruler escape and converts them to a v2.1 format.

Proposal:	Changes may be necessary to support a newer format or support
other file formats.

printDataName		- $3af1x5 -		Appearance

Function:	Prints the datafile's filename in the upper right corner of
the screen.

Parameters:	nameBuffer must have a filename.

Uses:		nameBuffer
		CNameBuffer
		i_MoveData
		$1fba - use system font
		currentMode
		DrawStripes
		PutChar
		PutString
		rightMargin
		GetCharWidth

Returns:	None.

Destroys:	r0, r1, r11, r13L, .A &amp; .Y, r2L is specially preserved.

Description:	It moves the contents at nameBuffer to CNameBuffer and then
calculates the width of the filename, ensuring that it does not exceed its
maximum width. Next, it will print a trailing space, then the filename, and
then a leading space, in that little striped box in the upper right corner
of the screen.

Proposal:	No change.

runDA				- $3bb1x5 -		Desk Accessories

Function:	Allows a DA to be run.

Parameters:	.A passes the index number of the DA in an internal table.

Uses:		GotoFirstMenu
		$d3 - I think this variable holds the current VLIR # of a
		datafile
		lb406f - text pointer (Cannot run DA)
		$2314 - Issues a DB
		$07c5 - Inverts a rectangle and preserves zp space
		$0d61 - Closes the current datafile
		saveTScrap
		$21ba - saves the portion of the screen
		$01 - I/O port
		$d017 - sprite horizontal expand register
		$4c95 - Currently unknown word variable
		setProgDevice
		toggleZP
		GetFile
		$21bf - restores the portion of the screen
		i_MoveData
		lb3ecd - text pointer (Not enough disk space)
		lb4058 - text pointer (Running DA error)
		$233a - Issues a DB
		$22e3 - Sets up the text cursor
		loadTScrap
		$0d6c - reloads the VLIR datafile and points to the last
		accessed record
		$851e - default screen color
		VIDEO_MATRIX
		FillRam
		$2555 - Not sure yet what this routine does
		$1512 - Displays the characters onscreen
		$2575 - The opposite of $2555
		SetScrollSprite
		$1bbb - turns on the text prompt and draws a couple of
		rectangles

Returns:	None.

Destroys:	r6, r15L, r0, r2L, r1, r10L, .A, .X &amp; .Y, and since a DA is
run, pretty much everything else has been hosed, except that geoWrite 128
tries to preserve as much as possible.

Description:	After calling GotoFirstMenu, it checks to see if it's in
header/footer mode and if so, the DA can't be run. Next, it preserves much of
zero page and inverts a rectangle twice onscreen. It then closes the current
VLIR datafile, saves any Text Scraps, sprite data/expansion registers and the
first 24 scanlines of the screen. Finally, it calls and runs the DA. When the
DA is done, geoWrite then will restore sprite data/expansion registers, the
first 24 scan lines of the screen, color and video data and much of the zero
page area. Then it sets up the text cursor, loads in any Text Scrap, and
reloads the VLIR datafile and points to its current VLIR record. Next, it
will begin displaying the contents of the datafile, enable the text cursor
and draws a couple of rectangles, and returns control to MainLoop.

Proposal:	The I/O calls seem redundant for I/O is always banked in and
color data is being restored as well, which is puzzling as geoWrite 128 does
not support color. Other than that, no changes.

saveTScrap				- $3c97x5 -	Disk Routines

Function:	Saves a text scrap.

Parameters:	None.

Uses:		TSFlag
		TSiZe
		lb3dff - load address of text scrap
		lb3e01 - size of text scrap
		setProgDevice
		lb40c1 - pointer to filename (Text  Scrap)
		toggleZP
		DeleteFile
		lb3db8 - pointer to filename for the SaveFile call and also
		doubles as its fileheader
		SaveFile
		
Returns:	TSFlag holds a zero value to indicate that a Text Scrap is
saved, otherwise $ff if something's wrong.

Destroys:	r0, r9, r10L, .A &amp; .X

Description:	It checks TSFlag and TSiZe to determine existence of a text
scrap, and if so, then attempts to save it. It modifies the fileheader for
the text scrap as to include an appropriate load address ($41e4), the ending
address, etc. Next, it saves them to the same disk/partition as where the
geoWrite 128 application resides. It will delete a prior text scrap if one
existed.

Proposal:	The area, $41e4-$4310, seems too small of a buffer for a text
scrap. Maybe this buffer should be enlarged to accommodate large text scraps.
Also, this may need to be changed to accommodate future versions or simply 
accommodate a text album file.

quitGeoWrite		- $3cb1x5 -		Disk Routines

Function:	Quits the geoWrite 128 application and returns to deskTop.

Parameters:	None.

Uses:		SaveTScrap
		setProgDevice
		toggleZP
		EnterDeskTop

Returns:	None.

Destroys:	None; the deskTop now takes control.

Description:	First, it saves the current Text Scrap. Then it returns to
the disk/partition that it was originally booted from, restored zero page
space and then quit, resuming control to the deskTop.

Proposal:	No change.

SetScrollSprite		- $3cbdx5 -		User Interface

Function:	Enables the scrolling sprite that one uses to scroll the
document onscreen, in the little box in the middle top of the screen.

Parameters:	None.

Uses:		$01 - i/o port
		$d02d - Sprite 6 color register
		i_FillRam
		i_MoveData
		lb3c73 - sprite data
		$d01d - expand sprite 6 horizontally

Returns:	None.

Destroys:	.A and $01 is preserved.

Description:	It enables I/O, colors sprite #6 black and expands it
horizontally, and defines its bitmap.

Proposal:	No change. But is the I/O activity redundant because I/O is
mapped in already in a GEOS 128 configuration?

AdjPageWidths		- $3cf6x5 -		Data Handling

Function:	Reads in imprinted geoPublish data and adjusts page widths.

Parameters:	None.

Uses:		gPFlag
		PointRecord
		toggleZP
		ReadRecord
		$2c1d - Page Width High Byte
		$2be0 - Page Width Low Byte
		pageWidth

Returns:	None.

Destroys:	r2, r7, .A, .X &amp; .Y

Description:	It will check VLIR #63 of a geoWrite v2.1 datafile and
determine whether geoPublish has stashed its internal data there. If so, then
gPFlag is set, and geoWrite 128 will read in page widths and compensate page
widths.

Proposal:	Maybe give the user a DB giving an option to remove
geoPublish data or leaving it alone. If a user wants to remove geoPublish
data, then the document would have to be reformatted.

printInfoBox			- $3d4dx5 -		Dialog Boxes

Function:	Prints the copyright message and info box.

Parameters:	None.

Uses:		GotoFirstMenu
		lb3cdf - DB table pointer
		infoBoxText - text pointer to copyright message, etc.
		$2538 - Issues a DB

Returns:	value in r0L.

Destroys:	.A &amp; .X

Description:	It issues a DB stating the copyright message, its authors,
etc.

Proposal:	Maybe add in the patcher info here.

loadTScrap			- $3d5fx5 -		Disk Routines

Function:	Loads in a text scrap.

Parameters:	None.

Uses:		setProgDevice
		lb40c1 - points to filename
		$27b0 - FindFile
		CheckDFVer
		lb40cd - text pointer (text scrap beyond v2.1)
		$2314 - Issues a DB
		$2625 - r4 points to $8000
		$27b3 - GetBlock
		lb40e7 - text pointer (reading Text Scrap error)
		$233a - Issues a DB
		TSiZe
		TSFlag

Returns:	TSiZe and TSFlag will have values reflecting the presence of
a Text Scrap.

Destroys:	r1, r5, r6, .A, .Y &amp; .X

Description:	It will load in a text scrap from the same disk/partition
that geoWrite 128 was launched from. Next, it will check its version, and
then gets info from the first datablock of the text scrap and copies down its
size, sets up the flags as appropriate, where TSiZe and TSFlag will have
non-zero values if a text scrap exists. It doesn't actually load in a text
scrap yet, save for its first datablock.

Proposal:	Changes may be necessary to support a new format or to
support text albums.

CheckDFVer			- $3eb9x5 -		Disk Routines

Function:	Checks a datafile's version against a v2.1 string identifier.

Parameters:	r5 having the direntry of the datafile.

Uses:		toggleZP
		GetFHdrInfo
		fileHeader

Returns:	N and Z flags are set on whether the datafile equals v2.1

Destroys:	r5, r9, .A, .Y &amp; .X

Description:	It simply gets the datafile's fileheader and compares its
version string against the standard, v2.1, and sets flags as appropriate.

Proposal:	No change.
.......
....
..
.                                   C=H #18

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


Masters Class: xFLI Fixing
-------------
	by Russell Reed &lt;rreed@egypt.org&gt;, 
	   Robin Harbron &lt;macbeth@tbaytel.net&gt;,
	   S. Judd &lt;sjudd@ffd2.com&gt;

Last issue we covered the issues involved in NTSC/PAL fixing -- 63 cycles/line
versus 65 cycles/line, total cycles per frame, etc. -- and fixed up some
raster routines in a demo.  One common raster routine that is usually quite
easy to fix is FLI, and in this article we'll cover fixing FLI and IFLI
routines.

This article is more &quot;interactive&quot; than the previous article.  The .zip file
included in this issue contains an FLI picture (debris.panic), an IFLI
picture (underwater-pal and underwater-ntsc), and some FLI display code.
The FLI display code was downloaded from funet; &quot;Underwater World&quot;, by
Katon/Lepsi De/Arise, is an entry from the SymMek99 graphics competition;
I'm not quite sure which competition the Debris picture is from.

Try loading and running one of the pictures, and observe what happens.  That's
typical of a lot, though not all, FLI-type routines.

Background
----------

FLI is discussed in detail in C=Hacking issue #4, among other places.  Briefly,
FLI is a software graphics mode that gives greater flexibiliby in color
selection than standard multicolor mode.  FLI works by changing VIC registers
to load new color information on every scan line.  It uses exactly 
23 cycles/line in PAL mode, and 25 cycles/line on an NTSC machine.  IFLI is
similar, but &quot;interlaces&quot; two FLI pictures, to gain even more apparent
resolution and colors, at the cost of a flickering display.

Full screen FLIs are pretty standard.  They have color data from $4000 to
about $4FE8, graphics data from $6000 to $7F40, and more color data at either
$3C00-$3FE8 or $8000-$83E8.  IFLIs are not nearly so standard; you'll 
generally have to examine a routine to see where the graphics data and
the $D800 color nybbles are stored.  IFLIs can add a further wrinkle over
FLI by updating the $D800 color RAM on every frame, in the vertical borders,
which may require more cycles than an NTSC machine has to spare.

An FLI display routine is really quite straightforward, and looks something
like

	initial delay
loop:	LDA xxxx
	STA $D011
	LDA xxxx
	STA $D018
	INX
	CPX #xx
	BNE :loop

in PAL (this article will focus on fixing PAL code, but going the other way
is of course straightforward).  The STA $D011 forces a badline; the STA $D018
selects a new line of color data.  Sometimes this loop will be unrolled, and
sometimes the initial delay can be very strange.  It is this code that needs
to be either modified or replaced.

Displaying a picture
--------------------

The easiest way to fix a picture is to simply replace the display code.
The FLI picutre &quot;Debris&quot; has the color data at $3C00, which is more common.
Now, since FLI format is pretty standard, if you have some NTSC FLI code,
it'll work on this pic.  Escape the picture by either pressing the
stop/restore combination, or a reset button if you have one.  In the zip
you'll also find &quot;FLIview NTSC&quot;.  Load and run this now, and you'll see the
picture as it's supposed to look (almost -- this code isn't quite perfect;
we'll get it better when we fix the code with the picture).

The next step is to save the picture in a way that can be distributed and
make you famous as an 3li+3 c0de f1x3r.  While the picture is still in memory,
fire up a machine language monitor (most any will do, the FLI data is an an
area rarely used by monitors).  The easiest thing to do is to save memory
from $0801 to $7F40, and compress it using ABCrunch, pucrunch, etc. -- although
there are a lot of unused bytes between the display code at $0810 and the
start of FLI data at $3B00, these get compressed down to just a few bytes.

Another option is to use a linker.  Save memory from $3B00 to $7F40 and name
it something that reminds you it's an FLI pic -- you can load this file with
most any of the FLI viewers out there, and you can load it into most of the
FLI editors.  Copy both &quot;FLIview&quot; and the saved-off FLI data to a work disk.
Then boot up Sledgehammer, available at most FTP sites.  Sledgehammer is a
compacting linker (it actually uses run-length encoding, a.k.a. char-packing).
It takes a number of program and data files and &quot;links&quot; them together into a
single file that you can load and run.  Once Sledgehammer is loaded, run it,
put in your work disk, and press F1 to start.  You'll then see a list of the
files on the disk.  Use the cursor keys to move and the return key to select
&quot;FLIview&quot; and the FLI data.  Then press 'C'.  Sledgehammer then asks if you
need to change load addresses.  You can ignore this for now, so push 'N'.
Next we see a screen asking for three pieces of information.  For the name,
&quot;DEBRIS.SRF&quot; (for self-running FLI) works.  If you listed &quot;FLIview&quot; you saw
that it did an SYS 2064 to start.  2064 is equal to $0810 in hex, so put 0810
for start, and then 37 for the $01 value.  From there Slegehammer takes over,
loading the files and compacting.  Press space when it prompts to save.  Once
it's done, it resets.  You can now load and run &quot;DEBRIS.SRF&quot;, and you should
see the picture.  If not, read back through the article and check your steps
carefully.


Okay, we've successfully made this picture work on NTSC computers, but
this technique won't work in most cases (i.e. stuff besides standalone
pictures).  Next we're going to go back to the picture and see how to change
the PAL code so it works on our computers.


Fixing the PAL code
-------------------

The first thing we need to do before we fix the code is find out where it is
in memory and how to start it.  Also, most demos, self-running pictures, etc.
are compressed, and we can't work with them until they're uncompressed.  How
you approach this depends on whether or not you have a freezer cartridge.

If you don't own a freezer, then fire up a monitor that sits fairly high
in memory, e.g. $C000; we're going to look at the decompression code to see
how to start the FLI code up.  If you list the program, you'll see it does 
a SYS 2061, which is hex $080D.  Start disassembling at $080D.  You'll
notice it sets border and background to black (stores color code 0 in $D020
and $D021), then calls $E544 which clears the screen.  Next we have a loop to
transfer a message to the top screen line - $0400.  Then another loop to
transfer the decompression code from $0858 to $04FF.  Finally, a third loop to
transfer the compressed program to high memory and a jump to $050B.  This is
pretty typical of most decompression code; some may skip the text/message line
and/or transferring the program to high memory.  I usually replace the clear
screen call with three 'NOP' instructions.  You may also want to replace the
store to $0286, which changes the working character color to black.

Now into the decompression code we go.  Start disassembling at $0858.
There will be a few garbage instructions at the start.  Scroll down a page or
so until you see the sequence:

  LDA #$37
  STA $01
  CLI
  JMP $1000

This is where the decompression routine transfers control to the program.  The
instructions may vary a little on other files, but will usually be pretty
similar.  From this, we can tell that the program will start at $1000.  We can
also regain control here after decompression.  Replace JMP $1000 with JMP
$A7AE.  Sometimes an RTS will work, and if you have a cartridge based monitor
you can use a BRK.  Now return to BASIC and type &quot;PRINT 3&quot;.  Some monitors
disturb some floating point work areas; that line will clear this up.  It may
print something other than 3, but if you try it again you'll notice it's back
to normal.  Now run the program.  After the usual depack effects, you'll notice
you have a READY prompt.  Reload the monitor, as the decompression probably
overwrote it.  Note: sometimes you won't be able to get back to BASIC, but
since you know the start address, you can load the program and once it's
running, use a reset button, then load your monitor.

If you have a freezer, then you can simply load and run the picture, and
freeze it after it finishes decompressing.

Enter your monitor again and disassemble at $1000 -- let's study this code to
see what's involved in displaying an FLI picture.  The first thing we want to
look at is down at $1035.  The interrupt vector at $0314 is changed so that
interrupts execute the code at $1043; sometimes the $FFFE vector is used
instead.  Now look at $1043; the part we're interested in is at $1060.  Here
is the main FLI display loop, as described above, that changes the vertical
scroll register ($D011) and the screen display pointer ($D018), the two
registers involved in FLI.  If you add the cycles the instructions use, the
loop takes 23 cycles.  We need to extend it to 25.  The easiest way here is
to add a NOP at $1071.  Change that part to be:

  INX
  CPX #...
  NOP
  BNE $1062
  RTS

Now jump to $1000 to re-run the program.  You'll notice you can see the
picture, but it doesn't quite look right; the problem is in the initial delay,
before the main display loop:

  LDY #xx
  DEY
  BNE *-2

Go back in and change the value at $105C until the picture looks right.  You
can hit stop/restore to exit the picture, then restart your monitor.  Changing
a value like that is a dirty way to fix the picture, but is also usually the
easiest.  (By the way, the value at $105C which works is $0B).

Now save your code off -- it starts at $1000 and ends at $12E0; there's
tables at $1100 and $1200 as you'll notice in the FLI loop -- and crunch it
down.  That's all there is to it.

Now it's your turn, to fix &quot;Underwater&quot;.  This is an IFLI picture, but the
process is not much different than outlined above.  You need to locate
the interrupt routine, and fix up the main display loop and the initial
delay; unlike some IFLIs this one is pretty easy to fix, and you can
always peek at the fixed code if you really need a hint.

Things that can go wrong
------------------------

Load up &quot;debris&quot; again.  This time, instead of adding a NOP to the end of
the loop, add it to the _beginning_ of the loop (move the loop down one byte
and add a NOP), and change the BNE to branch to this NOP.  Now fix up the
initial delay, and -- it doesn't work!  And it doesn't really matter
what value you use in the LDY #xx.  This highlights the fact that FLI
involves somewhat delicate timing; the problem here is that DEY BNE *-2
takes five cycles, which is too &quot;coarse&quot;.  Some NOPs are needed instead,
which means a more involved code rewrite -- and all because the two cycles
were added to the display loop at the beginning instead of the end.

IFLIs bring on problems of their own.  Sometimes the display loop is
unrolled, and looks like

	LDA #xx
	STA $D011
	LDA #xx
	STA $D018
	few cycles delay
	LDA #xx
	STA $D011
	...

Sometimes the loop is only unrolled over eight iterations (to cover a full
character row); sometimes, however, it is unrolled over the entire picture,
taking up thousands of bytes.  Sometimes the background is changed within
the loop (LDA #xx STA $D021) too.  Fortunately, these loops are usually
written using a code generator, as part of the initialization routine.  If
you can locate the generator, you only have to add two cycles in one place.

There are also different ways of generating the interrupt.  While VIC is
often used, the CIAs are also used -- if you set the CIA timer to $42C6
(NTSC -- PAL is $4CC7) it will count exactly one frame.  An IRQ typically
takes a variable number of cycles, since the CPU has to finish executing
the current instruction before the interrupt sequence takes place.  By
reading the low byte of the timer in the interrupt routine, the code can
deduce exactly how many cycles took place since the interrupt, and hence
exactly where it is on the raster line.  Fixing this type of routine 
involves setting the timers correctly, as well as fixing up the display
loop and initial delay.

Conclusion
----------

Nevertheless, with a little bit of thoughtfulness and persistance just
about any routine can be fixed up, and as usual becomes easier with practice.
As an application of the techniques outlined in this article, Robin and Steve
fixed up the graphics entries from the 1999 Mekka Symposium; you can find
them in the Fridge.  And if we can do it, then it must be pretty easy!
So good luck in your fixing endeavors, and see you next time!

::::::::

begin 644 flifix.zip
M4$L#!!0````(`(%&gt;VB9V^2?#&amp;`$``)$!```3`!``1DQ)+79I97=E&lt;BY.5%-#
M+G!R9U58#`#/]W4W01-U-YP/9`!MT&quot;]/PU`0`/#K9AXA&quot;`8C*QA()C!;.D+(
M@/)'5NP#5`Z'1-817$4O2%)#&amp;MR)?0`&lt;&lt;B.!G!PP)A%/%%!D(R2\*^0%P3WU
M&gt;_=R=^\&lt;-:L`+C&gt;\K4TH(J)3G!N1@R[C,M,0ESB#9)63-;X&amp;/X5AGS_RALH]
MU?/48,3://$4^=A0=(Z+95)8+=,*SC,UL&lt;)ASQD-7GD244N26I(7&quot;,_4-X6I
MBC4.Z4P:@NG6.9FAYEV%WR`?3^_'TU_4]?_G)^KZRJ62E%2F&amp;NV:SB\W1UI3
M3&gt;A;K@OW+-O&quot;?&lt;M`&gt;&amp;`9&quot;MN6Q\)MRTBX4_&quot;68PJRDKE(S`2!?'MBAN9/\VS!
M*#N,^:M81^YRIZ6[&amp;9!CMIC&quot;0PJ/*3S%_-Z%/_$-4$L#!!0````(`()&gt;VB:Y
M!&gt;XH=0$```$&quot;```2`!``1DQ)+79I97=E&lt;BY004PN&lt;')G55@,`,_W=3=$$W4W
MG`]D`%71/4O#0!@'\&quot;&gt;-U21%:,5JJ@@1'!1\[2#5ONGFT$%PZ=A%L)_`;L6A
M@^*%Y`-42L3A&amp;8JN#@5'Z2#/6+6&quot;2T4ZB&quot;XN::EW:00]CC_'#^Z.^Y^DA)0=
MN(BO;VX`0`G+?++Q-JHL*N,-FY016(280&lt;:^@DF^S&quot;-0KV1&lt;]HUHWZAU#$O-
M%^#/&lt;*`!J2JT&amp;I&quot;NPF,#,E5X:D&quot;V&quot;L]-ZCB2&amp;243R)PA,ZXTS6FJ\[M6V01A
M8CE&quot;.,LDP@&quot;#%VRQ*4*HN*A5&gt;@[4X!94V[V_L^C[3-,TO2C50K;+&lt;\[+-2]W
MO3SP\M#+8R]/;??*U8M6Q;4&quot;;[WWUQA=UP`+MGL^*!&lt;PP1_%0Z&gt;ZE&amp;3SM-#%
M+2%[0@*^;`O)&quot;Y%]$57@D9`17U)&quot;2D*&quot;OJ2%*$)&amp;?&lt;D(T86,^9(5LBA$\45R
M@-?'N^/%&gt;:U]_&gt;NWR\?'0'X8R([2#/=_URM-ZO-NA^&gt;)!@W0NOPP%B46&amp;W+N
M4^7[ZU)[*4Q!_JUQ)7?2A1]02P,$%`````@`Y#;C)NBB^O*O&amp;@``A3$```P`
M$`!D96)R:7,N&lt;&amp;%N:6-56`P`00A^-RL(?C&gt;&lt;#V0`W9IM;%O7&gt;&lt;&lt;/:9*Z1Z1Y
MW71MDFV%619.)`MI]M:N:^LZVXI.GH4N'_:A]0JCP#XL@H!A^99A&quot;$P+\B9Z
M&lt;2V[HBB2HJX@A)0N-&gt;D.ADCE2J+X84)@U0.C(FM=+]6&lt;%29KRA0YV]MM&gt;.V1
M^S_GDGIQ)!?#OLW'EZ^'YSSG.&lt;_O^3_GVC;)+;W;-OY;O_'%WV2,O:&amp;R2[[U
M2Y]=O_2W=M_7&quot;Y,O9A&gt;E.'.H&lt;IS]Y`=''DRPT0B[=7W=G/RMB3&lt;&amp;;/JWI$C#
M,;C^&quot;WW@2Q'6P(O\-Z3\*&gt;D'ZY4&gt;M_/[;UT8^+L+@W,3P&gt;#=Z[YO.M&gt;,]6?H
MB:VWX6D:5PK7I;MME1&gt;=ZX&lt;J'&lt;X?K#\87*_^\ZO.]?&gt;67W0.O[3&lt;X1S^O/J[
M%VS?ZF%'9L^^5_D3ZO&gt;J\UU;Q;=&gt;M'W71W\.R8&gt;/R$?XH4//^^S/^QQ.^S/\
MDR\?L7GYH&lt;_ZFG\,QI]CK85-LBS[*E:392?B[%:6?2W._C7+3L;9!W?7&quot;V],
MVK[WJ^N3O_:]3ZQ/GOO&gt;X9^J?WCI5PZI1RY]ZM&quot;W&gt;EXYHG9=&gt;F9=??&lt;2VU!_
M&lt;NG3Z[X_.^)]?KWG_.:$=W#]OVG&lt;3UQZ;CW;]LRE3ZS?_?!?UJO?-=YBTG,=
M7^K^UFMO_']]-GSL=[[PQ=_]TN]]^2O_7Y\-UNG+'C%D]HJ184&gt;.&amp;-]C@0AC
M&amp;U&lt;9LQE.YG*Q*P#GK/%)UKA]N]%@N=L;S&amp;4X',QP-!XUC'9VNV'@C:NQP1J-
M*G,Y'#9\6&lt;&gt;W^,ZSP9C_]@;&amp;V4`GE]/IM''C4^P5QAP8M)%C/V5,&lt;G+ZM`WC
M&amp;Q*K-AA&amp;;#1NX^LJ1G2YG)+3V8;/,0`^KQLNUH.KX6&amp;,^R6.&quot;9V2)#'V(\:&lt;
M&gt;+#A=YA.V(RQ\2-)XBX'ITYXXSC$6&amp;YC8Z.!1O,P]JA!9C&gt;H&amp;W-PB4N,/F6&lt;
MT7(:Y_`M7M29&gt;.C&amp;%Q*G?EQF\`,MP\Y8X#SYZPK\Y6*?H:E=HI?321/BXC38
M!F;;8)B:7C?P!I[B+FZ3:&gt;@&amp;N\WL=AMGAA-?8N4P`2^9Z..U&gt;&gt;$=R6Z#EUQL
M(RCVAUW=H+4R=.`VFXUY[62TQ)`9FKYM&amp;![Q&gt;VYC]#5LD.S&lt;QETN&gt;%FLD':7
MHP/STD@V#-`.$[@#/9S,C@L_H&gt;61^[`D,1&amp;&amp;X!C&quot;X7#!)(?E)WIVH&gt;5&lt;8JDV
MF^&amp;0N`/CT*;&gt;;HB)G&quot;ZRJ64.QX9QAKE=3JP(04)=N`,/Z&amp;#'G%R2[&lt;+1U$-B
MA\37-)T80?2FWSAX&amp;\.&amp;PEMM^*C-M=W#1@NR&gt;5V(2X?+9OPJ&quot;UQ&quot;@%-0?!-N
MP).O&amp;8+57..GAA=C?889[3PX:CS+FPL/W*)-#0[9:`/Q7OS8H&amp;D=XFK0'NH*
M]I3WN=TQ;N%`ZZ(E,T$$OJYRM[N&lt;SW.+&quot;/J:EMMD0A^&quot;`T??&gt;MQV:90;AZVA
MM]G0QQ@?&amp;;TNMQTV7)S@&lt;.''57*GPZ(#H\/B-?D704[QPKG`@ZSML?:%&amp;+'Y
M=;P)2GQMC`,/.,]B1&amp;P=UL1;#N'F93TS('$SBI_R-2?G()TXN&lt;V)$][B1#6U
MU7*9RS4N.#E$TUJ&lt;&lt;$*$-SD)FI&gt;]^7+9C(X2)WPMA-T,_)!&lt;^B-NL^*&amp;4($]
M^OSITYPWXXAU_LS;@H7?VKB%\6X)1V?&amp;W'JQZAVW8.$JE[U&lt;P,(;PB&gt;`17&gt;7
M5[@LU\:MU:O1JW*5=G,CP@,;\+P@9BASH[SBK=:JXX:3,[6S=M_+:=Z_R36L
MG&lt;7NNZF+&lt;K0ZKG#3E+7H`[G.*98Y+1APC'`7IBK)]ZOC=44U9&lt;YK=&gt;8VVG@O
M#6$XKKFO=5T[?6.&gt;E\;'O76YL]WLZ*^.QY;[]*XNM[NK2TQH.`:D@8'AWIBN
MZ)G5?/VH&lt;M7D]VM][AYWS'!UBS`RVO(Z'(0.GG)=KLL?R9K\7CGOZ5LSG.4U
MS_$-]#B3X4P?ZD4/PUF/!F4E3QW4]D0BP=DP8S7#]3&quot;#07@06!JN2?NITS?*
M^&gt;6^0R=/WE[SP'&gt;WWGSSV;8WXZ?'N!X&lt;A7&gt;\U&gt;K1H[(L&lt;Q?&amp;S+O[_KKMV36/
M\2P+;.Q&quot;*(&quot;\_@H+T$(&gt;60@%N?'K&lt;!]G@.C3V-&lt;F-@'DY1\11K3GB..FFNQP
MA)W3E4=@(G/#$V,'4P2C/;LHPMK1ITE1@`6#U^5S-HLBDA=N&amp;6=_E-.5S_&amp;1
MX/7'YWZ(&amp;*,X&gt;Y*DOVB2)/''YT)/DM3=).DX/&gt;L2@XOX&amp;@;9H*$VI#TDD=ZL
MPB_&lt;E-WN`4FM&lt;?[GZ/8=D/3!QBV$Z@=/D&quot;1?[BGGN:P(DO@7V,=).D_S:Y&gt;]
MY?SJ1Q&gt;Y4!P.CK$71-)&amp;BZ0-01+33\_'VH@D6CKO?.!E?I&amp;E-G@#LD.+PAMX
MTJU[Z_]&gt;XBV2!`M/DI3F-2`NQ(L32.,MD!B!)!%(Z.2MUZHE`9*=`[:F\'&quot;?
MD!&gt;7&amp;*&lt;.D$I'^449(-FK57T;I+X1P]'+,YERNG0474&quot;2IEV&amp;,7G$OY/WCM#D
M'==`3%&gt;77?&lt;L\U*IQ.I*IWK1?O]N*;;6UVFXKHD9&gt;P:Z'5)W-Q&gt;DN%?+]:-R
M)Y@TW[E!0[D&amp;1&quot;P5\F7*1SJ\I'`WX525-1-&amp;-7'*KXU]?H-I9Q+M(&quot;&lt;SS`FI
M&amp;^52M5J]K$UKO$S(U+0S9\RUL0%`=?+D(0!$Z/'1T5')6X?)U5/SGG+9W??^
MPX&gt;'U\:(K)O/OO[Z3&gt;X&amp;67RT#W/685J]JHSW]GGR90:R7O\X6&gt;RI9#W+ML$2
M(1`&lt;I1#HS1P$%LF3V^-Q[Y*GQA-@P6;/Z`Y8G]\+EB5/00NLK^^`!7U2_)8^
M?09EB^/C7!UJ&lt;;7V^)SX6&quot;2%QAZ!^CP]&lt;\)*XE$51&amp;&amp;@?:AB@JK7B&quot;KH$TD^
M)WUZU*2JL9&gt;JZYZR=UN?_FD??;(15::4+WL&amp;Y-$F5?P`JF),GW?SMC#)5U.?
MN%U4PAO\`Z%/'UCZY`%5\I5=^E1_0I^X?H/T29''Q?:H?+&lt;\[5!%VB,WY2EJ
MASPQ*X\UN+U9M(F!O`K41Q;Z-/I`]NY@E&gt;ESN5PCJ$EV*92)&gt;M7[C644*2XA
M4?T=]OYWKEWKT*%1G(_GH5'JM%V#1GGZ.NV&amp;H\LNP%KM&lt;?2\-&gt;`8MB2(-$KN
MK)F\YO;T+,=6'=W=W0[!UMF&quot;MU#(&gt;P5;EE1598FKLIS/&gt;]PEK[&gt;,_:&quot;X,MM-
M33MC&quot;L'B&amp;8]GW.NMUTUF&lt;H`)R3+;V\TUSZN@Z]#[)TX\?#]#W`0YSX,N5_64
M4(&quot;^+[[__F%+M@SGLU=.BRXD6K)LB=9(1JC;\VTHY)[;(&gt;OL'K+(G3^U(Z1W
MT.('HA4[&amp;&quot;TL=@]:&gt;S6K-W;#L[H6H][;9/F?D*P?-B7KU;UD?:Z7R#IGHZC&lt;
M1[)&gt;%&amp;CI0K)&amp;#RK^2++\?%I(%B*`)&amp;OL2;C^#6Y!#?H&quot;BC^WNT?BD&quot;Q_4[+V
M*_YX3;N&gt;SY&gt;W)&lt;MY0/'':XN&gt;O.&lt;_$79/A:L7&lt;+DSI;]NLR2+,Y*L%ERWA63=
M%G&quot;Y/&lt;MZO7YE?%NRY'TEJU139)*=O97?'L&amp;JDV`IR#)FU$XEI.7P)EMB&gt;X5F
MR4*SIDFSGB'-HE$MT&lt;H8#I&gt;.RBA=DF6&quot;*VAJ&quot;D3K73?BP#GB$J+5W]\OV?OM
MNGN&gt;Z[&amp;U,M%UT7[T,H=HQ3KLUZ[9.RS=6EU=]3A6N25)I%M5Y:IL:J1;;K`W
MX.BQI,MPGO4VA&gt;N&amp;@&amp;L:ZG89S+ACWH+76[&quot;DRW&quot;`K\PPV`(S$M32Z\4Z&gt;WK`
MH&amp;HXM+6Q/Q6B_+XE6L&quot;T:K35.9P&quot;7'Y\XH1%%7O]==OKKU\1DL4MR;I_OR[+
MXU1@`C_&gt;9MLK64^`!5]N&quot;+!&amp;?PE8/-/GYD_3K/SR4\#B_!0?W0:+:D'[+K!(
ML@XW)6O]&quot;&lt;GJC8U&gt;?]QFLRQZDJO/;4O6]?=&amp;+&lt;EB+&lt;GJWB59=GZ1NX/666F#
MK7U_/\TZ(C0KY[XQ$.2@S]_4K/W/5/(/4&amp;!0-_J4'W2FXK5WD'D'+O\2S2*L
M^MSCXSN58'5'L_9BM;);LZ*UCVN6NZ59(A,)T:KO)8OM%BT%16_-!'ZR)5LM
MM'`V$J)5(]&amp;Z8IJ:R9^I&gt;N&gt;MD[P`RW#UN?OZ[F&amp;R&gt;MW2+`E\OKOLYE&quot;S7E?&amp;
M.EEU2!T=$D[47#_M(=6Z.FK'B*?7W$'#U=\\5O5X&gt;GKT79(%5F3M,ASG[C&amp;&lt;
MJ]:YRE7PBBX\(T(&lt;T&amp;GRY7P&gt;]2*8.;OF(;$R7!IR/Y0*]1T.&lt;N-&gt;7&amp;NKJU&quot;J
MF&amp;::4&quot;K,=@O&lt;G#AQ0BA5\^PD&amp;XYJ+]07_7X,K1+1]?RS-IOM=4NM]`PQW%0K
MJC%!E9O;UG:KU3?_]U!Q&quot;ZK,4Z#2R2@4Q`&lt;A-&lt;R#&gt;Y#:T2K&gt;U&quot;KD$Z.]=9MB
M%U,CH]]Y?.X\9T\5JU'^UF-.8L7WKP/]'#N+7C)!Q4_MJU4X=KZ@FI=/W_&quot;@
MOH@*J+Y]D%:9VEUO/J_*W-*J[^QSO!)0J8L]J^YI&gt;5NK2GQ?J!!S[F*IU(2*
M`ZHJH+)N5&amp;P(J#8LJ,K0*OD*9P=J%=T1@GS49*J:V:Y&quot;,+B'*7%VDJ%6JJEH
M6O1J[0FF&gt;@W7CEC)O-T2*^]I;NF8H.I:G^'(N/M(KFI5.F/!*_SYJA=RI??U
M];DR?=1WH+^C7^HGP1)@D6!=Y&lt;\&lt;_8B?AF`9+DNM\CVK'L_J7K7B*/+^V$-J
M93A[UL804F&lt;*9YW.L^.66O4)M:I&gt;EDT9:@6X6*%0&lt;(K[%B!(EDU3'+2&quot;DB3!
M[24O&gt;;=G%7K%'VK:R;4Q`NS]PS=OGGB?;F`$Z0B%@O%H%&lt;3V9J`0'O&gt;/#Q]^
M4^B6T6;3RZ19=+2KR[;[LM`LB)O'[1ZQK8WMKUFM6Z7BF/44NG2Z?]&amp;;P?GZ
M(+JP%9Y\?O@`NA#62&quot;-[#UG^W8&lt;L'*,N!??%*RXD2_[%WS5W=5^ZZ.[%]3'Z
MF(L3WCZEX%7U&lt;N_IH*3N:!;;#R\?,S4&lt;8X,(7)2&quot;=+#+W1)TW7J&quot;+OENWENN
M:4*R&amp;/_&quot;_I*%`%E&lt;[7%/7R:Z8%+G`7&quot;=1EJ\AP1KW04$7$=Q8M@'+E(C4JQF
M(1A]7I#S,&lt;4J'57N6XK%GZ98H$O&lt;XC.UCRM6+R1+J%I3L&gt;1V*-8WYPV+JZYK
MI%;N:QG8P^OCEF!U@-#,LELW++7JEJ3N@8Z.UWBL)5?*5?[@OJ9#KDYU4Y'8
M+&lt;!&quot;B.;S/9[FZ&lt;F2+),*/$_9,_^N!U6B9\V#&gt;$J&lt;&lt;9XY4VBWT&amp;KJ5AW40[?*
MRVXU43B;$,(%*7OX4#MI58(7+UZ,/J`;7YW**&lt;&lt;J,6@X3F(/0-;A-]]\\_#A
M/=)5/5JM]F8RI%U]^-HBRV6[HM_8)5SW6\)5%FBQ_&lt;I!7_,.QO\&quot;K=,?1XNV
M''`A+V/CO&gt;4#I(L'U_[KW&amp;CP(+B@7&lt;''.]K%AM@3=(U(UQ^?DY]6$))V7?=8
M'^]#%XG7U7:3Z.(U0=&gt;IK^Y7$=(]4U7N=GCRHS7%J@B_S7CK7Z.&gt;P,O,0[S:
MFP&gt;M4Y[]\.H1%:%CWBUKVWB-[X_7,+2K7B\U\5)1-.V+%]WVJ\NEEG817OMJ
MUW_5T$G&lt;3D66J#Y-O(YRNL&lt;&amp;O)2_W'/6ZNW%?O0*^:J3?&quot;F3FJ;Q^]7\?,R0
M+.FB&amp;W]]75T9#Q#SCG-HU[2&amp;DY;W78\;0@7Z+.TR'-U2]VLXQS2E2[DZ&gt;O3H
M1P19;&amp;!`ZI`&amp;+/4R'&amp;5/&gt;8]XR0#E(QQ^YHN$7UXP=L9P)J+N;?&amp;BNW^\)FMY
M@.-6SYQ)G!%'K8?RR9,GY9-&quot;O-3IZ&gt;G12?/!@P&gt;341`&amp;N0%A#]?&amp;B+&quot;;-]MN
MWKR9&amp;6.6=C5O_U5[74*[,OA&gt;$/8\$-,]+?&amp;2Y?L@[/[XB%&quot;XY7DA7C*C^SM/
M$;#'/N,UUGY,/19)1!(L,!$P'$/&amp;A^SXA.$*I/#3@ZY)^I=%7)%D5$UV)CNO
M#`U-3.#GTE-^\W^Z['@PV@*&amp;CQE2P.AF+W2^T'GL&gt;.&lt;Q0WH%.&lt;)NYYVLO3.4
MC&quot;1&quot;J50R$L$K-O'1UM)&lt;*(+-#GPXKQIOB%^V?M]YS&amp;KT^T\S.W.__/+LR]ET
M-AJ&gt;&quot;VM+6K::?50Q2XNE&gt;G5I+A914R6]\BA;71@/D).&amp;AH:,OSIPN&quot;/,W@Y[
M^`O'30R1+B2C&amp;&quot;R[E(JDDQAEJ9)*)`U'))12PG,Y6!@.W?WP3N%.L5A\RIB'
M8:(]55K4=76Q%(HFHQFT6`0M$5'BFW$S;E;2,XK5E-RLHBE3RH@:08L.&amp;\Y`
M:G(0L*7\]-@N7@&lt;Z+AJO'CB?1&amp;LPG#P&gt;MEHVFMU&quot;JT8*:&quot;6]6$E7S'A:3!F?
M&quot;&lt;5&quot;FH):4YG*30Y.#DX,^OK]@\P'Q_M9`%/Y[/3HE^P^\:_&gt;$QV#_G9_.S)F
MP/C]IUC0Y7[Y);399&quot;F94!&amp;&gt;V6JNLE);J&lt;TNS=Z;O3&lt;W4TEO+:25^%0D4DSJ
ML:V5XO#F&lt;&amp;)Z&lt;MJ'/&lt;+LSS$_IO&quot;S0;O4+V'&quot;0&lt;.!+XP_V#7C'S%;YPM=72_G
MTO?^XQ_^86SL'\?&amp;8#2&quot;Z1B%@EFIJ81%)%%*TKQHU=32W-(&lt;9E]0M_2B64PG
M-F,+6WIB:X)6'?&quot;#W@!8LPO.L$9_L#/8Z1],#1?F[\QW3$P/'H&lt;E6.B.&quot;:^0
MH]U=_.1+&gt;C%2&amp;&quot;F$4F-:6IF-*VD$X&amp;(J$DG%9[2EK87*8G8AJV0U);:BY&gt;;2
MJ4ATL63&gt;6]R\ERRFT182H?3=]-W)83*#&quot;3,^P22[^(\,LUT7_&gt;W]DGUYS&amp;K8
M&quot;&amp;R%G04&quot;&quot;.4)WP1LV+'G*Q1H=FGJI70V7:C!G)2:2LXH\7A\=CR=+L(&gt;^ILJ
M)2/14#*EAI.I4&quot;(Q%5Y&lt;G)F9RZ8W$=Y+\=343#0&gt;3?]L^N+P1`#F#,(:,&quot;KB
MP2[Y+W;&gt;O7.G7!X;^D=,!3OLDF^&quot;6F&quot;O)5^$)9V2?\('.Q-%K.^E%_F4HL$N
MS+-9V-PL%C&gt;3R6@(L$?4T%(U6W]4&quot;&lt;&gt;%V778#683L6*V],Y0?[]T9=H_.-'O
MHZ$I0\W^O0A&amp;-CP$^R8[@_V(CE2Q5`Q0KI@8WF/&amp;;PB:@?.Q#S^\,X^,D*2%
M!`)#I805K,5B8;.(%@G-A#5L4E1-186/'E468%ET&gt;EK7-.R7?]HW*-P!;W18
M7J8H\0\&gt;3R)(@L&gt;0N0Q'NE@K%LI+&amp;M+&quot;7!@]Q2897]IC#Y!X&lt;0$3+6@+6JZ:
MK=Y)5Q8W]:+ZM2_7A7/B&quot;PO*PL+*&quot;A`M40J+A);B&quot;%NMLK&quot;5+2S$TY'1!#BY
M,DW[@I++Z,0.V`?M&quot;-&gt;19&quot;PV%0M/&amp;8YZS:S5*NGZ(VISX2A:(AP8FA!MCSW'
ML13#82&gt;#D.XJ*S`H6\E6BWI!I99-6VUE95%/J4GU4=8DL`K8KZU,+5,+A[49
M#5GDRC2U4)+^XXUP$L6%7Q([P@91W/GHC.$;%&amp;'4+W6V=P9?5(^-(.THAB,W
M-:6$%&gt;0]A(!)SDC`6K(9UB+&amp;`X$]%G?@T9:PR(Z0K719UN[8:PKGF:58?`GI
M-#M;^'DH')^96VKU&quot;R5&amp;1/,/;J9+&gt;DGW3_M3M5I]Q3?HGXXF(TDIX!^&lt;#$60
M&lt;?T7583#;[]WLI:$/,V.S&quot;;4A02!A&gt;U69W/97!UPAV9H\&amp;I6B,]R-1L0$+,=
MPP,3@Y,T,!7)-`6\,(B@_=@330O7B6E-L11M=GN-M&quot;=Z0M]&gt;8\EJZ60TA0@)
M)\!T-*2&amp;6FNT5C@2+&gt;F;^N9BQ5Q9R&gt;7@[W!II%3&quot;S[*AE&amp;BP)15-I:)P9S@:
MF@F%IVA7&lt;KE9;78685'$CY';,+B0UJVLM@!%B86F`A]^&gt;'?S(S--Z\2:2)3H
M$3F;'GS;KRAS,SL69'GB7J%8+.&amp;*)$-1&lt;452R$DB+XG&lt;9#VKE!A2N)*5)=+R
M16AG&gt;B4^JR@KRE(\!M4HU+9,:BUO)&quot;))]6*POQ]YM6)FJTN1YF&quot;%&quot;.4Z-3D2
M)5^,I)J!@RTLI$MI(%4JU$!+':ZC(4(I^&quot;,2C=07Z@!0W\SE4+_5:L59J&quot;4\
MD2$OS,TL:8WTUM;6K#*+N1ZA5&gt;O9K1SV?B9569K++&lt;0+D]9B4JUG[#E6&amp;XGX
M6XM-BBNEBG&gt;A6&lt;LYI1WGM.R'&quot;U*B(**+BACLM'!.1`P0Q0!158$PY)87%FK`
M&amp;)K[]SILRE7U.#FF;G[MRSAU!OH!4K)4%ZF'?(LH5^$9K+)BUAOCRGA8&quot;4?(
M!46U6-6U'+614*@`&amp;=$7E82&quot;9*ABME`X-Q-!!I^9F9VM9;&gt;VQN.Q6*R4UN.S
ML9^/A&amp;.*%L]EI[;T$@(0&gt;&quot;I+&quot;A4@&amp;%+?K&amp;V:&amp;&quot;R-EA7FJ^1I6E](O+$V7JQG
M9^W6)_LX9[&gt;#FD^6&lt;T+6H#N?Q^?B*QFTSDD?Q-4W./_1A(!S5[5&quot;7IN%W^(S
M5FO%2&quot;QL-7()-;B,6G1K)A5#BZHCA;29K6=CF^EX:BFRF:K$4H54!;,N15+I
M&gt;_%X,0PY&quot;:6*Z7HZGHTK5$@BP95*!6K%`H('X9/;0FV6J\)3\`+JR'2Z:7K+
M/:KE%O7)%:,PO'#A`KA[NZ,#]=(O\X_XC`:U8B82HHSU:&quot;N3S8@P\05$\3=)
MOO'M]0_5&lt;2^[N]QQJUJ,51X!#[0IR,T4_K;\,[&lt;XEXH3M:AP:1?K2Y7%&quot;G2C
MD*W^O)A1%H1S4HMS43A'AX&gt;01+%=J=FP1@,I!&quot;J6F2@5+?&lt;04.%0+)$L+9H5
MS`=04&lt;1J0!N4-&gt;(+S2B*1&quot;U,FBLF5*Q%7[@0&quot;,)!P8ZWX:%`Q]O&quot;1X8#HX,I
MRYO4&gt;;&gt;+++\[K6=(:8RN1&amp;0J1&amp;UP:'+XRO&quot;5MX5[D.%W&gt;8CS=GZ\$X7,%((9
M/X:UXCDVE:LLD964[%+Q&gt;&amp;LR5&lt;RP&amp;6_-GLXHJ:5*([*@%L3[1*R!FF-*3R%C
M#4_&gt;*63-27NP/&lt;@C&quot;,=8&gt;$XK)4M1*T9'*+-%&lt;Y1]D)G@.Y,2(&amp;&amp;;1DY&quot;KH!C
MK$!2FUS1UEOI)(K&quot;_D+@`KSS-OD(_HDOQ)&amp;]TJ%M;U&quot;OG3`2:U)I/)76$[$\
M-!.S_#,5NFO&gt;H5:3R#TH`UH&gt;0AW0'[P8Q/%.-1Q3&amp;$7H.YY%'*5RQ1`M1:LO
M41%2JBFT*X@%$:PA*UU2LL3&lt;25780#HGGA%JRS\/(R9#4\$7U..)1&quot;@13Z^D
M,YG2)J7EG!:&gt;HZ2&amp;.LJ$*X2WB#CR%KC&quot;Y[7*)HB;G&lt;6W(@&lt;MQ04?&amp;!NRL[2)
MY1N.&quot;X'SY\_#1QU4S\%+&quot;_&amp;%D_&amp;O'`]9/5.42TE%X2W#14;2:^&amp;@5$JO(Q&gt;B
M&quot;*]MUBHU&lt;`;90HN;_7&quot;/#\&gt;.EH&gt;&quot;_3BR3X5C&amp;K$FBA_LYH*%63U&quot;H$%LJ!Q,
MBMH=F$'R8\VZ0TA&lt;*J1&amp;J72%BV;H&lt;PAGJ@A0`&amp;MN5FB3L@(X\1V)/L1.C5!9
M&amp;$FH22%BU:PV`ILQP:+X')YZU$@CH\X@'$M%.D&quot;'4)LC4&lt;5IU)PRI6+UAC-U
M_GR`7^`LA*)GFD+).(&gt;JE-G/L?\!4$L#!!0````(`/*&quot;XR8U.FMEEG,``/IS
M```/`!``=6YD97)W871E&lt;BUN='-C55@,`&amp;&gt;-?C=GC7XWG`]D`&quot;VW94&quot;47=&lt;V
M?$XP=`M2TMT=TB%=(IV#TBTES=#H!0+2#4JW=#.$2(,@78/2+=V\W,_W_9A:
M^YR]UHYU!`@#&amp;^,(R.'G%&gt;8#`,&quot;'DW&gt;B5#0&quot;]%6GXQ0C&amp;P`/$5Q^_=XAAY%]
M`0Q-7.9Y#'5&lt;^V7?/7R:N!CCQ1@3P(B&gt;.%`G`2%`L0#FYLT$&gt;/,67G#U%4S+
M`XZX2OL*&gt;_JDO0;R@+3_&quot;_VXFMBG)01'&lt;*E.R-`R@57CE?_O?6S@_X*#B'CL
MKR!:YJ&gt;O3[]+GEYE'?Q@%&amp;T\[--7R%.XB&amp;O[::ZAB9OHB&lt;OCBJ?AP&lt;=CQAW@
M_TO&amp;3&lt;L`MKXIXHK@*KS=X([@WO[.]?3PP%/)QU.E(A&amp;@IU45WOQO,(+;4!W`
M5*Y4CCT$@R&lt;@AQ`P&gt;\2E'7S[$^QR`D(+@..)ME$8$R?'V%_1M___$/O0Q#D9
M'-!#P=?_)H-D'.+OD/K#I5`K1RG-FL[-_0,,:YP]\/^2T.JP&lt;&amp;GVV35&amp;*$/M
M8&gt;'V&gt;*$Y'`KU_+HA^:&lt;*`)\?\&amp;(R^&amp;5N(`7UQ_4&lt;-\R]FEQMMO/:7&amp;V5\_I&lt;
M;?OSQBS[$&quot;X*4&amp;OUIWBR7Q6MP;&amp;X,QLJ3B[FNAW]T5MSZG8E+]0&quot;[/(H&gt;FQ:
M0P/BV*CQV;\&lt;XAX8X&amp;QS:N4NJWR1PS0/LON*.S1QS[@+#VD'\&amp;/(%`N:ME$#
M&amp;NCT37M&quot;?)Y2NWIK9\^$F`)(SIL]$^-\+TT^J]&quot;:XM9K4SVG(E8)#&lt;E&amp;@Y/I
MRY:[9:&quot;'1#\[?IY,8`%8(+R@?U71@*,/VUIN);J.$;PJ!;1(G6@#A-ZZ&amp;$RN
M+88XOIV]X$584C`B&lt;%U,@SCY]?NA9&quot;OWI.-G2U'L`&gt;YU2AQ&lt;&quot;4.V2%MWJLK7
MPXS/-A#N8EH^^.;R*21BML0IS@,;VM)@L0'W&quot;72N9O=%&lt;JHR&quot;2P6NF%OJE;9
MX:]6[I7'7%E1W#7N%U$\E@E#P\@A=ZI.NB%61#W2K0V2W!72N2XF#[Z-_IOT
M:6##%^7;@J?CLR'U^&lt;TB0XI,`($MW5`X53G=4(V5&gt;_^Q8E84^[9[*SI'&gt;L(P
M3S&gt;W.U4U:)B:ZGN_$A&lt;^&amp;N:`^V`4E[;[[W2JA@`26[IA4ZKF_.%H*_&gt;%8^.G
M],KNQ^C&lt;UPG#P=U![E3M(&lt;,75%VOJ+XF))-JP;00UDCWQX@:VX#P&amp;@)0M+$F
MLZ2N82KA7U;JTL&gt;)N+C&lt;ZJ[QU:/;&gt;\M_]_[]2)ENV1ZY7OD?#S57OKGM:4C:
M]%9:Z@&quot;I_YANU1,*'NFT_C$^FD]0&amp;Y&gt;/FV8Q*3.S$=!QKC$SLA&amp;D?BTM6N.B
M+?SMPU;`\#/T*U&amp;07L+WE/J&lt;K$\R.3$RT:$%J=1##M:T)[L=KA2Q6`0=4&gt;-Y
M2S&lt;?QO/:;^+&amp;\_9O@L?S1FY2Q_/N;G&quot;?QTXI1R@'V/$'(O0T$0Z&gt;;GC;`:\!
MEJSM@?#MVJ&quot;;_S3/BH\H@@Z+MS$Z5'&quot;V0QT_:GXL7CT[`AJ4&lt;;9IVP^_*2%%
M6]^!MJUTK10!C)+0U`/ZU'\,HI+A&gt;=@Z@]&lt;8OT#FA:L(BD3:'ZZ!QE*L&quot;HG%
M2`Y&amp;=%G)8*AN^@V3WS/N[KTE%K\DMZX/I4K85R@#&lt;X:#`[)&amp;U1)6,29^AB^]
M&gt;83P5[_]^.RT60&gt;]R%C&gt;9=`)4&gt;']X-O&amp;')MB^&gt;3Y^[]@9LFXI8.WGH4NJJ6&quot;
M4+N7+KV5.4AD=#E#+5.).);%&gt;IM/)FM/-RG*RP=[O;1+AN(#US&gt;9@D&quot;5YR4P
M)&amp;M19&amp;[?3\U&amp;2!3HY3\);N=70S)38:]X3R,20Z1&lt;WVPQ862C*&gt;(&gt;VL`&amp;XYW5
M?NNP/:1#?UO&gt;KB@_PF*$L1U@X5`?'\2'M^@LC]VT$[A1L=U&gt;'5AVJ[AVJZ0:
M9_&lt;:_R#ARQ-8=EV:T./C[&lt;$'2Q3(\@T\=_!^`A^^.&gt;`F-&quot;&gt;:E.;.B)3OW_[P
MVS0\=JQ&gt;:2F=I5?!&amp;H`D'G\1J&lt;=%8R/K]NFV;_VE''H`&quot;?V&amp;I&lt;RFNGA&amp;=6NG
MM2_KGHO&amp;Q')WA&amp;P8+.G;1D4,);_9(Y%\MIMKA.F;PHDBY+UC^K8A?5FJOAY-
M*Q+5\[Y!AT'PP*=.%?T63V,7-X;M_)DA,:B/4+GR):-.(J&gt;^]VL4&amp;Q7LE^]&lt;
M(P:A-T]_ZASF8M*53DF;W,B4/,Y^J\]0,4TB1&quot;?04I#2@&gt;E'1@!(&lt;U&amp;4`DP-
M&lt;F+*S(O57OAC7\:'&lt;NF.;CO6==XNAT%YENVN0C^$WG_&gt;^T^QN-ZNLW&quot;\I-TY
MOG*L+%#I4V&amp;,&lt;UE@2'$H922O$_7!2\H8\(&lt;2U`1C3&quot;)M:S(==[2[HAWI&quot;L/L
M2=!7U)2JE#QZ+T0U4:)ODN,Z))\!8&gt;L_9[&quot;$&gt;X&amp;V^%NV70L7]#HB:(L)(0+*
M&gt;.M3C#X35_1)LN_]S0MW=,+9]A&lt;?\I3ROOF`@_O`I%_G4+F8+1'D*(BZ[K,_
M6[&quot;92^H#;H&gt;QS1]C3KC'[FE@:U$I@JY[7**W:=6*^CYKSQ,V_-6YBB$F&quot;TFC
M9!U:T/$*.V^[+;NIAP0WD&lt;1EJJFOLG]&gt;BF1]C@OO5ZZ.@LQ&gt;\Y*DHYSP,)1?
M&gt;+I:;/EE'^9,TDF)M!%/J^!PE9[ZF^?T&amp;)2V)QJ6CN6*MV`:HK=GQY`YJ#R^
M_&gt;OS2&gt;N[$NB7B&amp;F4PC_/%\3+142FQE;8.A?V4HBIG9&gt;;,F]V1(MD7CQG&gt;97A
M:7B),(KXQHK$5&lt;G^0S[&quot;4N`)9/_:QBC\5Y$&amp;2[&amp;ZLJ36L7(KQSB43YCHX=.Q
MX2W*W23`^.6LF@A,6&amp;+\BGVEJ_K\1#IH#NWC&amp;-'LTGJRO%&lt;IBLJX8HO&lt;&lt;=GC
M8_Y+W1V$L]J;@%&gt;?_,=8(K9U/F-VY'?21]S;$H&lt;3YRM!ER:6&quot;2UF&gt;-*[7SZ#
M:VC:N6#P.(I1$=.I\=+_&quot;46%GM29?L:,#P/C89#?'7\O^(R)&quot;`.#-TY0'?ZS
M&lt;8C9`-K2!YQ&lt;%&amp;K/KT=.+C2T%R(O']8'50C_@?:J'Q;Y4VD`XR/FD.IPC`;N
M6%P2^-.7K(*JYCX&quot;[NKX]^X&gt;20V7HAF4'18T7_L!F)@SJ1VNESHF61[M'`$(
M_)6CV7;\'C4`Y,LV8P,$`(@#M,2,7WH8TO1C7?`*&amp;YD1=']K&amp;LQRLTTEYM;2
M_6U'`U&amp;^;^XC`&lt;,*KHZJA/M0/-/3`P,NAU%1FRQE)Q;X1;K&amp;WZ_J1=@7?B=(
M]+M43O&amp;N&amp;VFH=0=(8?69DYSO44B&amp;)J`3!LK$O=]?#RAO^(/WTN9+YYYA106G
MXZ=/45;R\D;[G`2+69QM/T&lt;6CXZ.&quot;5'M&lt;68W()-_^`_RBYK8W\XO&gt;.&gt;KY_*.
M'RT$P8]4I[[XKB+11R$ZF)@8)=%Q=UC7=_3=&amp;Z![&lt;/N=_$.7]`!/@0?R4_%5
M:'`QLCFM^KCK.,.XQHM=4?IO&gt;^3&lt;4A&gt;OI,&lt;6&lt;&lt;X$U?%Q7CS&quot;#:XM\Y(L/O$X
MC]!1/LVEU,450U146]O.B&gt;OG&gt;H!2@8^2)8F2*&quot;N7J:&quot;SDGJ04I^?4KCWBZTO
M/^]A_)6O3JX@.,'&amp;I!7S?^H8GC$R2YJ&lt;_BA2S/+K%__M943]?9I1/TX;;A-G
MA--MRS`MLGG:3PH**2[Q&quot;110*K-`B_C6\=GGIB].DY&quot;0\B?#-/]4^0O;*R`T
MC30X#(@/)@&quot;QK,'10`#^E4Z@UM')^=7M0\B&quot;V^G%]=UCZ/J_L\N;&gt;T18M04N
M;H&lt;2&lt;FX)T(I'#@5@(S$1(?Q$@]S4#/&gt;/@`;P4D)*1AY@Q&lt;)!K*E04#%VSVBM
MJP*B&quot;HHJ`'M[`&quot;DG)VUWV&gt;O'NSO+N\*:'R_WB`&lt;TYRW6[8^#HI26K/==3C_&lt;
M`?_A;[-FR1GNC9^12UJ&lt;JQWBN7UYNT@U?G]\]2%`BGKY*I@R^D-N]/&gt;C;_?A
MH&quot;Q,:NLL=&quot;EBF9=227?XA5KQ9R&lt;OB23PB]RD&amp;=8$3G$5QN-_*X[GJ=^H'DL^
M&quot;\`OY/G?.&amp;$'5H%6_(#:L522!'[!8_SAB6C#@P%HW:9&lt;T9&gt;&amp;^F?HASD?YL&quot;H
MD-5\E!X$%0#V#&quot;+Q):!CTK8(]W:\*\+?Y;J/@Z[6'+^YB0.^1&amp;M%U[&amp;&gt;&lt;0[1
M/F+L3UTS&lt;O1Y?7GYPO[X2LGRF4&quot;?-Z'X&quot;P1^N'?P9_E6O%]52KW?4&lt;87U#!\
M2Y3YOH^&quot;Q&quot;O#O_GZN4_CC.VJI0,__RYQFDMC/_9_&amp;VDWEOS1_^Y80?_34%@%
M]MW;L`K-L*ION7?F82-RW_2RV.@'I[@:Q2';$C\?QYE245X$-V_&gt;9M&amp;$08CF
M/;J/&quot;:M/E1\9[&quot;;E)R8M/A^+(6*M?*09ZXZW)J[$45=BJ&quot;L)U)7XV4M\:8)M
MW&lt;\G4/5F&quot;9QF&quot;3Q)_,^QD+CX&quot;=%K[+&quot;N^.W9J_T&lt;&gt;C&lt;T_)BF&amp;)'_FOX3^=3T
M2&gt;1CTT&gt;1Z*9HD:BF*)'(IDB1B*8(D;L&gt;'KGW)@2PKD'ZM&amp;WRX711:5&amp;)?B8?
MORNTGF;10:$@#39O-[_(3SEJS&amp;_%G/']^S[\E?N\9!ZVQ//0*Y'TX_Z-A%P-
M^^LJ^&gt;R7ZZ0Z+J&amp;%L'6)+ZZ\&quot;[4B!*Q!VMO2^';2&gt;&quot;72&gt;,[X:N^^AFECA;%B
M(0*P0H\QI2:.5&gt;O%I:&gt;L&gt;&lt;&gt;P_37.G!:BK.O.?6%?8P&lt;&lt;F.;`I1_25IF68OOT
MC&amp;@P+],&lt;6)8BB^\83;!*+STX/&quot;5(AU5?A)Q]=!=+Y?OEA-(-I)ZC43*@JXAR
MIU(107@RF_U\E7?N(5YF&lt;!K.^'8X@82FENZ5,A=^R)[\WSOWB57*&gt;O$?!_@A
MCN^&quot;)CJ)R/*^T[1^YF/'1]&quot;IO3.?8B9I%.^MQ`\11ZRFS*:A^&lt;-7R,%.XX\W
M=H\O,P3&amp;N_]#6S&gt;5;U&lt;5(6MA&gt;AW=+X1/:$-,EFB+CSK&quot;&amp;2,\BUY:/S81%8?6
M!TD?F/^T&quot;X?-LJ&quot;3;&gt;Q1CA(3PUN1(D4]5T['WF[N^((R.*1A(7@[.Y&amp;K#&quot;'H
M*&quot;?KT0U##(B/2.;+7E/'U?ELW\N0%6%M,G2PMD;.REG5EF90&lt;LMO*V4.Q&quot;W/
M/B-Q'8,&gt;@GSYT;U+2AW@_5LR=_!B0O(@TY3H4;.E)?XW3%Z++CR0K81%^]6%
M-4KEM#JS0_IUZ5&gt;D!D&lt;&amp;F6OM$;&lt;S([?'/U(D./+/80NG=.3IZOU?%KI:#]PO
ML2'&lt;'RL+U)4+OK&gt;/(8$[M?J0!NWE4&amp;_TK3F_(`8&amp;$9'8[0,J-[O875H/;*!^
M\&amp;ZL'M-DI`6M&amp;?N__?W&amp;QD--P8NUDO&lt;?/@/;R.][E-[D5U0]CRY=,SYH?PXB
M&gt;HW=(69?8&gt;GXSUT90N`9;-_G?\XZTH(0B9CY]REY21\;%&gt;O!V'&amp;HE2`D;?L1
MJRA51P1-+4T*?HAI[.JEY&lt;&gt;9@:7E=LH8B$]B^VUO9EUFS3MTD+HR&gt;!5TN2IT
M?^N%X%W0.^;'ZJ%@&lt;&quot;9/B.MAR=M$PO.N,_FN9S^FS/&lt;',O2@J2D0TABS@$?_
M*?9X-0&amp;N\2:?L825N,YO_=PJQ&quot;C;ICXO_NW7/TJ'XSIACF`0M&amp;WER@B]C&quot;`#
M2^7O#G_4VK$0&gt;==UH8!/%_7]I&amp;!N4S'S/\9Y:5[&gt;TRRO?^.D(O[!C#XSRQ?7
M\]?[2Y&amp;TN*;M^`0]\$;\(W'Q6_P_L8AHJE/$MO6*Z3O;%9,N[&amp;!7KF]U:&amp;4K
MS[M8:&amp;B-TIS7CW4X!0T&quot;R#\LB\0N!38ZLRVG_UE5JV\P5YPQ/LG8J_P+H2&gt;/
M;#ZN&lt;_SU/2`&amp;0(+RNMINA^&amp;&amp;_4=6]93]3?;V`2SC$KI5*%[!FK&gt;3BM8_%SA]
M[Q%P\R!K.&amp;M&quot;1=2W.0]&lt;[RS2MU2F#9`'V*%,/P&quot;._BS#@2*^S!A1;V8P&gt;?-X
M:*VM2`,Q_@&quot;ZRSW9G[MC?)8]D%$E#^9C&quot;38F&amp;R`I?&gt;/TF%@4]'`O3*(B^_UZ
M)P7$!N[YA.OSO90V-D?`)U=&quot;D^VCP-\':(I*AX!AWMUI8G$.3$TA]NN\UG1/
M8OP+`?U-6&gt;@7&amp;_1[%I8AP%%-1@LYAC.,A^WO/P@&quot;3$/,B@U18.(:\071/N1K
MIP)H2Z&gt;EE7H*YC&quot;.YIAT&amp;W2V*S.^Q?12D)&lt;;OP4+CN&quot;J;A\_JB&quot;CTFI)X?K/
MZ6%&lt;&amp;G]XV`&lt;33&gt;^\X5M9,2MM03'[JR\ZOU2@P8_+AN@PTX6P@NVP&gt;'7UR`6S
M369#97+5`(AO?PF,#-W&gt;$!V$&amp;\QBA$NJ/0&gt;[6VM+1N#Y!4O=&quot;D0.+*FN8&amp;PJ
M&quot;Q]&lt;B=XH#[ECY(F204/H)KL_6LY$SZ#/(F%XNHC#UI4BIFE(L6FXHD4O&amp;$17
MRU(OZU`X/#@\-O;0&gt;;#N0/:&quot;X,44_(-R&gt;28:#-:PM0E1@X8NK!IB2WL'6ZPV
MLM`U0?^E@&quot;I'+(N75M=7+!X`/FS&lt;L@B$4;@15(4,_(%%1&quot;Q:`8)I&quot;+Q0#D19
M&amp;#/],6&lt;:($S2\EIT8_`F1$`^B`2#(@$&lt;V:.?@&gt;RUM$`,E@TJLL_(K!EAI:G&amp;
M`7@PT`G@AF),X;?^#GMW&gt;E3Q:G#&gt;TA:N&quot;/K9&lt;=LN;)$%[(&gt;NN\E7CSW[9@2H
M!=3&lt;-7;&quot;&lt;-37FHLQKL73$T&quot;48&gt;-7PE?JC*&quot;1V!W6N;OA3&lt;('FL!('R=A$5J,
M;O&amp;0&gt;.DPDW$)]W])&amp;*243'#2=*&gt;LMU(U=)+#&amp;$N.ZZB@%__0+(YITN-DTPPM
MH&amp;'^9#J8MY4:_=2#R;'7&lt;)!//Y`5\'/UOV3/EC=B,:!7(6P71+-QUY9V68C5
M0&lt;&lt;@9`P.-.KB0UJ&lt;IA,(DMFN-'N`9(G+OB(&amp;&quot;S:8F2&quot;#*0&gt;1L[E!#.OP@F-^
M)#;^)&quot;].6V1`F]KA/ZUB?J&amp;_O%A5'5M;I^^_IU'_2C2&quot;O_&quot;$$W7&gt;.DI-?-17
MWW^@X,5=MZU'DVR--F0J!_VM$28LUGFLZ6J4ZFP&lt;5CL8IV36S=P=TV_Q:8=A
MV!&quot;G.&amp;L*C#`\Q(&quot;9U[W@/QRO5P=3Q$)?#&gt;.(Q_+&quot;P#2@'K&quot;Q610MZ]Q;&amp;:R\
M6:?'(CY?,K&amp;,M&gt;9'L-(?7L`;$WMMZ`W&quot;P`F*LK9G#7_:&lt;0_IM;4@P#Z`_#+T
MK'WNS0QHEQ+3MO^Z^JM@RW^.FOCBZRFRK0F6F+&gt;GXXDG/2LRH(%YMS(&quot;.F6J
M3_;`%U85*8'KEK\`&amp;H2?J1CEC7$[?E3-W&lt;O)K&gt;/+A&lt;,?MXZ]1FOA095&quot;P$]*
M[9@L&gt;)V&amp;NT\&quot;B@Y&lt;4U'K+PMW%BH&lt;8ZAU$F%X]@PA-'![.S97`8G%Z:-ROQ5_
M4*%G`[KP_UU2I:$#X0-J$UBJ4WE@,#?7AS2^DZ$&lt;)'J[8UR0$-E;.%B2`_#D
M7`YQ&gt;63E![3JI+FOPGIK;T[!O5VB7T1XD6C.E?I`KNRX(BAI:L0I4&quot;0-K&amp;8W
M/0\?1*SFLG,AP'U(T9^.(KX5&lt;9.'3HS\#XQBL#Y$K$Q%O0^#?/O8PP.&gt;E(`Z
M$/8NKFJ+BWM2[E3Z'\)Z=-SL']0E&gt;'7UFUL,&lt;4Q^&quot;&amp;8&quot;@A1SJOM=7*J/K/\E
M;8@#P=2\51HQ@SOO)JR(.;^(E)D,&amp;C'@?,H&quot;[MJ$ANXP@Y!+^@##@^SBBCT&quot;
M-J$PP*KL`V?`N&amp;\[.B5:CY^C')H-M+&lt;?X*&amp;NR?:^34.'I\)K09F5?C8[G&lt;,R
MY=AJ$#S\HZE7S2C6*Z$Q'$A-L3;B_`$IU(/T:*%H,02_3T&gt;XI&lt;#1,D*,E!BC
MMIJ$'BS\A#9AP1#R=`0_+3\)@CP,':380@9@%1X3(MZ'RZ%?&quot;%SRT1I3JF&lt;Y
M+X7#(3K_X1'5X&quot;FTU_&gt;MD06_WRJF6VT2X;?^@M\'AXI&amp;Z$;.H?-%`I32;Z4V
M&amp;8#]1GJM^H9@2@Q+TQ1$^J9*,4D2OO`ZT,6S&lt;'4D&gt;&lt;1WE!EAU]I:?/TG8`D9
M&amp;[:EHZ3]GN,0NM-^!H=%G4C']]?@OVYER3-N,S&amp;NVD`%\[O2Q1O]2PN&quot;4E5@
MD$ZNQMZ]2/$&gt;G'\0^Y$&amp;$_X`7EDML:SE^^\V:LHTR!#=6=XR.'H$?7`TB`S&quot;
MP514@B_-Y/@?A0V.G?-O1F$RZ//&lt;(``&gt;^*&quot;&amp;K/K3,^MLXI,&amp;*\7_R8ZDZX$D
M5*J#N+BE)8YO_S&amp;%N+5[!YU&amp;9S`*\(+:YD]82$HH(A&quot;OYJ`(!-&amp;O`H(&amp;76CP
MH(&lt;-PZ/X[84&quot;GL2=K&amp;@@2EGEF;)7*YQT2$U*KB^WD56^4UKL,(47Y[&quot;?%_\'
M4_:*.=L&amp;)SE_T0BH`N1T/HHDD#41AC__N8(%:ZQ1.\;EH[G/,UU&lt;#$\S2$]7
M6J4'NH.?*UM'D&lt;'F%Y6VEJU5_*&quot;H+B23]&amp;]&amp;YIN%(6'^?1C&amp;-1DU-B^^G#PB
MS##BS`GM-9TA+?:P+_C3Z1P2,^!S^Y]:A,,GQ.&quot;T(E.YDL&quot;*;GYVW#42'P&gt;C
M-Y9((F&lt;%&gt;^0O,8!D1(I&gt;?N\2&amp;/)6&lt;:,&lt;!]=`B`'&quot;$')9QHZ`^Y\&gt;=*G)2=14
ME+&amp;T5PCA9HRIHZ/6*4S6_%\N@.$8B[$A(4(ISP-LM;`&lt;:O3,UH@[-XCE:(.%
M'W\O!`1:F9F9K5IWF=S&lt;[.V5DJT#M,TNT)J7,1P6XT%GPP#&amp;EZ;/@SO8.(_#
M)QH&quot;AR&lt;N,S.]7WIY]F.LR113^ORL'5X4PIG@$&quot;PD3P&lt;/)Q,.+YX+/R]4^%!&amp;
MCG\;IP9[!SR27Q?;&gt;E&lt;'()0U&quot;8_E$%UDD=TQ8N)#G)A&quot;W)/+,GCKT@)'+P&gt;0
MG/ST$USA&lt;%EDMM-`7-P&lt;J6R5C375N@&gt;R1YG)XK[AW^K&amp;&quot;IR6$&quot;%B`CJE8P:(
MLMO[H;(,6/H`NB'N2G#PC/?SM'!X*%*]\R^@:#658&lt;1?SUVDW6A(SR=-C'%S
M_`^'7_?YW=Q5&gt;NJ,/D&quot;BW,^-]_I[C[AKE?O&quot;5#B@&quot;`I8&gt;2$Z$J*2&quot;^\&gt;6&quot;(]
MZ.D\'&lt;L8JY!W&quot;&amp;6JF&gt;BI8PT&gt;^P;(K[\R^9E0XXL6&amp;`JRU398&quot;]&quot;K$$K1[`0Q
M=^V-![2_UQ*AY3HHKYPDUWA?'_53@#M/SF!PFF:9,Q+]%_LL!_3P$70&amp;;?'[
MNUQV$%G]7&quot;PN(4Y+78PXLY(7:B_N$WC+UE9STTLL$1S:,WE9J1OGWBEDLO$@
MHR@HM0[/^OWGY9MBLF=P\CL,N]_P9]:&quot;&lt;+S@+UY&quot;8P=25L*B5#V]([&gt;QV)R\
MY`1?FANX=HK?L20!L3@MBFBE_T*5F#XEI`RG(PP9X]*CLN_04BIS&lt;[4PT&quot;$V
M0#\H&quot;%[AN(T)Q:/1&gt;@/,&amp;ET,*V#&quot;.MA7:8YUY]/X::XP&quot;7/MMW_B:+^A;;=&amp;
MPJT&amp;$_G4B?0'/ZQ)3I;@.,@_WKSH$I-&quot;\O_;9#&amp;AA#T#$0FWU'`A1&gt;^.HDG(
M0:@7[P7&quot;1@')DW52:]=87NB?2;)78LR\AC!&quot;(^5#B&quot;'S(R&lt;/#YAHK;J2TTU\
MN54'4(`Q`S,4]KVZ_$V1-3.HZWBD6XWD*?&quot;727HJ-UHUL&gt;B0X&lt;\[J./H[+SO
MBA&amp;&quot;D-5;RISD.AF!Y&gt;G5%!&lt;5`KIQG_AEI9XY.!IB`R=\Q),,/#4AF&quot;-^_JL&quot;
M23?^V278UTC]61H`34$RD@D[\=QQ\M152+SX&quot;UAS4E22&gt;W-D9D6_XJNI,)[S
MY#;=S\JJN]#*EUZ0@Q*]&gt;+7&lt;$1YZ,(HB,@^RW?I&quot;^L;A+:`YW#4^7-^UK@BG
M*F+0)F2&amp;Y/,AI()&lt;MZZ&quot;&lt;%&lt;V7&amp;:`&amp;(C4G&amp;+N8(^P&quot;TH@CM9CNO\MS9H'0HU^
M%&lt;TYXNO!CQ_G32Q@-[0O!HPLMI@(]_&gt;KK*P8@#!?R/&quot;1-%&amp;W=S&lt;=S^&lt;)!RH?
M2P3EBR)RF&lt;TPTPI`6.!H,5SO,B4U),%Y=)/A4(XJ&quot;4^]9N.('XE%=OV1%Y!&quot;
M=G6!36Z'*XH4WH(R+=M+!A&gt;L1)G@L&quot;)`QB3Q&amp;L'Q][%36L6&lt;]JV./0HW:;!H
M`-&amp;?O:7,:6H#$MHKQ&quot;CZK?%^RRJ/)L@VS_KX-8)6P&lt;$-&gt;E&quot;#)R;J6U0KQHR;
M0.9UN;7&quot;LGK&quot;SQ+XX,-7`Y3(1_%62+&gt;]W-)YV$&lt;*U\;`(DG]F!F`&lt;?_&amp;H_7.
M!A-M-$T%J%5]^S\:@JB,-)`A&gt;N#6\JV%[=_;C&gt;:FFDOAE!D7K&gt;]PB/F(CU:P
M3=0ORXR=A;U1;WGYO6L8]@'A:5&lt;K+=/*HE#EPHKMGU-7OFBDTI+=\WX;@(#A
M[&gt;._FAC(G)B$;P57I2&amp;YN&quot;@GEV]P.MD/N^4!2_09,FCPF`3#WHG!L=+]X.BJ
M&amp;M2#5@_!_6*;.I&gt;&quot;0&lt;]HC/ZKXZ8E#_;P=4]SAVI&amp;KS49NH&quot;Q!=V=S@#R,VEO
M0MC&lt;&quot;!*+XQ[Z[N=*.@`)#EZ6Z&quot;\&quot;;06G'F8A./&amp;)V19-BF!U[3_F:6,+S2$/
MJHDP7GR).SR)&gt;KOA8QN!U/\`96_X3QU#:(]9+LVXE@`7Q;+1N_$Q+4&amp;A)H/P
MB*\6]O?-VPLH(=%U)'X]W!(AM(@&gt;B6Y+DPFR`?((9F#ODUCPX`8_YE[Q-WX#
MU#+Y*E?57O1_1;&lt;-S@QW')R1^S&lt;BS&quot;MP&lt;HS_,0_+A!&lt;?6J^&gt;2@PX&quot;[TG2N&quot;N
M9N2D&lt;4**F_!B;XH]O$(W75)&quot;*E2&gt;0`JVC`S1+=&amp;/-H,OZ4$IH.+%'I4&lt;HHPU
MZY#D&gt;)G!]FZQ'`E3U.'Q?M&lt;Z2N;%^V8,F=@ESI4K,(5;#`2A2!8KPH\!Y=0G
M?;2&quot;@\4;&quot;:-H0A04/T&gt;FIR/,#6E-D;S\8,^(RC(9'[2X,8U.GZY:AB]NV]$$
MF[@QWE*_5&quot;)!.2*R/0,@M(['2+,\3'X_-T(_*C*`Q7,`UAGTN(F^:0BN7`CW
M&quot;19:?'_YB+&amp;(6$=B8%X1K8-X)-N^W$Q)R50`!000T3Z[)9D%ZQ)&quot;A=@=1B0C
MO]RO[V)M1Q*,*7`NHJEH7)E;&amp;E&amp;G+Y:04)SOI38`KS#/W!4FA&quot;I4/4MI9V&quot;$
M=&amp;8D'`Y-0[=,1T!![NP/MB@?=Q%&quot;A)4G[A\FIW3B%G*QCT]4)/`&amp;H$@*BG]U
M['L?=;`Q1EN=&amp;4]PS,&amp;+V9P1I/O&gt;)`W-$!:\P9N_-I$S-(]S(P!(;1&gt;ED8MO
M=SG__&quot;K:[.^;MZGU$6$Y^S,G5WI(LW^]?_RTTQI)1G&gt;%7U=]=$PMPBJ?&quot;%E%
M,_`P@E/9]6,'?VG?%+0J.,??\;S`9GC[30\Q)&lt;VM=&quot;&quot;&lt;&amp;I=V&lt;30Z,X1%2EPN
M?(&lt;[X$06^&amp;!C7_/JF7KJLC,KF+&gt;]IK%F_?TE03[?S[_&amp;7%4=?TIK2%'0$&gt;E^
M1U$0&amp;2&quot;PZ(YUM&lt;@C&amp;8E'1CK'9+&gt;#S%=!R+D'/M\H1;S:B`1A^6Y&amp;KV9G#9ZE
MA&amp;-Y2P6I3KOBRUS'0C)^(_%+_`(&gt;`?X_K&quot;$NYHT!JL(X%&quot;A'M;7FL=Y#7NCF
MNBO+-TZ^\B@.#1_$\X7B3&gt;*ID7[@Q_7@YL`1FRA0$[KF,QSU?K8_VYM\'&lt;M1
M)XKN$:H5RG&quot;=6Z&lt;V_&lt;@21CZY)&gt;(S1/+\YS/&gt;-6$L&gt;U[(-;[G,2_M6[@/83*+
M;_04S]&amp;A+.&gt;*1AR_#%U(C3D:@&gt;%LRNQ&lt;2E!((U?UU)DAN0]NRO-4#@=8&amp;KJ%
MT'&lt;J5#3O$Z`MX7`_*1EN_+.Q1W'T6@&gt;U-`'^F/9_K:?8!67RB8#T;*XC5\;/
M`6I#F)6[1EK3K0VHL9G-GQ&gt;O!J,DO&lt;U,F^9MX/FTSH?18(%=)`$Y&quot;QB]SK$Q
M$8CUI2$B3,&gt;A&amp;NV;T4*0170W9%\'K\@6Q(2^MLRS@5-3D3X7AL)!_Z8L'3TF
M92U]+R_7`K.W1ECQ(%BUL83BD;7AZ5PC\EP1,7!,5(HH]65JU!`&gt;Q,,#P$!D
MH4UQ0B#'V)BX(0`ZR0/($()&gt;?,F7`MB**5G]$T($/L1.B-8J([FQD)0M@E-I
M0S-7&gt;#B`T`08);Q8&quot;95(S:'%?H7]WW_P;_@AM5GOTT!``AGT#,JZI&lt;,+?&gt;S!
MV?P/-2]#]YP6EZKCSL8&amp;L/^[]=ESDYG_/YP+*&amp;R-.O&amp;99)T13],&lt;J2(9&lt;+!/
M54NV5J-PW@_)UQ'Y+S'C9C%$+#'S++0W#1F]R3]XS2E-^&gt;,NZ$.5(+9&quot;MFV3
M&quot;3\EX`/'L5^&quot;4]BHI1HCG[-KK?&quot;C2&amp;&gt;S=ZZ2?&gt;TU&lt;IV=!T;&gt;9_E&gt;X&amp;T&quot;C3Y&amp;
M?&quot;F\&gt;`+XZ]WM79UPJL93*:L;H]H7&amp;27'=W-GIOR1_V&amp;_&lt;J/),1=A,?&gt;!4_`H
M=IC]I//&quot;C&lt;26&amp;?OK(J`1,BXZ':\T&gt;T7.Y3L;ESK^9T71:MUZ5G\5H(R?$/II
M`_&lt;+_,UG_[5F7F:]T[%&gt;@!?]L:^^S:Q&amp;W-S$U,T,3A+R/8(,9V8*`.&quot;%NG8G
MDAT2KS(++)V:1M3E91R*`P?Z!T&gt;R6-!?#I&amp;&gt;&amp;HO&quot;:8)3E5%E`Q[J63^%H-'K
ME;K/SAC&gt;D[&gt;T_D:R&amp;;W#&amp;J`!P.9EMD&lt;_E^HLC&amp;3OAS=&quot;0JD%MC/)$1X,Y8YX
M_^I54&gt;I&lt;NY_N;O.+./='(#PUSJVJ9(3&quot;N`Y4CN6.&amp;^TY'[;^L9&gt;;%;FP*=1H
M:'V-.HT[^L)&quot;Q90'`M'9[R3!NT]&gt;%(XI/+M*@^:4+!;]_:@/NM\,Y$%/'&lt;[$
M&amp;X'DW6K:9$736-KHR(3BP#$&gt;@NR&amp;@E=+&gt;&lt;2&lt;1&lt;BU0E.LN$UKL#&lt;%#M_MIX-A
M(Z&quot;,;VDS2&lt;J&amp;P851-?(FJXMC*-BPT4&lt;$W-L=^RMC6`C\T9R4VCVXQJ7RR]G\
M9ATGJ$UHU02P0HI1J8-2E@;DL2$;'5*X:1#T!V^_X,M:.)XAA%J:*=)=0@R.
M$R_-&quot;_U+Q[CTPPE.%1@`8`&amp;L-8&amp;&lt;R_VC'2?*2R&gt;U$Y&quot;/3+4SZY'#83R'6T?5
MHDJ/W;&amp;;ENUVZ6E/TG_R\*TK&quot;)X(-#&gt;O8][^T2&quot;L%A6[CE&amp;'*,A_?&lt;$7NUJT
MGM;GWIMZBJP`;X6]1$KJ#$8YDS&lt;+TXSA`'5`S&gt;WP'0'Z'\OGUV1@KPNS.D.Y
M#]$3E3)3`+X;(:J!V3T.=BAUUGX-KH'5U^^!43@HD79(?-L0Y&amp;&gt;5I54%P/S8
M10^'(@HBWUT&quot;CL&quot;P(K3=@Q&lt;Z?_0&gt;2Q]F&quot;G-@5A97OW`IE'R7Z&gt;).]?&quot;C_*&gt;1
M$L0CR:*DKO-*F&amp;&gt;?GY*`'!J0G36P9`8'B`?0J3:LH00;W:4??7)&gt;&amp;-V]!?:8
MXS&gt;AZQ*WJ#ELF&quot;#LI!NQP8N]?]&lt;H6_+YYNHH&gt;DC@$3*$I.^%*QVLT&amp;07S8'&lt;
MWIP/H,LP&gt;A4'29G#PM&quot;917+IA'[%AJI#X@VBBIL]/K?L-E%?#QS3\*\^&lt;BW&gt;
MWDY7Z_\[$H7:Q0S0@N5?WG9(C+F'H^[VH$YWV&quot;GU[4TC1P%0IU=@6U:3VS$7
M^?6Z*&gt;9:#Y,AKGBQEVY@EK&amp;-HM[81XE4D%J]9Z&gt;V&amp;&lt;&amp;?/70!&gt;]A\#B:(O?U5
M0G#P=:S]R,\[KHN]35A#AP&gt;M!8U%B&gt;.S7Z+=&gt;-?-D%=%BOU/0FT$;,WW:9VR
MG^%0&quot;RPM6-\Y(CZ,]IUZ&amp;^,V8[[Y-Q*[_=OXB%`O_)6C=Z?KDC?5CW0E&gt;-&gt;1
MT+5-0&amp;S,#:KQ/`OBQ+3Y_AC6QLA`.NMY%RA)&amp;^?B@8!;O#L%K)[E];8@#&amp;DH
MFXS$Y#Z=0V)?6L9_&gt;4[\+^3^&lt;B&amp;Q?9\/2&lt;R^L80DXYPWM)JT'B(7_2APB.;N
M\G[S)/.T=V_X-O&quot;CU&quot;;(+CO8J;M(+#1*`(#KOF.S&lt;&lt;\9D\&quot;',@QGZH0OIKP.
MZ/[M/&amp;)$*S./$*&quot;EV(PE(_K%)@/8TUZFQHD3.]G`00^*H&amp;?TV&amp;!U0!C&quot;/_%)
M)GU/5;*N?9T372QG'H$_8&amp;XP;7&quot;&gt;7%IT.=W1X-J!?VA&gt;G5)\4/UH;9-LG/*Z
M2;5&quot;&lt;%[/6]^7U(F=\ED$$Y-FHX%9QF*IXI&quot;&gt;1[:-3?ITN3M/V?AQL.JA1N/0
M=ZT/)FHBHIU`&quot;5@5&amp;1/?W:S^??*?=(.RLC)?8Z/0T%?F_LBD8%$`(XP(1TWC
M(\&quot;85;!DFL0&amp;Z,.8J;/J/RAQ&gt;0]S'2Y4+@K?+#HZ3XT&lt;.216&lt;&amp;&amp;RR7T$S&lt;R(
M76\D5/.HE]6Q3TZI&quot;=8.E:QTC];NEDMRUM&gt;%\YY#UDQ#LHWF'?0*4Y*&lt;L]!?
MJ2BA#$:4V6&lt;K^6LP&amp;.4YRSKT:BL].'LPJ3)JJ]_H?I,+154\!C^:/&gt;I=3J]&gt;
M/MX_/N(WZ6&gt;O6'2D+_RZ'CT_\*P85B#8&amp;^?1,*LS46\3$?&lt;_.9F\^^9#4ACB
M5APM72R7:#0]?7YI2A^.EPP&amp;I')RZ_8X&gt;]V-2&gt;=J*Z5&gt;V9(Z\5=&lt;BPP[OZE0
MVR.^#+4-R4#('S]*%/_GC`^1A@&quot;I`7=M=]O_OM=1V@1S&quot;MO&gt;@!%`50W(*Q0,
M%,&amp;BR6CET(FPU-4$&amp;[Y:VYHX9Q?:-#2XJ`R*,(XJP:#_Y*&amp;96*1I/JHMI?Y&gt;
M2?#7=&quot;4E)7:LSV8=%,KIZ`G5&amp;+Z;Z7E**EEJ'&lt;[CKR$.A_5TFL2=U31GS4ZY
MF]3$&gt;4P.VZ8&gt;QYG/AQ[HT$T7S:=?$_1&amp;DU':;I1:EW9T.`9;P&gt;9#PEX.JPO_
MM-T].CSJZER]O0H^.@HNSPD_O:G&gt;??2;J0=)2PV/BG&lt;UGHQ&gt;[)Z5G7*6MY7?
M/C[J?9&quot;7L&lt;Y(+MK(MK4V2=&lt;KPES4(6CU2DZP*J93GM#1Y;#*J'OS^^IJ5387
M*JE*I`,+9D&lt;@2T(Q@*^T=`XR1&quot;[0\(]O0]&amp;8&amp;%&lt;9I,6EN2AQ8_[=K78B0(P$
M.`2`-H'/PAO_X-55DT&quot;S^E&quot;M;&amp;O-J@Y&gt;048Z3#@MD`BHPM$P!0`94FTV9N0`
M;?VQ%RL;ILP\+9*VDTYTRCO:MU&quot;S(D+5&gt;5$Y&quot;X?X\;CM_O)Q]=XAU=Q_,[6_
MZ,C7M&gt;(R.]-+CE1T\.4N0TY4YX?SQHL'&lt;Q?9/H7):JW143]&quot;$RWJG*5;&gt;FFV
MF2/KG$L&lt;WA[`]?S]P,BKR:X'FFZKVT-I,3-S_=F5CK(R_4S]S,*6QI;91B^#
M`ST_O&lt;RR$NGY$#NJY$&lt;]+\581OH(3:+=WC4&lt;GG]H^9;*VCJ&gt;9R/A*5/:'9%A
M.CIGFM75/)PS2(G`_/IU!)^&amp;K(:EZVI3D;!YELQ$Y:C&amp;5.5XURK]^EJ&gt;.TCY
M6;%7=`F?CA+P^V'K*/+P+6L:,X&quot;@!_+`X4MH1&amp;SDGA!X8FZ&quot;&lt;T)E,53D)UF3
MMHF8\$ZJ9J='716=8^1M=Y=&gt;1F'1RI\Z#2[.Z8I[%=Z9J*)4&quot;P.OR]75UMQ'
MA;TFC5D&gt;-8D!CJS_6!MLF(V'?AEU5(1=E]\?9CR4ME96F7FW&amp;I%;&gt;SOLV%O;
MZME/&amp;\SUEOD:X&lt;\8F.@]`&lt;/KZZ$&amp;^7A@QMA&quot;3V]'SU@OF3UEL2S'O*HPO45Y
MC,GZ7.ZGR&gt;RTIY1&lt;7PV=-?_[(9+KP-;`,GL')7$NCC?5&lt;MTUVJJZ&lt;O\Q^UI0
MJ`V&amp;=M&lt;+T-&gt;-:HS1+.7\SDGYDI)-_XL`BD9A'9]2&quot;J/0&lt;[6&gt;F(@U&lt;K&quot;1K6R8
MS&gt;:0D]-YY^)[9BB(B(;(`.T-)4`H;%M&gt;&amp;B%#`*BI%*ID%IN8E-BED#$*]@X/
M%5ID9L!!,M`H1Q&amp;3+Q%&gt;E[V/1=.Z$BSWUD$M&amp;X^[D4LS4S&lt;/2P4W&lt;=-&lt;G!5G
MG6=MU555'3\T;TZZ9IJ_#RI6?A`S,6[#Q&gt;7!E2NW0W]]?;L:?''1:&quot;YIQQD9
M^T:-AWVTK+)L97*H;J3L))^.O5;YIZ-:0-S8]'E7I6N9B8-QBG%&amp;1F'&amp;HI^)
M&gt;6EKE4MFLFNVRVX*5H3#ZSGA&amp;7V]9+V?)?IN8MB8]GH;90O3$&gt;73GUY;?2D+
MSPM'=(=@8*@+LM&amp;^D1X:BR-!`P_-U.X5I7&gt;4I&lt;-@K_/R\K2GE#^T_OPS1-J&quot;
MS/7=R@V^MT\Q\?/[8*^D0?H%=O12424&lt;`,%(!=/@&quot;M!GF.1XE)OG*=9EOGY^
MGO5G7CO[#Q2RGNIN\AH-F4L;A5^T\_(+H`?WEUHWYD&amp;.&gt;GZM954-;S]3-.@B
M&amp;PITU'E)WK0Y=L)U79VK:EMC:'7LMN9W&quot;P.S.\PZ'(H=],(&lt;9]_YFA3ZF&amp;RC
MF+2,27!\KXLO=&lt;2^]$T;V=H:Z&gt;7HF9EYG1O,'VPTI&lt;SHBL7)RZSJ7=Y_&gt;#37
MWTQ)W=VMKFYK*UIT[3@ZH,],3DTN9%BEC\2/?.,:3E;T'Z97HM-#8'Y'R'W(
M/R1:V)4V(@^!B\$I@U%'P(2%XX3C0*$IO;0W6K%P,-2JK&lt;-%L\'$PL&quot;E@34Y
MD]1A#WW+KJI&amp;Z9!MD_U+8.FES$&lt;Z879&amp;=G)FO?3\&quot;'\1$`@`D=V&quot;&lt;J1&quot;YK=L
MMZQFEP*&gt;T\3MBEY&lt;NZAWCC0V&quot;'&lt;02SO:LVW_9C4O--(+?J7ZN%(_JG-97RF[
M_OBX^[ML[_'6&lt;Y?F&lt;%S/K+Y\;;V^[+&lt;*`&lt;$I`87':5/LKCENG(MS=NE71O!/
MQCE&amp;;)V1DO*T6(BU6;*?EUV-F8&amp;^N8DO3=9T0_WN.7N'2;&quot;CZ^WA`K%^=6?Y
M8]GN;E%&amp;&gt;[GJT.34+^R=D+_2W&quot;\$*^KKRQF%DCD\UQ[P,4*1T'72%C3&lt;;;K6
M)53GV&gt;%8:?ZK426S0&amp;I*LF?/?U%.O5$M[)F:W*UT*`&gt;K3;U17L&amp;:=KSZ^1Z,
M\&gt;7=O_?N&quot;2&amp;MOM&lt;WYQ\^&gt;&quot;K:#[;8V_NV\$K6TN\,%SX3PQQY-/6914!N_7=O
M=S&lt;.L.7:7M@[&gt;#I,'@@_V]@3CC,N*TL.:8;1!':&amp;F!FL/E15VG?\9G&amp;(EF?_
MC^W@&lt;KKI\?SRWITGSCI#FW4E?_)Z&gt;N#'&amp;MNB/M4Z'%&gt;P+&amp;DO1=@RFQ\^R\'U
MLJ*ZG(&gt;+3%OVSYC?,W!Y;;E31?/*X)=2&amp;YWAV.F4(*_D'%UI.7]=228Y0&gt;EH
M+0Q6:^51#`6-*&gt;.BG-J00%DD.17-'=IUV!DE@;&quot;?&quot;)=&amp;V&gt;?]2\=O=0&gt;&quot;!06M
MP@2-PV_VLY(Y5'M^,/ZLKJPNFSHN57M[%PDD!_F2;711OE1WUBBSSG$9,[)O
M61P+_VQ[A_&amp;278ZT]%-+O35]'W\!^%WA&quot;S):_LV/'52M;V;;MFO^99N89KSO
MC%,N?&amp;CP]E8&amp;D;M4KVXD/[IVR^F7RGS!8EPE&lt;4C-22DU+BN)J,R9OP-TRXVG
MV!]^2\W4UH'EOYE%8ZEF/K^\S&quot;//Q3_&amp;-:(;*?I`GVYM!H3\(9$0K&quot;-T(!@;
M+^L&lt;6HS=EV0!V5O;A85/`\F^/QG8L/^^?B9+&amp;))TRJ^/^&amp;V-3?H?D\@G[*1G
M27M8&gt;V^3LJ]D`%D91J&lt;L'T-*0P=A1KV'O?I11Y%1A]K.LOD_AVVW:K\YT32&quot;
M1W1TN53&quot;LTD4!@3KE]K$!:L`H?*FP5\#=MEESLD-C47GW@T-N4[2EY-$F*U.
MADA$?U\M.Q$Q))P6^??=P9%&gt;5?++L\*$4D4*&quot;F-C!^-2_?6#%SGU0E,5E&lt;IE
M8@/.47\AQ#!]4MY@#!)#DIG,:5?CU)G^8\ZSFZ']*5C6Y-*MZN[0'OO0PM&amp;X
MUCC/(&quot;.V6L.0[!W-P3#GR`\TZK*N_.N*5U:5%6(+AE_ZK^?GC?0*C:9IB;PH
MWYV&amp;R4SGD*K_ZDZVMYXW\M)S-O`LP0C-MIJ,-S'1IQ'3[(0-CZN-]^5\P:?&amp;
MXV8\=53C;8B,^&amp;22[7FP4[K8VTMDK/KM*-O&quot;V:*HK,@F/1W%JV_MBG^1W9JI
MGS&amp;)%9F-KZ;YTS7P\;[$^6!ZS4NML''&lt;&lt;1(!2XHGH++ZHHI%!L__3&quot;48L'WY
MRGP\*&gt;4S!1&amp;5(7TFB8EK_F&gt;_RTK#6X/&quot;'2TZJ:P+#.![OO:CPQ;=U&lt;P0_@[\
MX5.I5U%+:7I1D;=+6C(JW\K0@=#XKNVF[=:LJ[JI@6=[I=I\-3&gt;ES*!0O\6W
MM&lt;4WL/'](0&amp;,/SDG+5&gt;%T*CDFH-(K%)!Z4OO:4Q.PSNNF&amp;*A0/VL!F+&amp;'&amp;]U
MS8&quot;BDM+*C8VD@#^+AM)&quot;0D/#7]^JVK&amp;Y?7&lt;?YQ$0$E7&amp;#7$/`\?&quot;O]X:-T9$
M_J?&gt;JVIL8Y]GXO)A:W9Z&lt;/#[]4J*/::OF;WCPF3K^R;CI%%5,L%J$DQ,#-D;
MY/&lt;Y$=&quot;[GKC_&amp;KC&gt;.%8Y.'=T%EV04B?[5%R873(2K:=0V*27\K]GDP!D*)@9
MB&gt;/_*:K,+%4UEFJ8-&lt;2DQ=1#`W-G9!:8[L_OO?0S&quot;E5F+`G!&gt;2&amp;O&quot;S)[MK*G
MKQ1.'PVF/&quot;I'%T5$1M_YL-DZ.J;:%ONOY/;IE$D&amp;/JSL`V5C584&amp;^NO(M]2[
MW?M6&amp;(1D26=Q8[BYVK-&lt;9-/*AT9Z/?=&amp;=C65_,.]O^R\W8?N]N/&gt;FQ&lt;0)?&amp;0
M3!=:+\+Z@2S&gt;9U,&quot;L&gt;GI&amp;$VD6KK/R.SL7SF.C[[RJ-1Z/'S&lt;?2QOK]2I']9&lt;
MZC[#5!V5?3LS/DF?V9SNNYB98Y&amp;A5P87*YJY#`HRS\4_'-UJ,KK9#;(W?DVB
MP3^Y=,X=:'P_?%DM_&lt;4DN``#:];99&quot;1T+CXJEXE$!EUL&quot;.L;()##'9.,:37;
MV$%G)5`)U5/0@Y+HHK/D6.?,N.Z\GO6BB-LL7[NN?NP2J351ST8;U0&quot;85)N,
MSY-8A1H88OOOBHX/2&gt;K5/-K4=%[Q*_L[C:\,?1[*RZ5FTA8C%^0Y_7N:W)]8
MJ7.R%E)F2ORRM6C3!N='IULP3T7(*U^Z`&lt;FA3V'\'8P0M!#V,..T!&amp;P('AZU
M5,!,9U.P_[=5&quot;V&lt;=515SK\VMIL7%E%=@77D&gt;XRX&gt;BVJMZ;S^82Z-NJ']JAFC
M`O2MKH:NAH;AX0,VN@D(2F)5BG*VL?%@3S?7W%1;6PZST&quot;$YU\O6)GCU'A0:
M&gt;VWPN.Q`Z(RK^U?10R&gt;:WZZQL&quot;R16BQ?-D^G`AHE=A+K[3T-FN:/#[C+9KI7
M;599N+BIJ[I;*N?2[V*?C#HMOZD)DC0M$RQ5'A#&quot;T+63[Z&lt;%9_'&gt;&amp;14PXQ_K
M#Q),Z(DTO0SO^66R4(IE_=K$6OM]@]9XDV9MU^-4W!C5JO:B'V&lt;UJ5*_[ED&lt;
MOX-=R6VY09I9YH'0.$8:DI$1C)MG6[ZL5UEJ;)9Z&lt;-EPZ&amp;&quot;&gt;D:/RD&lt;DJ.&lt;$!
MS#G27N_X11:3[=X_62D5G:1_QF^ZU,2[_,9LG.KWJ9J&amp;D+/$LI&quot;`QINJC]X9
MA=XI-M%I%!E;E1$57'I&quot;N;A:IR??&amp;`27.ID&lt;3B\*_9KKF4)A@CA$ZK3AX'$A
M`4%Z&gt;BX(+E9V^;PJ&amp;&quot;O`[^:O8.7%:&lt;71\7:]X*&quot;JJN%ZZE82TZNSG.'*V;W9
M\C]=#LO!W_@N*:B3_ANK+=YB+/?74_46M&quot;YA!1/3QN`(GG^MRK@H+,W0-B(\
M]K^UPP!HD-2E@&quot;4M?7D)?^ZU?DJ2(7+][.QTO[[MM,[7WV5%SU'_\$IB5\_(
MNMPEVUQ_9F5M,1*$AP[#\`JKH!YP3?UA;9Q7H*]K&amp;*^S(@4+P7SVJ_J@^L#Q
MWB1@7'6LO42FMH!155DGX.QW/@L6(2`+$+(R4K*0H:_#]&quot;7*N&lt;N/M/:T;G[Y
MU9'&amp;LM\_E*ONK;1I&gt;`XW[?ZNY/:;R?#J9%G+UZOJNBBUJ4(O+,M:\0Z'JQA:
MS7Z2'2(B0/9X&quot;F9CH-;W($2]F\93^+BOXB&lt;F#8XE-AKCGG/[)R2\]:]R-UI&gt;
M7EB4E+S^4N@9,8%!)%&quot;9ZG#VMI563X:\*)M8)TR9+3IPY[HKV/=PI&gt;5WZ?IG
MX4)O/?NBI)KG%&amp;I#OZ&gt;AAIY&lt;0NUA/]0T/&quot;8FK&gt;HC8?V6U[U+*?0!QG1UQ:F^
M74X5!0'+Z@J_D;I$&quot;$!9F55`HB(/*Z&gt;C6+']/:\,R7&gt;ZM[3*QG;/]-J.%\4#
M'8_;V76Q&gt;OGU,;?U=OPJ2]FZECNSN/7*&quot;KA&gt;&gt;J=\))-MY@B^&amp;!L_NQ7R#Q@6
MK)FH'.\P/=GC,)[2X-!IF.GPT!KJ*@N&gt;J#GYKQRO]=1#NB7]FLPA=FS8:PIO
M2&amp;70[&gt;_6MUZ-F-2]A=N198&gt;&amp;\3CB/698?_\RB'_+Y!-[13G&gt;U(]O(6%6Y0M3
MQ.35QFZS$1W&lt;1[]$#S*);]OG(MP!-&quot;Z_0CO[7)EQ,^E[U&lt;;]CLZ9HX/;/)HW
MOZ&gt;G[A^PG+D$3\MET'4F'TS7&quot;I%+D^TS1CXZ80P.NV5#P_S?&lt;=\?B4)?,VDY
MCK+*9QDRLD?2XI4KA':.U*!MA8^=K?14:^'B,_%LNE&quot;TK,OSD*M$*G[&lt;(&amp;5D
M_YKW+.P=O7WR[K+N[D$B+M5PQF[&amp;1:.1]&gt;1Z(3G]K!&amp;'GGK3F[ONPA'W/8VF
MLJ5BD@#.&gt;T=*2D-Q]&gt;IWC.S_+7T#?Z(O0RNWZQDBZP/&gt;?#4W]V[5;\B3&lt;#!A
M&lt;DC?$R&gt;9#M372[']L:&quot;*2_F50NK5]4R*C77-RL2&amp;K;5YLO^Y&gt;6P(0K/C513\
M#6G\+RP=;1'Z/_??5O5TW@KHW1=.ZZ7X%187.Y;B\]P'95=OS&gt;YM&amp;A@[I!\N
M^&quot;5L&quot;I5-D&gt;6H#G-)=%0-?EQ*&quot;_PK&gt;STKKB$SH&quot;P7&lt;6NBQCY[M8\]26FL_0.B
M'6L`-]0O+-TXOZ;&quot;[?.`_`0A6V&amp;@D-?Q&quot;2#!$0_BQ$IU@8$23VW`\KOARHA,
M007Z^*ILP1OCL_.I&quot;N5H]C8-CZ&amp;H'URWY^4SX^*Z54W3(^&lt;-W_F?&lt;&gt;D.Z0WI
M8%-D,1&gt;@F:+)DKP&amp;R?/JA.B&quot;&quot;`2N0(3:4`6&lt;*(_(R(9HZ&lt;:;QL7DQ6G;#17Z
MAGF=N(W,N.1JZZ_XHVO8T4O4AK\II)8//OB;'UY^J&gt;U\\T9QMX#V-4U\6R51
MF\-&gt;U&gt;W18V=G6&gt;?O2L$IG.&gt;/DC-SD,\?'/0VUCPSP4.U-@LQ+SVM;A\^]1FX
MI':NLE&gt;,U+X8?:4?R0F8!(*MIECO_J2-'S]P_.0_VLU(MI@)]%.)0M!9'!\[
M&amp;-G&lt;'BG+;$LU?J1@3_D.]\!'T[&quot;I$:955JE1QL#0[]VCPG8+HX5!1G5Z;?_S
M/&amp;VJ*FIEV[C&gt;/$_&gt;3&lt;4_:6A;=78Q][[VOBB\V-SS?DBI&lt;&lt;/?V!S20RO&amp;U$5[
M+6-$,X#[)7YBCG$=K8AG'&gt;,N#2Q/,]5.T;AP\&gt;W:M=R8K#'EW9&amp;&gt;OGQY67G^
ME2GERVF)!G'USQ6+$N,NBU]W,)7EXC-2'2EQ'?%S(Q+?S6IH49EH,$!4I\S&gt;
M1:'YO07(;&amp;I&amp;9'I/HF4(=&gt;4L:&lt;DH#;OS:&lt;7^+B6[=QC&lt;B^T/+;I&amp;W:0FR:04
MZH_OF&amp;M\+-)SE%S0ZS*1`4BVKP$TDM+UOJWI/9,C_8;`V--1[H9(![U2_18`
MIV,L!2^[51,W[XOZ.:A,[]_T`SPWGO`9%/0:A`DC_9X_(:S)&amp;S&quot;^&lt;C)RLMLX
M'OLWV'QZ&amp;L9E5ID2_V#OB/ZJ6`=_5__R8F]WQ][F]8IJ0:6,&quot;0?E7&quot;?&lt;'P4F
M\].#^BQQR2_%F/EP6_3&amp;?ZEC9D2_.2\JGK3,]IXVWO7VO&lt;&lt;_S'5VODU&amp;O=FY
MF&gt;FH_XU_)%M'RTT0GR/Y3[)_BQ`4&lt;WXF':HC\UM6;.B_W((9A!B&quot;'(&amp;/-&lt;%,
MG_1GO9IO&lt;^O/2#EWX.2Z&quot;,5SWE=_^KW-?&amp;CF,$TXYO2#$D/4D)%-WXS\C+RK
MBLT+7;4]H7F-^O/6TQ;WP??7?,*EUE5R.VGVI7!2/+M*H:T)&lt;$$86&quot;:2!Q3R
M)2Y&amp;D+&gt;%BP[R;#NUV#'5)$7?BS5-U2RG*)H=@QY,9&amp;YOEI,EG;KG[RI_TW1Q
ML;6Y-9&gt;6OUE:YN7B9:_VKFWYT7_ZWR[);=Q[NV8G%=*,ZC^.WRFMA`1KA_KB
M&amp;E1_UW%Q2;2W^7VGXV[04:L]D-:==.)T4HD=(=?6?@5@3'2SH6GF-*82AB#3
M3'T&lt;'U97?'&quot;*BT&gt;UWGW&amp;^!LNI$ND#?!,O#%OZ!,86KO&gt;)6&amp;?OT[4G]:O0__:
MV&quot;S=[%)66%;+\&quot;V1^G11^O1OD'N-J*A/\T/P]J-NQH_IQTYY62.7P,LMNV__
MJFK-7EIV@$H^1V!H8Q&amp;':Z.I_$11V\\J8PB^*\2)$V9A&quot;,A*]'`\&amp;;##IOOR
M_4LX3GO%$DW=[NEC;75M$^-@F&lt;E.=653U-;&quot;.5&gt;E4`,?CTN%L?&gt;C]&amp;J4&quot;&gt;O4
MY?U]H&quot;E^AWRA0_'6^75G:&lt;DG)E+%)-\(C09%D66',-@UG6EY@TZ92D#MT.^A
MAC=J.FU$(D'UP^RMO\MPL-V36H=UAL&quot;117/KN/CJ]O#X$B)&amp;,&quot;*FN-=1(WP&quot;
M+A2O_9:&quot;0B4&lt;_AS.3$[[?L7RF!;9BZ:.48%G!T1;C;XO??V:5:?J4UGUO&lt;&amp;]
MZW10^4-96U5KV^YMV6ZT=-063T.7),?,^21/YUW%I!@V2*\J`=`#2M&quot;TT6WT
MV&quot;=(-(5&quot;PK&lt;2-#6UPQ-Q-43*==ALVT7%[$[_,E&gt;:9J4UO#?1V]@&gt;%*-%(8AP
MB+!S0V2&amp;#@[V-)SGKX;?Y([LSM_G&lt;-W^G+H1]MI,MIY9F$[58WRYD*Q2#A=1
M*=PHK$PV3DZ*X%DLW`F00(!?^U;EZ&quot;&gt;76GT_4)Y8OR*M&quot;GB7%PD[@8G^`&gt;A#
MZE%#)`#)+XZ2`(?D/U^P,]H;)#GK6_/]IDVJ*_?N'CL/V[B5E[X/$+/&quot;O\=[
M8$&gt;)RA=C1%CF92/@EBR&amp;2R)$8H883&quot;PR2#`&amp;/8&quot;%&quot;8$01Q&lt;P&quot;I90[,_J/?P[
M?\T3&lt;M[W0D]#3TBW0;VA2YYB4I?B%]'[%A`SD0Z1;5AWI(R&quot;C&amp;W8G_&gt;$[@QF
M(6R*&amp;WZK^B9VAL;P_/PMZ$5@Q_7YI5[GTL&lt;CULWU_\(RR(@G!WOBBK&gt;:&quot;K&lt;N
MBXNOJ&lt;[B@_W1KV%A_E?!6KN[&gt;W+(S^\M#+C9Z=3`E1P&lt;'4J%WC-3KYUC+V)?
M7^J3R]N^2-8;Z1#\^'(:[I&amp;?O_-/LIQ=;%KY;-&gt;T@;$$29\'M`IU6%BD%B8S
MSSSJ&amp;VE?[&gt;[J,^#/)./`HM'*8&quot;]5WUMM1A=3$Y7T*'#[DP&amp;.]_%Y&lt;`(R]-#M
MW\29L368!/)M;U]ILP&lt;(9O65G4FWQ^$\K-X&gt;H[L:DMFY8$&amp;V)F@Q#`F4S5&lt;F
M).ZQ,&lt;&lt;G$$B$#&quot;(O&quot;)\W=CRL51CP$0%Z6[AILQXQQB=D)I`R[8]C,7/X^&quot;,(
M7HE?Q\(0CW??3`4D!3Z(UED(G,(9)1@Y1&quot;%-@2WGN:@5M$B#S&lt;:WP%:1JW6D
MXN&amp;5#UMHJ&quot;AGZ.DI3TCM-Y$/DI8ME9GDQL\SR2.ZAYYGTIJ^6#.RSFE9S?1]
MEPG*)@0MO3!,34'27A.\Z/9/G@^)%]M+:&amp;GY2-Z0Z[N*4GC'?%2=&gt;(RJAPSM
MSP[#31&gt;'G091JOUW3M#M&amp;A3W.%PJ-B?V,_;H:FBW;&amp;NP&gt;YT$PD_$3YB7)60O
M]*?0'4R]`Q_C6*2[5@$_3PNW/38F:LPE.CY`%7NG'R6X_:=_E2Y&amp;1!@&quot;&quot;0#A
MS([L1X_&gt;S:*Z\5$K6*BP`=JQV,^IYK&quot;:.(9WDE&gt;0[Y&quot;(&amp;O%B&gt;2G0B1L'U97P
M#5TK+`&quot;$1[GOC(F:1]6C)K&gt;_C%)=@E&amp;#PQ(A:Q5X9\+\-!$\WS!PI!G?NS(@
MN]W#BCX@%`A$I&quot;'M(!SCP8`:U!^4V)KS.&amp;&lt;%]AI\W#R[$XJB^GHL+!(@B9X'
M-RKNO&lt;%X1HH=D&lt;5L)BY)'.@^__U770I=MFB+68A/_S/B./*-C#LN,ZPLB;P@
M()(L$AP.L6Y6UA861JT^QU-$]]+[IV)[!&amp;M6&quot;OF.O,^!F]*0WT`I&lt;])K\2=^
M14KP+9FT,]&quot;M:`*&amp;I'YGXK8_L&gt;)`53Y19V2&gt;4B%A4$3X%4XV.GEW=U?W6OH2
M)8B&lt;;_9'!IDG%1[QM&quot;?QE[5`-FK2;;QW\!S[S55%I+Y!A&amp;&lt;!^M]+V)B3+RD5
M&lt;SY\[GT:TERM*&gt;(:\&gt;+EM58&quot;/$^\D_H_?.S;JL&lt;P#W1$\ZT[!D&lt;Y%?[G+&amp;EA
MOF_(FK$8!'3$1?BARSP,H.4]&amp;'N!1SX?CVIK%[ES/*PWMEU$I,XBE(E7&amp;=#_
M@&quot;2OT&quot;WHXLRA$N8*V.^D[@#Y;PY7G7=`3A:$@54&amp;]YTO[,A.V$?TIR3CN6QV
MF-5XQ=S?S0/&quot;8\&lt;MV*L!8^(Y)SS]^+(&lt;?&quot;+_8[Q;[,?]/1`9Q06*8N.&lt;Y.XS
M]!).[/N&gt;%8V2@_&amp;BC?$\B298S#)L=&lt;5VML0N&lt;3$Q7OS$&lt;W'.F)EX]DOJ*L)X
M&quot;?R`?@GSN@^1G(-X?Z\.`A79KB*4@]Z:$R\BK*\PP,XN8[V(G,Q5J=Z.!/+F
MV3;6@U^4BH%ST*@5+&gt;LBL(TQ6F@$TF`%]Z_F/LF_&gt;]BX&lt;VX0B(8P?_YIDB`&amp;
M&amp;@^?!\;*RN$_?-4NP@-S1&gt;^J-!:/5A'.66K:1K-1DG,PW6)#IA\(!EXW,IJW
M%]S;P-JN,)`F)-/H)T/5N&lt;_?/[XB&amp;7$&quot;K+RF8;'@Q?VSSM,$\!TAR3`X0Z)=
ME52&quot;0&quot;0Y&gt;)(?KJW.&quot;=1#&gt;7$S96YD^`Z0HF*C_L&lt;0ZB7PJ20OTU'O\Y,-GL^+
M&quot;&gt;(\%&lt;+@=FG7,&gt;HE2!I2K[V=I8UEG?!RE2FJF-)CSCH:?&quot;R\&amp;']U_7&amp;718D5
MY9XZM[J^^'P5P;*1N(R`4*&quot;G52?(T&quot;J2&lt;=X&gt;0Q:#EL#N0]UM]:=&lt;S9,&amp;1^D^
M#Q]7AK!\@[\T&quot;:+@CD#B]7GV`_J[:J.:U-F!V-Q44*QO:O!=^8U??7H-&gt;]ON
M==9R?Q2+8&quot;VO&quot;7=',SK36:@A3=!222&amp;D[C0\YZ^U*^%MB/.'`^&lt;02D.E)&gt;OS
MRF^A+QBDED!5&lt;\Z!C_R&amp;N!&amp;U_L?H_'X!;7UK%NYDVK1SE#11F]0^A-_7**YP
M_@L.&quot;$@;(97T5:1:]O[#'S7&gt;J8G7&lt;04./F:BT/T#?T91ZOG8%2NAHR(LG7Z4
MKT[,Q?0:3&lt;CL]ACF=W.+UR+WBM6];A%AL;I584E_YW&amp;$I)=Y&lt;7/RGR,Z]1VD
MXNN\R&lt;^?)T0QV1?Y9`=-&amp;OR!BRO*$AW-8*\3CI?7!6`YS`2&lt;6TV/27O5'Z9Q
M'\6O$IM2=ML_AZ&gt;/S%^B&quot;&amp;-GM8)`I(3,P;-&quot;TG]=X([?CWGQ^W%:;X^QS?^^
M_8`^$W@%NBZ((;K&quot;O8D-]3\&amp;?)N&amp;?WY\.F3)+G0`)73L!A@-?(Q_S=,%[(D&lt;
M(7D^2Z,#!_^+[M?&lt;-H\3H,..7&lt;(&amp;W_RBJ[Z^S+ZCWH?D?&gt;?I_A=&amp;(-2_)980
M_Y1W$,XG^ED$4GV(S)DFZL:/)&gt;L%I@2.W:!MPPE`P#J45AUNG'Y%!AB9`SX&amp;
MT7.K7&lt;`!JZ4F(^,7*WZ/`74,)-$U+\U1[='1/66X_8CK*@+/L4;HQD59S16V
M8XFBA:+55*,XOH#7W_H=0BS0`7H*#@!;+7Z1GKEO&amp;-GRM(8]%SJ\O_*TP7@,
M%A&quot;`]?M&gt;LA%+&gt;XTFX?GEZB9XI30(!H18VH5TAUHBTDAA=&amp;\MPA`^UEL-IQAM
MU5Q&lt;=*&quot;6&quot;E[IX`^1U6GHTD'`FTBM($!FV=D'$G)&amp;P+8X^N.*,.-#B&quot;%H'(5Z
M\1:XZW&lt;Y[MW&lt;0P[W[?%T(['WD&amp;1D`T@L3MR;8S`O3JV_1@B-;6SU7A+^IO^A
MT_&amp;&lt;#&amp;UI([9V+1ZH.P&amp;N]2Y\0!\TD\71^``[&lt;KH[QO+'C81*&quot;?_%%UNT(25V
M&lt;&amp;1(J4FZQ=W[^3#&lt;9[4N+?6JR]'JK4*6&quot;UO..U_&lt;&amp;C`+90*-79!U$\;-_&lt;F_
MT]NX13TO5^:[G&quot;40Q&gt;.((D8O;@U&gt;;0V^^`#.[?#PX3_\B.FPVMKE[66:S.:Y
MX2,D@5@L+Q2V\]A?4\W2!=R-$YP823;S&quot;YN=Y*Q6_GW&quot;19`A9B3(3@QQTT77
MAV-SXK_TJ]TI3^=I&amp;QI;4I$\D'&lt;S!\LN/%=(\2.D($T*??]_.KSX;V_=H'_\
M&lt;?_KN3W&amp;@\=8K?_]WTW!&amp;&gt;]R/$,T$U;-Q6TL5C:#UF,@^!#N4?'X\2Y`:$\8
M^PA)',^\W^`WN(&gt;4D.!Y)#(&quot;]YZ&lt;CN3&lt;`7I,1/&amp;Q_T5U`2*AG5!P2L.AP,W3
MO&amp;.W-.C`.@*3&amp;H]HS/P.!*ER^MD&amp;,`!UA*$40J'&amp;OJ2S.6&quot;TYN!PR0''\\)D
M!&amp;XFSAHE\2I&quot;*`_CYN&amp;*&amp;)/&amp;/4I=IO3NZ908\7+1`1GT$$#H&amp;.#+M0$O\3[5
M&lt;WP[W(3(=)3L;`?D(!G#*`%&gt;G&amp;B,Y,FG7OG[5`&lt;#FPP_$D&gt;(`SD+^Z(.D7#&quot;
M7&gt;]'WJT+'2&amp;E;G%OCT'*V(Y&gt;&lt;U&gt;B:)&amp;@),`9CV&quot;0#O,/Y]&lt;['/!MU3&amp;O#XP&quot;
M#GUM=Q&amp;6X]H&gt;;D.@7L/2])H3B2X&gt;$7OI$QM[&gt;PP&gt;*8XK6CG9X)&gt;)R&gt;KLA&lt;&gt;3
MU33MWW7=;FH2YL^B4-`+^/.KW-P@F!0IT&amp;0I3%5P.3^2%3W0=Z'+W'&amp;%3F-O
MB(88R&gt;TA71V!MJ'Q\^*!_47&quot;GOIT73R`&quot;G#)#V(Y'.Y7A]BLY=R!)T`QP+_R
MJ([\$+^F0&lt;9,\@\;/T8BPNCJRUKY\`5WFCM%O15G`X?@5,_@-/%+,]F7[U`H
MJJ3S@9&amp;/`TL4WIL`2)G&lt;\$I,$281)]9^TA&lt;8B%#%$^''^,5;`0*%W4HX0)AM
M`+'X.&lt;I.?TOLFK=;A`C;+I8YK\]7S?UG5$\H8XCVSQ!PO7X4P7I&lt;3/B&gt;*,US
M0O\.*^&lt;1&gt;7NR&quot;%3BL&gt;JOI9U7,;$BJ6^N*)M)2%=9D?34$(\1_!C&gt;0TY0V.=J
M/*4?:9`/M+&amp;I!GJ]P[&amp;M\^&quot;'\5C`]A@5YG'E*JTJ@H@[HN6+[E_MDTI)M8]U
M*BH^M'A7W\_PBSIU(9CB`HXQNT*&amp;^U8*5=&gt;H?DEP?UY8&gt;&quot;3`L'`2.?&lt;Z[1*%
ML613!&quot;!MX#1OD&gt;OB?(V_*D.JA=R+&lt;Y;`MZ8P6'30`QX0_!\5G/1Y!C:RI]GD
M!P?`B12H.#T]D'F,Q\X&lt;MH&quot;8WT'BE1Z&quot;5N+!'-,6QSE_X7N&lt;2`RLHSYX]B&quot;(
M%H,Y748#(F(4!`.1M@4H`A9!D`LD)4U:CM6%RM=]MAK=A9M+%+E\5,L![VS@
MN`TH(+;)G+_N4!VB:;==W)2$E/AU@&amp;VSSIA5@R&lt;`08,0Z8/*^S'MK:]$P4,J
MY&quot;J&amp;:&quot;=N&amp;+Q\'XLQ0KH`&gt;=GUAK^;KFT@V_K9AQHG)/&quot;&quot;%P&gt;F5*K1%X]G`W*V
MFV,4OQ)%IQD=W42+2/PGA0?,CRL@K14V=II6$&lt;$OGVH8&quot;G@;#^A`(@'QRI\+
M1R@48;J:.(&amp;:],EU'3&quot;F4MUUV*GTI(]DE5JMT\&quot;^)*625S!_+1&amp;RN(]H@W\6
M16ZED%@5A@3_:P,:LC2TPO7PU14YT),,&quot;7C2(*;W6Q:XVR*\N/#H`\+S\S&amp;S
MKX80J*-*8!K8@OEI7P2&quot;1)(4NPGG;.&quot;@&gt;E.\;&amp;'H)8H:#(S?M@]G\ATBI8X6
M)X8/ET9O:P#+?=IYVK=8)T])6JWFV.9,B3RRH-WHV^\O4&quot;`R2L9PU=`HQ/+K
ML%E184Q&gt;#(5#P5H9BY!C[XAF5&quot;AOS?=.6#ZM3U#@O^&gt;&amp;\+=6;TU,R'C%ZA9_
MO37WYG^NQ89P4[;8*CO1O][/\G7KSA:)OA8/:7W&quot;E97/&amp;#(M=U207LG%N''(
M[:2PQW5F/`[ERUTDP7@=:G/GV`V+%^N9&amp;#7&amp;%2&lt;CN71H&gt;A?W5&gt;IK/)08MD=4
M$T!5VDV?]L2!/U$I4399R`&amp;2#ZA6@GP\(3%U(/+E+9!S!YFK`X:;'/%SU'3N
MJ`&quot;ZGA;.&amp;$!IJ3=D,8#&quot;B;SO$H6[O)X&amp;\)XP&lt;%65C]]'X0LU/.:^0,3S+R#)
M-*J3LF&lt;E[&gt;&quot;608/\)&gt;+7]U0QH(5NIYS)CO8G$--$/\4!(W-^+6Z!ZL*NE`9&gt;
MI/^A0=77=,!K]E$_3$C.&lt;\,0)E=DZ,;0OX&lt;)_.,QWMOW,ED]0O1'BJ&quot;?2/C/
MDL%7]I8(&amp;L,K42B&amp;FEOMGYEQW8O`*ZA,;B=&lt;'TY@-I+KB$(1Y[AJ&quot;4#OKFF-
M=[/33(N&amp;M&amp;OA5+;_?7&quot;!?831&gt;_=TC]&lt;_&amp;E8T@M,Z_8^A&amp;(EXO?&lt;&quot;PCQ']5LI
MF3KX/&quot;$(]_&lt;UD&lt;;`,Z;Y4QM03,ML2$S)U-CDZ;)0/.%J$^#$Z@10\4)NDW1Y
MWQ^[X6CVS7@=(5_XNV%C;WQ^,DK,(-3\V?6WX3C[ZM6[U&gt;C@&amp;J&gt;75Z(PDR=P
M&gt;:WV$6'&quot;9`*K,P///?T3.N,L3.,(&gt;&quot;7&gt;.XTN6&lt;LHE&amp;KD7`O_JP,&lt;%_=O[U`^
M_L&gt;XA]);3T32:92RM8I@%/BT7]3I@WZ*Y_\1\?Z_:+$K40C+&lt;FK2$B79%V*G
M-`BC4E#TY5WJ?OWKL$A0Q=8BPMRT^,&amp;L)YJL#Y@2;@2]LXT37T]&lt;8M;ZUP$S
MA'T^%K^(]B\0GG3FD99@@0+*3L9+J\3DFFAYADUT3&gt;[&gt;)&quot;486@JS30`V;4_[
M\9.N8NFHXP#&amp;GRA8B_#;^ZXP!/J54WH:L`P[.5]=,33]`D=K)J&lt;E8S@EDXH9
MR8M%.GL.&lt;%ZA9=)Z/T(_,@/*$\:$\&amp;,,MZ9?V!Z&lt;0)-V#B\GQ&lt;U-YQ$!-RT!
M)B_OJB+&lt;*JB=KA7W;S@28BH#&gt;N]#^+'ODI+&lt;+&quot;:ZFTSK@]/344+L=IYD'9E&quot;
MX%;4ZDY*:N[(&lt;YCD%9@?&quot;&quot;!!4-U?@?`'^*)OCW&quot;XU@EN3TY[^Z^2%F1('OD]
ML1&lt;N42\:R95&amp;`^?0`SF_K&quot;*S8Y:O&lt;[?4!IM&gt;&gt;6)&lt;;VGSF%P90F&lt;,8F#HG3^G
MX=0'@9N38F;MU_!-&gt;9E&amp;-37&amp;71&quot;B#PF[)%J/R&gt;T+$]?\L&quot;)YX1LX!UYNC:A,
MI_U^%368HQJ$QT4&lt;&gt;1JU?TH;`PWVI9VU_#E^]6X5P6N\.V=;&gt;XIYK6Q;A!LF
MWH(P,82S==[67,WCW+E6&lt;C5&gt;)Y%&gt;(IL&lt;%(%^Q/(@W`/^/.?YM7V/H*86V+2Q
M$=M&amp;3&lt;Y_Z#^A=JE?AGP9'L8]\&lt;%&quot;4J&gt;%9N^NOG/KEWE&amp;8J/ENH&quot;NW\()GA,%
MD$+E3+&lt;RM#99VW:(9\:]0&gt;[9'&lt;YP*O+K#[MG1UW`E88\&lt;_7GHWV!=42E?,Z]
M3D&amp;O]+GM5BXEC1VU9^8:-%3S&quot;2E303CU*:!G*=8O!`9'TQ&quot;7=XJ@P:L0WR,$
M%?./J%Q:9UYA#\S!7J`3KON&amp;7LM0!(7&quot;_`X?1#@/K8K#&lt;?LU#752,#4V5UW`
M`6M)BP+H-P0KYH;*IF(M&lt;MC%UV&gt;J$OQPV&amp;;*8-$2&quot;SO`1217P\_(26TSA_^A
M&quot;R!([T6A2)^3ZQ`Z``N.?^!4?RW&amp;VQ].^!,Y(9E15T_H`,24I`#SA/\DMW[\
M&gt;\+GD.#[%2%&gt;82CSVC?DT_[&quot;1B+1;/R5G3SGGHL&quot;3JC`J*Y5H.HQ1G2T@A&lt;7
M2]:XB2AA?;E@^2&lt;#`]##&quot;ZJX\-;:M%CY`&quot;@WD5^B*&quot;26.[*_2NW5!-0S6PH\
M]59#2\WZ&lt;!&lt;07G.M&gt;&lt;;,_]DC&amp;`(P$O/\]]36M4^&quot;&quot;CN^AM&amp;EFI.K^?*&gt;LC=^
MY$3&lt;$T&lt;&gt;7@=&lt;W[%T/F_OPB`1Q8ZL)9`=214%#:-0H-0I($\14+D,MBU8*GF.
M@H-&amp;&lt;&amp;DIY]PN46CH5M2OX.37`:/3EG2HN&gt;[1HJP!6K&quot;F]RWPY.)G&lt;!'O*-*&gt;
M6&quot;\B;Z&amp;K?&lt;B)$2GVGW+X6W4`&quot;OOUI-R?B\3\Z90&gt;_BO_#7&quot;!RPLG1+UC&lt;.&lt;G
MLV.)]?TLBL1&quot;8L*D1&amp;KM#)C=OB+*UZUL%'C%R,25H-Q9=&quot;76B&amp;!&quot;!,MYC0C!
MVG63&quot;?@;'7I)=5UA&lt;&quot;XE2&gt;U]B&amp;4B421NDJ34OS9%(*:Q\1H1J`XGXN4`-N%\
M_)_;_O#&quot;&lt;E'2@X[[E\'MXP27#/3+H0NCXUV@P&quot;O@#092$5:71+1/NZZNK(,;
M`'7$_.C]O'&amp;&amp;M+4I`RM@N&gt;*M)-8W\SOP;87'\\=@JTY9YG4Z1]022QNPCZIC
M1!*G]=GA%&lt;!AL!^%&quot;%32?[=X9ZY(CF$X`X!)R+9B7.J!+W,M[INM#DH-^*NT
MB(,_6(O;\&gt;;&quot;\M*T%Y,E@U.`JI@IZJUUWC&quot;BV]DI`R:RE)/PR63Z5&quot;KMC4&lt;F
MXGV.[5&lt;MQK`@4N#?)0K3,M@R9SP(2'7XS_X8)27-F_#@AG-&quot;K/`;X;B4:8UI
M]:O!GC4?KO]Z;8HY&quot;ZF^P9COFA8+]28,PA=A(4&gt;XT[+(&amp;&amp;)&lt;=&gt;$#IX176K`;
M&lt;HK*!SKF8B&lt;CA&amp;9F&amp;MH)B/M)'0$J&quot;#_CY^0J@5&lt;0(S)T]#:$X[:R.7FZHF^&lt;
M-V&quot;&quot;@&amp;!D`Y2)][^19$+IO-A0D\`YY(L`*I!3J5@B\%^\:S=28%XDZ?`=R[N$
MAW5/)+IOLU8S)]4(A)U/`8K(%=ST^T#N]#HP]_+.%86&quot;/5ESCZ5_?(DSUL]7
M$7!#918\`^RC&amp;B:4J/\Q2'-[9^SWCI2RH;%&amp;WU&lt;?&lt;(85)2_VSN$(_GC=R.8N
M_;H;/;HADO3W^?B?4&amp;?&lt;I_PN8^OD/'=2!R^OR27%8D8@,4M(\,]3SAB(!#LV
M+YX:]K!-[3M]+0Y@G\H[.8FDA)443I5Z_&gt;'B.?.3!Z4(X&gt;?8671&lt;11A=&amp;:+9
M@*YRLI;O.?HPQ)1#!YO[YXO)-E97$6_PS&lt;@5X@:/D+Q$)T_63:RR,HU&lt;#!J(
M(BK:!,B[=T8H@5%ICX%(RN&gt;I&amp;BH_FD&amp;!-U$TN&lt;?N)Q27*)@A0,U/@L#N.&gt;DU
MCQK!P(!3&lt;'(A&quot;5LDF\7E?39XL8?'`5?4&lt;.?S\U.C8MYF=SA5T13H^I(#?Q=.
MWO&quot;56H`3,G85`XCT1B5&quot;1I1F2/L*U0!CF$5NCMN?*]\F&quot;&lt;H'YS`_OONC54[Q
M/B=D8R-)5DS$S])-!CSA/TV'M&lt;L,%=Q7IR&gt;'QD&gt;=JT^5@T!R&quot;]W&gt;&amp;X^(3-.K
MP8HLD1C^SU!'Q\,L&amp;Y&quot;/-YP*3O[!;R;5/OFBM8,77HCD?CDDRN:`.19KO_1S
MOG=[^A)%)&quot;SC^;&gt;WQGQ&lt;DS`4701XZT85A`=*#8(,!CBEH_10:OC\QFY23T:/
M$(%UC??W&quot;,FPV2I]SP0W(,IY/S^JM#L3\J1#Z7X&lt;&gt;NJX&amp;:&lt;KR+_/5&gt;YQ&lt;?\S
M[:ET1TBKBG&quot;`/_\&lt;TL,&lt;FHD&gt;@\3!G3\:JQGB2J*E$?XH1856&quot;`M&amp;N_FP$1;&quot;
M&amp;\F8F08B+WM1$`:4,#%9(JA.&gt;&amp;F9F55[:\-S]R&gt;)5C8\7E?;BH**Z?U-+,\B
M&lt;&gt;!S&gt;]`N`1H((-/'TD7I6L-TCSL&quot;OJ([:/G(&quot;R(@3P.AX9-;+CNE!D'YR2Y3
MOPO@VG`#(OJP/DMAA09$,`5@(H1XDNM@;0:(2$?G-4+$A^%)MEE9\=[1&gt;+]E
MKXT!-RT])#\$!7F10=!,NO_SE)I+@[[2A\-^_RZDPQS[,C8KBG[T&amp;/TO(&gt;$3
M)Q76&lt;L]XSU4%!$2)U&quot;0BPS**WS$M_W&quot;KV?GNP6J9UVT(QQ!)QIE$[@/B)Q0&gt;
MZ!:V1KA9$&quot;+@+,$LE%&lt;^0)Q)3`UV7ZU5ZAVS&gt;R9:6SA@=4M96!S,@)[G[$X.
M1TL79?9$O&quot;?#0$CP]V&quot;M=T$`?.%:PCA%`8^!J0.^6/%*F9^]2)[,4%SN#1LP
MJ,*5PX3%EB'M8%V4%YC-,&gt;0`SC1=;ML1.)M[&lt;DS&lt;TGPR;KA=WB9IZ$RYH0\(
M^?!@Y&lt;?T-B2.1_\_$8S[EW/2OQ+;[\`UW*-[K+0C.00PZ45TWR!24*IGDL8L
M;E^_-D(=CM8]./(D:=#@F'//8VAZI&amp;K^RO2UJ#T_!&gt;4WAH[PPH2U_J#L!6*`
M,IHOIUP=\;04?2*K,]2X&lt;^3KQ&lt;EY`70?KUF#J9]LLY4I3ZTKB7+@YC(%3_J_
M(QK^FM-U&gt;%$-1C5\74J&quot;EW&gt;\A1?O'7Y__^9^JRFHZVK&gt;1:O,9'Q8RK7?K5IB
MO+KZ:,F6U&gt;:DJFU#B29P(UYH*_!VZ'8UA#R'&lt;^.FM?&amp;R07API%9*\YP7BDML
M\?R)J-UQ/RP?W&gt;_8^[7CA&lt;.QFW&gt;=0,)&amp;\(PT-,0FYAMQ&amp;TVK.UD7]P&lt;-1]_4
MBK][MQ#=OK\PM&lt;VC8'2@:SOD-S1PW9I%:&amp;NTNN7[*`:5NP&gt;ESEP5C?VE4/&amp;I
M0\S4Q$#W]651[%?&gt;[(7&lt;.C*TT!\DB3)&quot;6RA%!@]E8O#:$Z5B=M&gt;$/'&lt;&lt;XCD3
MS72J_1&lt;#,?R0VAM-1!A!38;&gt;%9&lt;DEIM;_*SA!$4\R$GA:OKK&lt;2/[D6Z!^3N&quot;
M0WRU&amp;XG?=LR+&lt;US[Y9\;).N]C)I,3Y5;YYGEE&quot;4/@FKSR2Q'4CX9P=`@5E8/
M7CQI@77&lt;-R9Q(0A#`7*MI3E(*&lt;*-LU%JG?,=JQ4G95:A4!K2Y-@-IEXL=:\5
MWXAGHST&quot;GA]29*5]1]YY*FB-]1M0=5C$NZZL%*?IW&gt;-&amp;7@:8`D%*_R1UACHJ
MFM@;.RL/.KP.`K5X#(:G+LZO`V&gt;L1BKJ2Y;3];SU`I,C*K=0N7M8'5&lt;LMWJL
M&quot;TV!P5)M#MD&gt;GV9S4$S5/YODQT&gt;;1+^K\$A+N]+F892#Y6B_))0``CA*.\I[
MQ&amp;'0\%L(I;]G'J-VL`.O/6VH6OQ;WWQ&lt;P+.^P*[@+`V`%E!EU7NO;&amp;9;M^4,
M$QM7=';&quot;(&amp;(O&gt;W/W:/,&amp;=&gt;M;*?QN%HR-6:IP[6V,TU-XD$A51I)&amp;^&gt;Z.%%.?
MB(O\LMWA&lt;O;Q[AI;%)QAB1(I&gt;ZTZ&amp;ZC\HNE`32:47H7$S&amp;`S?L6&amp;H&amp;9_.EE@
M)U&gt;9E\GBL??:8MD@N&quot;EX2?(R^'Y'[5CKH2'UU_7L@=4%9F]VL4NE&lt;=L'OP;[
M=).CZUO_RQ!9J\[&gt;CI1SO0[]F]+-XF*CZ=D/7F:Z9D&amp;=F`_3J]ZA2_4BTKU\
MJ\$OA_=0G$1-GT]K!2X_WM00`-)(=&gt;2CT&quot;&quot;NI#3D#B=5^+EJYW^.A@MR6M)I
MI.NDPA@(+$0HA@JB&quot;(9!ANC[DDC,P6570%O9T)@&lt;TA!HXRX[**&quot;MB05'8C*3
MD)-.?.\V*']SVI-/1X=37LZIHZT]787M)GVV&gt;75YH-]&quot;F!.$[J\I[B,F=BF@
MN&lt;RE^KMQ^&lt;-7+P&gt;C&gt;?W5E*[1W)FT%VJ^*?D^CO95R8R&amp;V?4%]86-R0Z.\E*_
MFRITBCIZO`0K:OYA'HQUW%]^6*D.7EUMNGB&lt;_[D%ZSRJ#-SS6S7@GOP]UGZT
MY_#[IO:62V*X;'?O&lt;?5Q=JF&amp;D^R*Y?ZNS3&lt;N-/BLW'AH+/3/0$-'`/%CJ(AQ
MM=;IWSWQQ`_(7^.F2UA@)QQ:!!8&amp;N+2)X!DH6DX6]$S#Q//4^&gt;`T,;%&gt;6(M&amp;
M4PH8?`:&amp;@I^A,PKFK%@$7\ZN&amp;CB_J5Z5%E_&lt;JQK'Q&lt;22D_D(T--B)&amp;81X``$
M3.Q86*K1`!T)%N%=/4X%;@5NC)H5IH:83;)HHJ+1IN$5&amp;4Z0\H61\ZWY8KJG
MO*G&amp;77)*W&amp;.E#WTVD]FHT(1%\N&amp;XJW1]T%T=SM3L,G)Q!$$4;H.+'7!@?7'J
M&gt;J2AWG;?]7!9O;;YZDNMSMZC_T/7[&gt;+AH;28K\6J^&gt;K-=8'S[Z$IW=C=!N^5
M%99FKM+=S2(]?#3K:KW5::_)2-)$ZD.?GB0V4E8-MN?/)'-#@\LY*P4X'(4H
MGPV\('\A_D)&lt;RB&gt;]U).LOM[S50$`#N]ER+UH*FQY$*YGKSB&gt;.7?V*IO7#Z4E
M&amp;$72@DQ6^8Y_:&amp;H/0(?C&lt;JASL/,1+;2$H^2?9(`Z'QERMMU5%&gt;_(R-:/#5Y=
M!`2_3`FH7J&quot;U%(L[4F)S+KB3T!#\HW^#S9G3,J]76)I&gt;;CW=F21OXE&amp;=_W#4
M_/![N/KQ=%1ZED&gt;US:-6),1AW8*^5SN?E:/L_HKE(;A^^Z;U*C.3(]VF6$&amp;`
M?6CW=^T(S2U[@R.30L6![)*\S^YN*^C=:13]=WCLRJ[2@6KM%/MW&quot;SWW.CV.
MU9ES%WTW^2(,E\[R(HRT138**.[Q*#ZU67%AE;&amp;&gt;@Y&gt;#SAW&amp;L5%-G@X4'!Z^
MD'N@[VK/0X$=GY2RU-@&lt;S#G`JLSI;NP^\%\!&quot;?#,.0/TS?![N9ZH&gt;.4WTWK;
MGFN30&amp;=`T/E32O^L&lt;0&quot;*`E`&amp;T`AD=`$&quot;M/%I@-JOJ(``&quot;CM\T5A&lt;;J!7R/2B
M98?C.&gt;/65D8&quot;SA\9$T&quot;0SMBU^-%EG'\%.W`GT,C?^=;&amp;;]O&gt;)9FF:WR\YKO*
MSM%HK5:'R,KN^&gt;XNSUUEN6?5?XP;:W]-9PYG?L^,:]C*#\.'!EY*-S5&gt;K+)4
M%SD0E!@)H1]6US8-=:E(PN7*:]`YU,HYXZN)+#+?R)]VW`&gt;Z.IHLS,QD%!85
MV3C/9[3JE[I4+5XNSKBN.KJD)FNP$?G53F&gt;[(W61#T5HWPAU:,5]C#M\_.KQ
M?[TE?A::E(1(&quot;J,+(2&quot;``E@SM8T=^G%XH9.=*']Q?XFE2H+XD-[A'Q,OACJ[
MD'JE,I3.#4W&lt;;=49&gt;JIZT]/6Q=JM]V.&lt;1.[J[.($AO-*Z!!:;4*XG:*RJK5-
M:;FMQW5*D%=`P*IT;BR(C&amp;IBU6!'.(U&gt;4%!5X]OJY!VUTNI\YOQ-D,-,BD.2
M/&gt;&lt;DXG=5`A&lt;=%FUKT'VA2@AN@R,7%!4--XP\=N113YSUY:G6+Q&gt;NY^7TV\?=
MW?(C.-&lt;SF5CW\G/PFN8HHV&lt;SUZ&gt;?RM6CM;G0M^&lt;[YB5XH,GJK**Y&gt;3@ZY_H]
M-;3,&lt;WYY*ONXLNKON%NA7\Y=KL;NB,K]&amp;__ULYZ#=9+4SWX.8:$2*?332'B-
MK(QH+&gt;(9H--&lt;E8$`@4+R56(K-?]=G,H3Q5'?:K01XYO.M$GDJ&gt;@I5_RR^^['
M!25*:/;&lt;28E@GF%^1L=.*(S+RR8G]^VMK;4KG@H&amp;#A8&quot;KK;KIP/W&lt;_&gt;:G:&gt;$
MW+Y?:VGOK-]H&gt;$CXE3]=M%$XI6^_^ULGKT6^EED?&quot;L!V]0L+JXT+&amp;:E3[Q63
MNKKR5VAH]`STF]3RBC!)&amp;%]\&amp;AE^A?&amp;\\&gt;[6^?Y4K_XWDGOFMZ$`)4PQ;Y[=
M1@CM&quot;73*?P5V&amp;SUQ&lt;F/&lt;F)'#S(*&gt;;T/R&gt;=?Y-/Y:1^Y#=6=Y==G&gt;II65(92S
M0P00+`U$Y+%_,2RTM=+TXO#&lt;PW9\=OX6H9!&amp;IV[6!R+FC)O?&quot;AM&gt;Z2PX6LR5
MK/VGH?$J(J*;7R?9JD1WU]XA)2MN,:E#]&gt;;FP+NFJ@#*Z&amp;1G:&amp;CJ4FYCZ[G4
M]-6FX&quot;P[IY272H2%D7%]O0`=S8GU(/9@7$.S\2SL^N3G?)9D8M^SNQ.&amp;5._W
M8[\[Z\L:9,\KWMSN3&gt;E4/E0_5CV@+Q1&lt;?**L_5V^?LE-HIGGU*GB&amp;QQ'0$#C
MV='Y_;N0CP)XR-(GK#N]3(A&quot;Q*FWC^/SM/4'8W-C7WOZT&amp;0C6[ULFNP+%?O.
M%#1B9AS`U)&amp;T?BK_2*IL01E\BSX(N7(E\$HQS/MJ-8V.P3:E/U&amp;E;&amp;C;S/%`
M*PKWT&lt;8&amp;0=Y/)T&amp;:[7VSLG0_^`&gt;]&lt;([P3J:@T`_\Y53)097,^;5GO*)ZK*FR
MLJ1%3S\DI-131]AV\H^&quot;&gt;+#9ZF/SO'++HN[6$06[+!0QX2ZK$/XYVUX-7E\/
M2ONX(ZJ*#B4GAW\Q&gt;/WC=D'J(I5&gt;B.(?K,OOB^^]Z2V7I9O2*P&lt;1EL?&quot;&lt;W&lt;U
M,&amp;MD3Z'%XVZ([VY1L@/&quot;D,GD2RFLK&amp;'KPX9W4X;#%S/*=S)]T451Z[RYW1'G
M]_?6R4;6-B;F1;KC2*2S&gt;AV*\&quot;`[!&gt;]/L:WV`_L83=:(447Z%1';1TJ!-!IB
M`&gt;Y*@7+U#8&lt;?5'7\]:,L/&amp;'82=YCRMRLK/K:.K18&lt;M)E[S6'AJ,Z@Q2_X7Z5
M0YI/J9\U&lt;0U[&amp;)&gt;^B^MLW7/]S8D6&amp;US.I3+8&amp;SM5%H[4;;-;G)TWBI$9&lt;7+W
M6'L4$9*H6.:&gt;U3A:[NA8E)0TWMZ^^!(33W.`-&lt;G+^4RDAOXG!8UC4(?55&amp;$Q
M=TR]\L1&lt;V:&gt;4Z-?V.P9JQ[PO&quot;NU595O(2V*@,%V&lt;&gt;OY)7H2&quot;KI;O2?F!3GWE
M9-T;M=,VC0J+D!`NH9':JLK.BI7&amp;&lt;[^SD\GX8'S3%@MC8[W&quot;*)M2],O&amp;A87&amp;
MXZ-AA;=W!5S04'*2/W6E5):[6:#`DF;EI'6&quot;,R'^_8K6&lt;O,TDK7XUA?]+F_8
M:RO::\5)E4K:EY8NSFAFBBC&quot;N9D9U(996XUK,@HO-9&lt;RJ22D5AJ^Z5&gt;4N*I2
MU[YYPS\S=,Y.VA'LYYIK4/2KZ9R-&lt;;U2L%#^&gt;\OI49?F[I[.O&quot;GWCN^&gt;AA\?
M-`Q+'9(T(J?`J*[&gt;VQ]'L;!=GI'S&quot;^GB(\K*:B,%@]YUF;1U[3\NW-L=YTN%
MG[&amp;^H4%G&amp;]/-[%O$)LU[H(@;3W]V-N7^&gt;V1H2;!&gt;07![(CHD\'[YWI2?YJ+X
MO+MK&lt;?,BM2A%;UN:HMQ1*&lt;@U-X,:!2892W:I75H:J4UHJ&lt;AZ@('+I$6%1F($
M&lt;&amp;,+)'.G7:?MIQWDR4JSTYPS8@%TXX7:N&quot;3]W%1K^U)[S$(53#8*,I+2'&lt;5/
MBC`2*`:9$&gt;9[K,IXK/VR*71R-#T!P2D!W;WRW;F4C?-6]Z#`Y*'Z:9UI'B&amp;1
MGF0-#L%S\;3XBI%GS^+D&quot;2+H::.)*!9!Z.@&lt;SZLK!S%;&amp;J_]9H&gt;4]?+?S_L7
M+OL/-Q6R&quot;=:JUP]^SV?$B9Y(E`O_5*.,H_-UJ$'-P=5U#;7.26;%9,NXA:6P
MT/5&quot;JG6E3KG&amp;6+T'9*A*4&amp;&lt;2L-+5YG^S/'[*8&lt;(GL,D]73E3K=]@;-#XY6OP
MN9#B`PQ455M;R5'V*J=&quot;`OF/'VKSJ63@Y;@.@H\'5%Q=R6I35&lt;G%&amp;1G(EIA2
MU=A8;TETDO7=&gt;'(R44!#0ZZVUW8?URY8XL:8'&lt;_OQT?(X,]8[(9*(4DW&quot;^?!
M5,6CQ[;'\KQ&lt;+B'=$TBLD`#$AR2CI\?&lt;9EUQ_&amp;AF9M1$L$&amp;P?5G2.;AST55K
MW&quot;#_QB(TN';8.:S97N=AVF_!\+;LLERZ4F=B$B8XV=3DR%C,B*@/&amp;?\17J&quot;J
M6):&lt;@&lt;#!&lt;ZC5*#5,6-2DU,&amp;Y=*6?4+G34T#3LV@0+,JQ\/=+?.=W=RZ_5N;@
MJKI\;QRWC=4%#9+3S7CIZ&gt;GPG3&quot;C&gt;*&quot;@;V'&gt;P7YCNDP^1#^M*B]9H8.:]@T5
MW_IN:]1Q&lt;(-%W)B!`05W[%]7O2&quot;]:P;#:&gt;H___`''4_9M8)IV&amp;^D^+2E=Y6L
M&lt;#&amp;6&quot;+Z]2L?``6MB27'[FW&gt;E)K5*.]SKS4Z[&amp;F0'MFPR_)Z4^TB@KEE5_&gt;M)
M3Q/)U;W16928JM23?90H6[B1O5LT7I1:55-MI$&amp;%3DZYS(XOOVE@K]_Z&amp;AE)
MRP&lt;M%ZIJ;;I]G`J:&quot;5FY&gt;.K(E7*Y06-M3(=NTF)R)G:O=+V07XXLV+2P2G4B
MTJQ,G!`O2X&gt;G1&gt;'FI!1-!U_NI:8493@4)?NOA^@89)X1L*5TZ+&amp;56.DDO&quot;IO
M80_DL&lt;YP@0CMZ\^H*$_I+.IT[AN7Z5NG6.OK_1B3F4U&lt;*FMHZ+(V&quot;/YU[W.'
M8MO5V^7DF5&lt;?NAI2*&quot;IZ$5-']Z#\Y]P+,UVU*K]F38+N7&quot;XX+9XL+4SN%%RR
M5VX87X5]WA4\&lt;U#F8.;\D&lt;FJT-*IMKY6E=_QBRPHFO#:_V&gt;W=,1,2KE^I7'A
MEJ=(HW+\R\:F4;6I-Z'P`&amp;?W`]W]4&lt;Z&amp;!@Z=8:XF,X]H0]9H:XMSQQ0ED3&gt;&lt;
MDW&lt;T=[\(XJ/E0G:$8(Q)7VGQV&lt;?KFW5E[6E5592\=G?A\&quot;$-CF_.Q&gt;=%-X&amp;Q
M+8R-6&quot;3)K&gt;8)N!CI;'&amp;UR^8WV=MT!E#1/?%`C\J&amp;CK+N@OR#';NK=DY8,UFL
M.E`.S3=`W034%D0V&lt;^K&quot;L6[T'N=D\L_L]5+U_Y2#4N*%B?&gt;N]5,*ZI/L]Q)&gt;
MIZ]FG36YU!V:9;:7[TQ/+]ADV^:&lt;&quot;8NTO4UX[&gt;YPIEL@\5*%CF^D?IBAO+BR
M]`;MDRK!73Q1\R]#;=:!!*VJZJ-ROEZ]WP6..*%*2:4VS`91B9L%!((_TDQ_
MR&amp;+*?I+]'A(B6VC3$:@;1#.N9]FF7C99U3&amp;UWZ#3,2H(',PLJ@GNS=:?G9[D
M56'0W0RIYNL.OT$+:)V'#1&amp;$,%(%,/*_^@..CV&lt;4S$H&amp;B_G+;:,^S156%J\-
MK&gt;=[)UDFU'S1&lt;;S'*H&amp;ZA&lt;D_%&amp;_89&quot;Z;NWN&lt;OJDLI=&lt;V9:(/S=BST.?!QOH&amp;
MTK6UM5^C_Z51-CMU.G7Q&lt;'MP6S4A,53=VL`Q4\Y&gt;J7Z7RK#!QJPLF)I&lt;9EQ)
MRV_LZ#S-B;$0&amp;=4(P#09E#&lt;'H:HW7EVWPFC((%T%JC^L(&quot;#&gt;T)*,(`D#7]P[
MM4R1%&gt;#&amp;R2&lt;@Z,!0_!R%IV&amp;VO+`X:[#Z&lt;QT?C.S[]F;Z_/:!^J-IV\/1U+GJ
ML(H.59N\NY%1/H%JZD';[JQ+]4Q3`\=TN:/IGI:&amp;\*QKG?JTAKC_:N,HQRNE
M&gt;WS),E;IBLFTL+5/R'(]02'&lt;A8S786N=U%D6WWJU&amp;NL_Q&amp;&amp;=M9[/[$Z=!ER[
M!F$^A(A7)*`)S580&amp;'M6OM/!3.;BXTNO\G_].J5R^8K&lt;/^&gt;:IT71BLSW4&quot;FE
M/R*C:*M__@SW5N&gt;Q[-*U8_'6Z699&lt;%A(=;KI7+]+=4I+N'T7H%U_4#$-:B#8
M$A!J(I0J&amp;T9;&quot;WH1/UDG2&amp;R+%,6F:U6.8[^GI_W\#UY&amp;!-`?5VI%G(/AB*;E
MO5!7C;L4#!6N.&amp;(]YL-,&gt;[F#F:]97^HSB.(=&gt;Q#4+&amp;A,@MJG:CK+(DU5=#E&gt;
M79F.TT41K@E/),/H]!_VZ]K7FCV'PTYM^C;Z^M9&gt;GW*Q&lt;E:E6&quot;H[4??)LGK:
MIXQ6(*/IB`@&lt;5U#^+W$S]J6[]ILVG=IYP4J1LJNJ((Z*&lt;H=R2=5HGR[H8WZP
MC2VC^(Y)DLN.;:'YM+]S8N3%IKA^-'E'&quot;*O,H'Q[[N7J0_+LT;3&gt;HY&gt;&gt;7DJ&amp;
M&lt;&gt;9,Z&lt;Z@A;6WW_)!\:%)AU&amp;UL;_YGLVIR)`&gt;G2KM`N/:&lt;^L-+R^]#0/Y2KM&amp;
M0DETR%99$M[&quot;1ZH;'?(&amp;+PNS]W/U1OS$*Z&gt;.Z*$0&lt;,]WQO_.7M*5Q%/V&lt;)J-
M44)A6&quot;%/=Y^`M!XW$1PV!0&amp;S_&gt;(3?LGDJQP$1$#BXCIO_E.^N)@M+^#&gt;U;?O
M*%U(K;)Q/C)?:?2=MT]O*?0SR\V4M?Q2F.#[-&lt;GX-_)W=P.=$'T9E?%0%G%&gt;
M&quot;5CL#@.`R.&lt;BW]K!_2@=6!],',!(-OPMK^M)A1IL:H&lt;6]I?Z#2%!R8\^\O3H
ML7+OX@TV-S[X'[HT/A,8[PMNHR1K^E1N&gt;)FJ\]QKUNS#0&lt;.TV073^YTB,LDF
MWZ*\*,J7AWMZ;3T[PK9&amp;X:HDM77)O^[NCNP^K?;&gt;&amp;QL5-.`7L8W05:;0E3'Z
M;=A$;1%N/9937@%RTVSI3CJ)ZO@WK3==-[QM[T]RFA)[&quot;VMFIC4=;;)IT7$Z
M]%C(I&lt;'6T(A/$9+;=II(`B@OP&lt;2&quot;AT?WKN_TEO,+SSTN_S?NHQYJPTO##5W&amp;
M&gt;_[.3DW#7=5/L+G8&gt;#`&gt;-:PA6!_!&amp;38;7@;1KG&amp;0&quot;0@@ON\&amp;A;C+OP%G(5B!
M1`)F`Q1&lt;B*;&lt;6&lt;W9\?6]BK9VL';0P!7FBT_2#65^&gt;M'2939&quot;ONGI38W.KTZ4
M&quot;1*8?R8A*]]]W1E4&gt;;/;NI-&lt;:IP&amp;E]D9F8'Q;BB#HB3G7T?C(14(T10^@O+&gt;
M:K]S\?]YN/_?1@B[7ZBO&gt;V'5&gt;F+9B(,+?-0XN=!^?5D\R.GA7@.R^!*$R9Q&gt;
MF&amp;K@&amp;FP&lt;-'U4)2(H7ZKFZ#*L&amp;P.0^)J$+B(HU/-!,+(C))(]7D3'D\@N-%20
MED]T&lt;T/MH[U&lt;W]&gt;%%]&gt;[-K.NJ\%MI?K+!WJ5A48[1H[6J&lt;6V!B9&amp;EY&lt;7YX6=
M12DIK1W7+0XOPOLN#-4^#[F3ACZ+J(#=E&amp;KO0WZ!D!U$^F'.@==!%TF2B,**
ML&amp;L'TY8%3$)&lt;\TI79]?XAYWK=)L%_&gt;F;A9OZ]3-*P4QL4D+P#W1,$`':LELL
MZP=\O&quot;&quot;G4ACD^5H_X)0EDS4-V$&quot;WY2`#,L9O/[^BM=8UM(I:5I]E\[X-CX&gt;&gt;
M1.E-ZXUJ3=;O-MCSZY;CCQ66,F&gt;E&amp;^&lt;&gt;]YD4/DSC2.66Z?SG4%1JL.KUN&amp;R&lt;
M2,B=XI&quot;%7XOO$.]&quot;^Z+@W3.@4MSS^*H(!J828%/41R_F='[[/K_Y@32NKZ#,
M_*8+[/&amp;I/P-_AV@J[8KPYF:UDJN2U:.C\C8@%04WK:_37;3@KR_[(&lt;)?O?CP
M^&amp;T/.$L0%3`C&quot;#HOOW]\?'&amp;3;!?IWN$D!I*UUW,)&quot;NQP\H`C9.\GSSIJQ$9C
MPRD2$B)&quot;B&gt;AHD&gt;'S_F4=I&lt;K-.'A`3YU%W2.^&quot;P@!NGE+3!&amp;^I@`62-:2ZU`I
M9%U=4V77#&gt;;&lt;42MU'.^6WJG[4UQP4RQ%TBJ6;%/7&amp;[;F&gt;,8*&gt;O_OWUJG8ERZ
M+$E*PW3$'*RJ:Q2439-('`&gt;&lt;X&gt;#*D#^?%9^I+X/4W$%&gt;L_`-X&gt;$)2\R)S@U2
M1_8MW3I5?NV5UUG(L*=@,W?8Z7$PL2]$/?P:U1C`;1K^?&quot;_MJN9_ZCPT/+1T
M9NR88/&amp;RJCP&gt;Q;F[4%W&gt;H/&amp;&amp;--_?C+^\7Z`S6H]47Z99&amp;@-/@4-'D/7&gt;GIF:
MP#P8;WK&gt;S\#86.?SCU(=DII._)7TTF1G72C_#U/N&quot;$%:'`QP1#Z*.%L#Q?@1
MB(-@-DIA/G+!0'$TT,&lt;5965E6K$:814Z!CDY.09:&quot;%WO^V]YT:D$E9+&amp;E&lt;%E
MC^4/E7K!TQ^F#0RF5QJ4_:;UIO'''(([I@W\=MR&quot;KZ$4?2`'A#JOHS9(5X85
M8$1_&amp;ZF'QBL(0Y2!)\*W3B;J%_W?*07!P#C&amp;$H+=Y&lt;^9N;-,;9)]C:6&gt;FE44
MFM?SZPX+!^&gt;ALZJ+[OS::\/;@P;V,36W*S&gt;8!QEGY+TU_(_OZ[H9?8$1)[.R
MU(:1E[VLZ*=T@Z+-YJBAPI29U[X54LKRRE$$5H*2)*$8+\*C&lt;\MEBQ*_H_$4
M?9D@E]SU&lt;[1_(_=;WZCHFJ]55ZALGU2OZ[(-;ZK]L(_SZQ0(1R9&gt;N\&quot;N?YM:
M$&quot;J#CXX546,9$B7YQ2N;L0?!2HN9S*X.QA#CR&gt;GFI:TI*!3DY&lt;][?KMSKL&gt;#
M]'&lt;=0YOC[.&amp;D9R^O(4/7H^&lt;UP2[E&gt;_&gt;&quot;G5B00)0)4O#,26^5O;$ALK`0XRLF
M3)CBZ2H&gt;7)S%[2&gt;X:\H.MC1K.5&quot;90,[WIF\OI!DN%XW#;M(;G^&gt;N?KL)&gt;]0W
M'E51-HE(G=YL*'R;5SS3^78MT&quot;)UK7USKM),&gt;U%?Z6S&quot;S%%A[Q75EH9`\QC'
ML=8C0NTM7&amp;YJ`(U0@1&quot;:3G:R,PH0:F//WOL??],9J3B!4?'B:DZ6+0OQE\%Q
M&quot;8A/L#Q!=+RB&amp;CT/O,H$&quot;&amp;I0-1*WAI4/`Q,,J&lt;B3!&gt;$0#K]'(Z/(&lt;6S_V14,
MP3^33NG`#^EXK`KT7WU$_C]02P,$%`````@`G&amp;/'&amp;N5*/*M1=```8G0```X`
M$`!U;F1E&lt;G=A=&amp;5R+7!A;%58#`!+C7XWZ(@3+)P/9``UMP54G,WO-KRX&gt;W%O
MD18O[E!**0[%?:%0W&quot;G.+@[%W;W%;2GN[EYL&lt;7=W6!;8]_G]S_?EG+E/)E&lt;R
MF3GW)),@8&gt;)B3F'D(BH%!00!^0&quot;O:(9IA@???:06))\,:93AZ0=E:10=+A!S
MDBERYFNT]$W:VV]I^E?(XCS?&lt;5W&gt;_G3&gt;_;#Q[L%`MDM?D?OAW=;;=ZY)6`FD
M1%U?-'`+JW^YG5AM6TF7?+&amp;SZU&lt;H6&amp;W]@I0RL$A/PND8IA-!E*19&lt;//I/'2X
M,#&lt;@071F+[0T9!.G]FV^5`]HKB(-V[0,4Z:(T2NT%'-8WKWN.$VKE_#YLQ;J
M=*'/AWG%LA!&amp;K\AF3*_1!OWJ,5&lt;LC$&quot;H@.Z7`(-R%$V\=$6*H(=?D0&amp;]6F[%
M/GPI/*A2Q*1(^66=*@T.;&amp;:8=,QLR!Z:G#G'A_^MYZ&gt;DA:I7TBJ1$&amp;%LIO4=
MTX2%#7F;=)4HY/C[?V;^)*1(N&amp;5T&quot;@WR_YGELK(AJVJ&lt;)1WG_L],70L5LTB4
M?5[O?]OX4XIYJ&quot;A@7'Z@@?7Y4ND;44#:\9&quot;66#%QV&amp;;![[&gt;FO//E970Z_R':
MWX@V,X^WM4A*B,,VEK50F4I:#&gt;X\V0H(4PB?R&lt;'];,B[$&gt;?PM[Q'W(5TW;*_
ML&amp;4N+;S&quot;UC]EH\]A;6Z^=C%0Y-R0=/?+$&quot;8=Y2+A\0(8XY&gt;8-?.?_*BGQJ)I
M0I`VS:?]*)`#\B!=4QL7&quot;&amp;YA3!0`'3(Z-CXQF0$=X#$:0,214$:]W7/PYS!)
M4!^@]VXS/H!Y&amp;0F`-*I+H#*2H9XR$&lt;=SIWB7[:%9K#--_$NZ+J0D/E;&amp;I#0$
MO9BWYG6\-I5'E4N2,I`038%3A!2ONRP91?M;IW:E^I79`![IAG:[^I7Y`#XI
M0GM&lt;_:HH+/F?DU,S(:_$=KA&lt;\!7G_`*K.]9%P&quot;`YJ9G*H.%&quot;UW7MW&quot;G5!!99
MHH&quot;28O($,1G!&amp;BQ&gt;0&quot;L_F$`ZBI`TPR6QA_B!1`F6D!WZ438PW1'U%R$IQ&lt;&amp;*
MOS5:U8IFS?0M&gt;`R8A&quot;)+Y!]24X-1C\`E&gt;L]3(J*FU_$11%(YT_J^DMRC23A1
M+^[[AMJT)#3=P%+VFN(VY'*\/Z&lt;08#%-%#R66Y;S%=E.2D$R.)?OM\D+VN=\
MH$*:V@.C\A#J9&lt;&gt;(TW3?;6%)\C4CA)H&gt;BZKK55QSI5,HF[O/N5.Q%HE)@9J&gt;
M^D^#7-,E1%(?``X[SR/&quot;Z6$`K&amp;,$W:V,9&lt;H&lt;#[*&quot;&gt;$V/'&amp;HN68QJWE.O2_NY
MUW3R[RN]EOA0RVK9=%*PU@K3\FFVEI=N_=L+&quot;9LNGEE!D*B=A],EL'K%$Y[H
M%M-$4%:#$:]D.?476+08])YN/P0M&lt;X8Y=LE)NZ50WGH`O;YF&quot;5MGS7`S5D3.
M).=I@P:!]:86AF`Q&amp;!@9^'3:DMJMF/(HLO`='_/OT_:V(LX?$F\=++\&lt;3:P'
M]I-4?B8X(M3J((-TJP.;_/+QC\X:%ISU&gt;?EH/&gt;^)F]VKU!OEQTX!L$O_KBX!
MT#$V`_]T+MDC1@K4T3(Z&amp;\O4&gt;WC*`X3EPETO3.9J1SWGSLI]71#E;?$SK7W5
M?K-4H]@OHT*:#+O&amp;AW@4?[,VD7T&quot;CGS&gt;-A&amp;;!W1$'`+17C,&amp;U[$9#R]#OW=^
MV&quot;LP[=HQ2&quot;?B.&amp;%_=80=XT18&amp;7:**]'&amp;^Z)/3(L.2&quot;P'D4DQ4'&amp;C^B1DC-8D
M)60RE$3;U/0:/DXV7D8ZIQ/J:.HG1UIFYDD3_W#W%C!0[&quot;[,2W@)/=C2ILII
M_/UK&quot;Y2V1EH@?I218K%)?Q3E&quot;A*&lt;K$T_4OAYX'/1V2D$77IO0G0?UZ(?Q7CJ
M;R\3^A;(JVU3VU4?I9IS.J,(GG\0)'N48^LAQ.PF8-!X5?_:,O-/[&amp;O:SHA&lt;
M2RCEY\8.-$QF)A4E+Q4+6P*I=8[&lt;3GTO8J&amp;QI/60A@1ZCFKBTO&lt;?VP.%.IN3
MHX,L$U6V;I7LY6D5DH?FR]9?U!'[;5=O/FB;&amp;MTKT^-Q_A,;M&quot;/7!8^=RY$1
MNW;#M1]5LV^YB_R'-4F)$SU9$UBC)?$Q]5`*U&amp;5S&amp;N[C^&amp;&lt;ET2`PPK0T4ARM
M2OTKZ8$$4@PM9?V/T@-1I.1:IQ2UGZR=2GY);-9:+FBP]^'R='P6QK$&amp;?I7&amp;
MVF=B0I%AQ[Q_EY1!,_#3X5TM?*&gt;]!4B5Y#?1*`H4F@#*+F&amp;+&lt;(IJFE'A,E!]
M+$7K?;8.A9N2L0HK`=TB&quot;UKG+O$Y55U2.PY(9'Z6;5(;9&amp;US^$ZRAAY^ZR$#
MR&quot;Q3;U&lt;\]8@R#XNQO=_*&gt;]=9?&gt;&quot;L&amp;D)%A&quot;MC[8C);2=&quot;0\(H%Q)(^(8\)&quot;W%
MB&quot;$#\R.#+`\-(1T9KS`+,NXO)&gt;D70,4!*[[6#3L&lt;)YL&lt;X\T9N.&amp;!M33&gt;&quot;!%Y
M1_!6YGO0[VWDS^9_=E!D0W:9?@PPA^W+#;&amp;6OA]1.(Y4PIVHBG5R=DFLNQ5(
MHV@UI.U&quot;H`!Z\%R7.::ICM.)&gt;:0_H5*\XT&gt;7BQ`50Y&lt;\J1DF+OCMLQN:N21D
MA,6J3*_IIA&amp;YHIM]?P[#(I1?ZN*.1(9_-&lt;3`UQA.&gt;-K[;H_F:H&quot;W3:Z!O&quot;4N
M4TSB)QKOJMX0@M&amp;&amp;0I_._$+.5C?KH)&lt;H&quot;$1&quot;,TPJM#@EB\\3&amp;9)QH#@6?&amp;D^
MWK3KC6EK1RX-Z1?H&quot;S&quot;:VY+MPD&amp;9&quot;1,Z3%=X*C&lt;4EZ?;(8ZW_6HA'3/.@Q,B
MB/3PP_*W7\C%8WI]?@#FL_6ZU],*=?W=]GDJ^'LP\-(V1C&gt;H%^?(&quot;6^18B4?
MCDV[[Y0=1^4/PF@CW0/)W`:^07I?]?GW2S&quot;F#'D:LA3*9]2G],KW[&gt;^S+]/X
MG/F&lt;M=&quot;X`(&amp;,GQ[Y$#*1FT_/#*&gt;W?9[]`&gt;BH(?8LS^]QKZ!,BYC,&gt;=Q2DC0G
M*ABDWZLO^]]&gt;Y07X=;:+^+]M=R-DS#^@Q5U,X'-68-`.'=;M&amp;:@)XI=&amp;5IM@
M&amp;_G%/6)HF\Y&amp;W&amp;@2B8JC47C9\OT-8P]C!J&gt;&lt;&quot;$4DRMR=920J!C(),KWREP%Y
MD&lt;E@G)18%:)&amp;&lt;8H&gt;^#-C?+#Q);D1OO%Z+&gt;8_WK4%AKM+=8:9O&quot;^1GY!?20'2
M4EUCT)T+.(9UW]3*`8[I&quot;[&lt;\G9H_9(-`F)!&quot;%MPWZTX@F(=U34%)14V.(D;$
MP,/U%#79(8RGPB8F+BEWK!^)'(R&quot;BH9DX1R?_N\?&quot;8P8@$_TZ3&quot;`%.?F)A]-
MMA_WSYMXY$U$UX&quot;Z%0AYZ0,\2AQO_&gt;+R5UOTFL-K++WI%1*(Q&gt;7T#B.S\A7R
MA&quot;;T5;BE``F0_N=SB,3YE^?--&amp;(F'EE9_T&amp;BQ!?*C\;OZHYLL0#T*!5TZ,['
M9@'IZ.P!KIABC,1&amp;*-0?`BI,L]&amp;U@@0&gt;*7CN&gt;*0UXY#%2[;-TN_8MZQ[Y;`W
M12E&amp;`(KYZ-#_\3+.3/)4E!2&quot;&amp;@#RH$(9)B-D^J!D.G3K(S-`.EUP'_Y6T;=G
M'-W^_RGR!'HP8&gt;*QM[^\-B;T.N`D:#T@WQ,K\E+%EL9_VG'P=+`X68U=&lt;NA[
M%VRQ&lt;9I`4&lt;1D8&amp;!FPF#AI8;Y&amp;05S$((FQ&quot;:4[WR%8&quot;:@-\*7PLPM+&quot;9!&gt;4PZ
MH4&lt;2?\$LI4$+W'ID\&quot;+.4$6%LB([BV)6$]#2+T&lt;D&amp;[,LB9RDOXFVJ[^.P\7Z
MB,V-S8G-COT!FQ6;&amp;?L=-B-VU^?PWC&quot;9L-Y0F=`FA`@]-;WH[2&lt;4$1%!G&gt;^R
MOX4%@X&gt;E!WX2)?VY\/958-9T&gt;A5L2;YBT,LPP4A@7&gt;R1FMJF&gt;5LHAQQ)F!#B
M[O;/-T8,BV9D5XJ(8H`10&amp;`V,A7&quot;:H:%LXG=]WE+6&gt;6.*?H[4OMW:]OI9#,E
M&quot;N)C%^GD@&amp;2D+Z@![RQ+M&amp;@!N1K,@)!E&quot;WLL=LKL&lt;B+DFLO_C+?&gt;ANP'[.)N
M?;ADXB+.I76CTLJF-:\SU_.('I/&lt;EF&gt;!7A&amp;)R9D/?3Q];$6-Y/&gt;JY@&lt;&lt;,5QB
M6G9_8^F1P^CYPH'V&quot;T[)*F\Z+$\?@TG7^BLD=+B6(;B&amp;1`PU$A\Y'#\H@BXT
M$H&amp;C\FE8NKN&amp;)D_&gt;.MEE7+FI)P?YO8$7II))&amp;`H7LG9H^K&amp;L-+Q7!C4']_Q-
MMX88&lt;N*SLA&gt;Q@5&quot;^:X&amp;&quot;&gt;F0S3W&amp;0:N^7@')&gt;))44XIHS-72C$)'`4DJD3PV8
MAV6$HCF$`'565)ZYB(!&quot;;#,MQEPVV6J@O!R.P@^:^&quot;O_9%R&lt;GZ7YC7;A=(Q,
MXH3RFH,?2[]QS&lt;B^D]BE(Z5@LWJ6MLUV85&quot;&gt;WI5A&amp;MS-Z$&lt;`8C&lt;P\FL!U$BG
M.$$#IM\M=,\[_=\&quot;&gt;#MZ%_(2D.!!J((8IU:&amp;$EQ.;'W(N*/^M54X@1,C%W&quot;I
MS&lt;&lt;@H5^3&lt;;IS&amp;]7TN9Z7M]FQD1S,&gt;NHC8VF`47V5@_$=OW2+9RH_0$[`2_S9
MU4I#?3&lt;][T]LQ&lt;J32?$!;Y+U0X`M8,@9628W$6&gt;Z\&lt;KJ^TC7BL%&lt;3@/,&quot;K$!
M,B]AY&amp;7&lt;0?^%SUAZ4O87B6$RYNNNKH1_!_V&quot;@A&amp;Q]-@._N(Z&lt;0TW)OG0\I&quot;D
M4(:_UG+M5F:\H2O=03N'VHB8J9+YK#B^.[L#IYY^?`XL;JZC[=D1&amp;JD:@6'O
M%523X$E'4$T*&quot;7A)[8F!^1R[$L\44]300F)*\H#(]^_$2(HGLS=[@,/D,'NF
M&quot;TF.JY\84Q.&amp;W[&gt;&quot;AB3B-'F]T$X)DA4!#CZ7&lt;&gt;N+]&amp;?EF(M32O?W&gt;F^&amp;[*PU
MKZV34!JCIU('DGCN^QGHEY%@&amp;_(GT&lt;0U&amp;_NO(N^'MD6!-F&quot;QJ.&amp;I,V/4T[0C
M)QCJ-92X!DG@R6JJG67$\*OOW8E)=^/JX$LPZ'FHDWOR9&amp;$]W#8Q)*V;;&amp;&gt;D
MPA=);)-Z*?&gt;9-6+'_*#)DYIX_?C'IE?&gt;/WS52]@24,\E5RH&gt;X[2-&quot;_4^V.Y9
M?`CX,GQA&lt;]9M^V4X[26;Y&lt;1J)5KLK50VA\FHVH$[M5.&gt;BALQ_P/$F^;/#TA9
MM6A@-_BS`G/`(37&amp;G_K=U`=_[]`E4#3SUM&quot;FP?[-\]4XN=-5[,USSSWU`&lt;G$
MU:]G],74Y]%NB^WL`?Q%B+&gt;16VJP'7+EIB4288A-;I_KO&quot;&amp;WGJ98F3_OA!U=
M^,8/I!S/[-76K,](!Q.Q45-01EV6;KG&lt;5Y%9^A&lt;TSY&gt;M$GK-08V`B=JM(AM`
M$`-NW#1_@.4B&lt;]+PKH,W_N*4&amp;YVP-[XU-G=&lt;WRXZZQ275]))ZM`&gt;ZMLNYGQ6
MTW\SXGK./;128(S3KRLJ,T0$C[0.T[1JH'88^BFKWBI&amp;&quot;^=$Q:I45Q:O:1Y@
M_LTGQK@;S7$$1!N0J]1@=&gt;_M173;%*&quot;A#S`0*\\D8GL_$F$;_U[1X`,R!=/T
M9H(2&gt;.C\A6I',J!;=OB,F6BG\P\20^(R*LK&lt;,I3@+'#/KK-YZD1XO7HG2/)O
M71&lt;[`O6&lt;0&gt;J&gt;(A3:&quot;;9FZ[J_,\]'!*`D^`KD[A)DJ&quot;/+NP0_FX+\2H2Y6&amp;\&amp;
M0,M0-8_S/;(N\`/2F_-=!BG&lt;I#2TG_&lt;/#N10EVQ(Q.PKMV.&amp;ZT`G&amp;+C*VMQP
MCG,R=&quot;Z%*YXU.[T(Y&gt;Y&gt;:8D8B&gt;GJ67AEA#2NOW*2BU=4!S^[^B/O?6S7%F^/
MC3K7M6&lt;GON'ZA(V7==!Z-@ZMA^0E&quot;M9#I.+G0(-K7@&gt;BJA@P?0.2^YT)-)!;
M56S(R,Z&quot;77`,WS'7UK/'/1Y&lt;AO[&gt;=ZS[9;,_Q:,3__M0QP?A`4`_&lt;.%&amp;$&quot;@U
M&quot;=5+%1\#2!^&lt;A$N,[+B^7%IE(G&quot;[^O`],](=:F^@%8#;?0MI7J`;P;GQ90^,
MRF';_&lt;!N]@3CC9W1X$,2A+Y$#G%H!THD&amp;(7&amp;.5VLI.=W3+521TNTY%-9P176
M#^V`=GLGY&amp;*QX\R@&amp;)YSS4[P6&quot;`&amp;!&quot;;']:N(`G='\LUC9CL37?[,PWJM2VS.
MC[C8XKI=),3(B!7TN&quot;V.Z-3+_X!JX(X&quot;'/+\QF4JM63W@O[WE8!YH,N&amp;&quot;9\:
ML,OLZ6DI2;QRZ#[_HE-V^((OX\:M.1WB[7F.I.(`Q3??-7Z\[UOY3X%&lt;!Y`Y
MLM/U(B[\7`A9B[WIR(`8&lt;Y$-;JG7D^CW9`C#EZ8E3GHC(U(1QL@HT@;BZOL\
M-=-0H^$-L?0Y*+T%?..&amp;F^,C0R0A8]=M=M?Z1NS8*T`)])+M^D)SP9?\43&amp;6
MH%N4LXAP_G[*Z[P$@`G3?F2^/(APH5&lt;OC^`48-X5*FP,^;`]4O'$@@5R@$VP
M8L%HDS;LMM#P&lt;E&gt;'S*G1WJIE:=4N/&gt;]U'&amp;'Q51%E*`]/S&lt;,+3DXP!&quot;/\UCO&lt;
M'U%&amp;YD#!+L!?)9`SK6D@4.J?R5&quot;P$Y&amp;WV:IGC=??'=R#F;TG[O,^?Y.YR7[J
MN[L[C`N8ZU(7T\A*4OO='=9E;21J0&amp;+/`)&gt;^2][LH-L`B`:AR.LF`_9ZV]3Y
MNJFKCR]YF`1;=:?QHZX&quot;/F7&gt;;:#\AK8^/26P#,O/Z0Z`S/PSUBH7SD.&gt;GY\X
M8BY/A!,S[(+MP88:0!=*X*#D&lt;'!E8&amp;:;R(E&quot;)%2?[:B\F?XV&amp;&gt;HRIE1/8OQ&lt;
M5FMZWKHX=M&amp;AM&lt;)\Y_#(=HZVH.)GY.ZF&amp;6=8T1SG2&gt;]:+X5Y\N%0Z!7[1=?'
M?Q(JCSX&amp;-=+(8SOG\TQ\*&quot;.GT-BWLX##EM7&lt;CC&amp;&quot;X3@+.%:D!(N'5I*3:MDK
M:%'L`7G^*S?^RL(-,;YZBOT)G:G:9DC6$T:'=KJ[[U\Q2(XWU/@8&quot;&amp;O\2`-*
MM\'3D5[ES1&gt;04L@/\O8M^DHOW@X5U9N+/]LF-9V=`*:N#MC%=1L1=PW@1H_M
MO((&lt;4'N?@#2]^1IT=X=VTA[TVM#9EK.GZF_&gt;I1\(&quot;NW&lt;/]3)-];;9&amp;SY!#Y]
M.J5&quot;F889N!_J$N^DLC_R`3E&gt;NT[N@=:49QZOFS@?F(ZSOAL&quot;NVX:V`EN[^ZH
M%9D,B4D?)K1&amp;#&gt;*IETS@;8*26Q(7?R'&quot;-LAMQ8\[H,%&gt;:K2I*80*RYV9YRL8
M].42S(@F`R9^(8G_Y?&amp;#U(ER,4_Y&lt;N%J9#B,\_R/S0A&quot;&lt;+1K`#1UI&lt;'U;\&amp;'
MDF#=&lt;.7.#2A%`_$%`FMN&amp;P=`QC7@]5V%#8-5:.=])W@`)CF&gt;'MWMKKR1E7NP
MUPDN1&amp;QC&lt;YW64)I,GGL_9TK13/5M2W:J[I/H&amp;3GC&lt;@UPMV]Y?I&lt;V@N0P3K@E
MG&gt;I=DC2+LQ?F#8#T5B3W&amp;[FCX#+#:J54MG+7JTLMD)&lt;PA2ZK[^EF+GD6VL`X
MA0[3LDTP;'9'R-YPE?7&quot;`,'.U9XC+`DAJ3T5-EPEV):80]P3*-NU0J;B#TXP
M:FZFZM&gt;@+HW//LS.IT-,4`_RAX'8+$CG?DGS&lt;L7VDFU:)]A&gt;[K_S4%0G/C'T
MQ7[.L[J&lt;GEH8`*5?[':DY`W%8LQ`Z&gt;L+',C8D%ET&lt;&lt;@?6@R-5W%FH&amp;IXU/_T
M=5&gt;.3E@]:&amp;IJ`TQWU@=EXL'_09L;`P,OFRO?_LU&quot;X\YPD=35*0&amp;6JN&lt;!]L`=
MC/L7;Z/5H;G)5;X;I+5W&quot;RZ+65T7YL*G*!6=8*SMA?:A-/^]NRGYZBC?'KZ;
M*WUREV&quot;=;B.]1ZM/Y.V;.HH8G:2_,(HYG_@`4T]/00LNK1+@YVP\FM&amp;V#Z8.
M72^&amp;Z^3)T=9,,N#69H*3D_&quot;B^B8(05XN&gt;:K&amp;ZOFVY(WLG_4KU9.'01!=ZBJL
M;_TUI])\S!V^QSIYC$QCM-JTR\ZDOBM'&lt;E0G#\+U/FA&gt;&lt;`F*Y[QSDECSI&quot;3S
M)I)7!\.'51LMO@[UB4[N43GE/5C;679N1KU4,5,!ML\$N%IV_V%(_^?S1J`_
MHB.+N&amp;,T[P;^6E?3WN\8=+=8M2T9S&lt;M'SQX`%27CYZ/_#NZIVME#RN/S'LF+
MB5/@X=MX&gt;V=,`/CB(E6C!';-\@E_F')XZHRP-&gt;?%&quot;AP3T&gt;L56&gt;=,X%;S[!04
M!3GRZ`E2I6_\:W\^&amp;.&lt;:WR+T_K?PMVHEWA##\*P;OB,L[=;)(FQ\=0+\KY^2
M6$7G=`0ZX(4\Y[YXR\LU&amp;+V;D/;[/#MBZI&lt;[-)GM^1AWY./B7=6H))P]MFJU
M;+G/=S@VCA-MO_5P-N17-?5Y&amp;'*T[EXKL4%5(.H8&quot;&lt;=D](\/=J0UPH1%W,NI
MRKQ&amp;&amp;T8U^1_8&quot;4R&gt;D&lt;C%;1SK\?P^GU?[^+J7,E#%^+)QT\&quot;%V/$3D!P`;:V0
M7R/F&quot;317PYL)60)11G6F)DO&quot;43!/P&gt;%/Y5+N4M$)%S\/IMX\H-2X&gt;\&lt;#R3%=
MJY8]DS.&lt;!-\\(*FB^I.E=7Y[*+AE``8T;JW\N5&amp;0H\6XR,!GHML]H/%\S&lt;QP
M&amp;HWCX^-6KUZHGTAANOL6]E]:&gt;\O]`RAULP0EL-#9$\XD%V^$+^O@)U7$WL&quot;(
MTEII!(-M^S^*;W=!@-&gt;@E\C2*5Y$-#4SP_`FS=%-@F16UZ$ZU&amp;4;2B`.K*'#
MUYD&lt;'R)[&quot;.I\B?HO)B+@Z&lt;-Z[^J;U=RC_JL6Z2]^\;;=A#=&gt;7;;$GK`MQB:P
MYZ&quot;`22\\ZTP/2+6N'#H&amp;0,I&amp;P^XTST-[N_`1Z+B#'\OJ:6BTSL#&amp;\+6`GE&gt;Z
MC8M4NH,D^P&quot;TU[]E.&amp;1V6S(?NBW)@?@%&gt;CF3.CQL\J]D!?[Y9O3\Y*`:X7L7
M-S5&amp;S&quot;CU1Z[?BB/F6J`6%/+\2-5EB#$I\%]HQQO=KE@I[5Q8\+W=+?&amp;C#8FG
M]X&lt;/-1SLA=/&quot;J(&quot;&amp;+BV:E@\[K_T0[GS[#&gt;E2?OO!`C]$AE&lt;OEUXA\Z&lt;PY/5V
M`JAXB\0&gt;U38T#OONY&quot;O&lt;77.)_(R8I[8*UC[-8?4&amp;.]F/T][H']70=MBW^\N3
MKREQAD,5%&lt;HLRGG]A/XFWJJSO]&amp;%&gt;KG`(*21YVY)*?C.;3M*2G,K?9O^JJZZ
MG[EJ+6)*WEU_E2!V*7&amp;^X4'2M]JM-EJR82IFK*!^)/.B&quot;5$8BW:V!86&lt;KOXH
MB#7T)X]8X199RH:W7)J;.B+7@'_SO)[.WCZ[J`X3C!JL&quot;AF&gt;:/GA3?!UW3M]
M$(G_%Z`TA=P^`&quot;J$*-!:P;@XS@W-#Q`[;7&lt;\3;0AZGO0B\4U4&lt;1?%Z2N.BR(
MVNK7DKF=KW+OYER$$7^REELW7RH&lt;W%TXSE'4UV%VON&quot;7\L47C[FNBKB.4O%U
M(^45Q9J0P;0QOU&gt;+1&amp;#7CRYLJ&gt;&gt;Y1ZJ:ED_#NK=)%W;?9\_S=B![RX'GE!I4
M[\R8N&gt;5O@1X\*B_&lt;!Z/?W6.FNK&lt;EC1[SKA'&quot;VWTV1.,FUC;+Z]N2'W&lt;NE`,Z
M&amp;^&quot;O1_NFR((G&amp;D,PXTY/8KF-PXH=&gt;Q=Z.['KR?Q/5`I1\'+6W8?9D.&gt;`H2]^
MX+0M-)J@N6TPCW%24&gt;)&lt;DVBL%1%&amp;I`R8\L@SYZ)K\_&gt;KQ;ZAI0FA_635%JJ^
MYRC([:ON$%I=S-Q!I&amp;_/(]M[9U]]W=4TT4D-=OJ'!#&lt;4XT8,11GPQ0ET?P-Z
MD?#DY3@`HBN[.!$C4&amp;/9MDNPLSP@CP[3W/&gt;$$YRBW*W#GQA+'UQ=Z)%(AD`O
MS@NLDCX^4U/TP+9MD^GUUX=U*/?C8P#?_3KIPY8?F6^66X3+Z1Z4OON3//AE
MNM)#Y`]$P.S7K&quot;MCN$&gt;5P$9&amp;W!6M8837([X2?[W64&amp;`J.=E[&lt;O5%OX#R'=N$
M?G_P)&amp;RD:6KGCN&quot;GW]4)AFSC+-1O)K0S[/'N7079C.XFE!N$1]GA/#H`D7H$
M5NR&lt;&gt;U^TU43!&quot;R%XJL&quot;3[4[&gt;[8I&quot;\*66W^M&lt;ZJ@6&lt;(9S0&lt;C%?57J*J5+H13C
M?.R:Z_P/Z,7D^31J7RFVQO'@HH5(4(EM%Z-T`_JZJ&amp;^]I3/$6/[8#C([_[EZ
M0?'8W4]`26$]GE&lt;]:]4%2ZUX!X0_!1N&gt;*7UX9=OU%//W2OA7T@4&gt;&lt;CF.TI/J
M$*)1.S1&gt;);!FZ]P&amp;:W&amp;D+0ZII!NO#G6*9&amp;[;O=NO$26KE!I;[@3W87U&lt;8:0W
M_70'_Q9_(9_:']X.&gt;OE41.`DE(=R=4&lt;&quot;[)8RLGO8FGW4S_0_1&amp;69/LHJCM]H
M+\%Z,;)=HO-J,DO+@OP3&quot;%K:/A`H8231HKG_FKO7._7AO:O#RNS/RTY^`Y/.
MG&lt;&quot;GT&amp;5TF1X/R[58'%@@GM()1I,3&lt;?-9%70V8+\8/*9*YRGU\3S8H\(.XJ7H
MW!$NJP!JC[AN0$7@G:BYTF==P7F`!4_,%)RTPG,Z+5TDX[.`NZI$GT_P)Z*3
MKB/)F(12M1O6(XB1U4'2QYN.^`V]B3LE6HP\+[V$Y4O_(/OY2=&amp;XRJE.FS(&lt;
MV%6)B7&lt;=W41I]/U6GT.;XX9+CI[RQC$]!9)/(\N&amp;=]QO[SRF09!SE(N4'O?6
MYT6K&gt;('2GK!J8&amp;T@#/P6XHG`VJAZ1AUJ)A&gt;&gt;#.KJ2]-0JLI_G/D51Z&amp;W:Y=K
MF/D#RV&gt;8HE.4S+YMEI,:-S*_-+9OR3?'&quot;@[G=T&gt;4/6U`G7`4&gt;Z\%*K-P7CU!
MTDP*H(J=&lt;K=6,U^@5/HZVAT=)'_MX&lt;Z0]FLRAJ#:-R*&gt;\QL^[NN&amp;H.V;SLY\
MS57-9G.*!^3R5C6*!V^@E-%`_\0RTD[GR[;=0)?5/H;N&lt;-REP&quot;FWV&gt;K71ZJA
M=5;P2LG%M\,^:*OWU'MY?)R?#W=]33M;]91:Z&quot;2-WB%5$RKD(AR3&amp;]`I;Q,9
MFXN3K[?]M^,+(2Y`QQF6XBWULAA-&gt;HT/ZV[HG7EI3B^&amp;71#NP]+#+3M(5]J&gt;
M=\/0QL!_RZI&lt;)OMGZ*#31:_[%T^2=V*?-ELI'*]&lt;D%,\*(2]&gt;5PF;-SQ?)?G
M0?QPIYGT40%$3.8;N.S2)!]7=&quot;`BR2C5_JR),!D;)UB&amp;D@/(L/TF8J2NHK&quot;P
M`O:53IADAPF*&lt;^]#7;B=8[ZLT4DW!C_O?S]GS&gt;H8V3A1H-5IR=/DYMZ1!(T/
MY3TXT0^;8[T!)L9A6+XL7H]Q@&gt;P(-^HN/%.S=,+B2ANH!'=KGITDI&lt;1VD%,%
MCY8F/*(%&amp;U`&amp;AO3PNMK'RR0GF\D?P[YWM?CO@AXH)&gt;\XPZ^F^M??_8%1WE+J
M7)_@A%!G3`4]3C:K)&gt;8]&gt;*;;;48L$H.=$N[M`_W&quot;T+S.?,767?P2_UGW@+U&quot;
MFO^`_*=\&amp;Y']A([/1/=)#6;)GVS&gt;/7LA6A/MIK(,!1TW=P6LU@N&gt;7B.2GN9Z
M/1RN8OACX..]\JGPZ[2F*'8$Z.599M3W%/&amp;(9E2^=L]\L[P==$+L'&quot;Z(%3FE
M1J3N%_1B=RF`D2&lt;!:@]=$79HDC5^2Y8JY3F:YA&lt;]OFK3#)'26^_)M&gt;F:@HBY
M+=^,6&quot;BN6JZ#7H1M&quot;XKSPWV?QSH.5C\_4'&quot;.D71(5.0DSDU]+1^&quot;%N^K&lt;6TT
MVZQ&quot;^870L^!/*%F=ZU$MS&amp;K'G]62X$\ID`R@Y89S,*IJ&quot;&quot;WA7^2\YD&gt;Y-CAU
MQB!H/G==S%\B;[Q!J).;%Y?K+^76!I1&lt;%H8%VT/NCDUZ&gt;O92C3U:.*3Q([F&gt;
M)05[^R7&quot;0:&quot;&gt;NZPCTYJZ#]L&gt;ZA=58^MJ;ZYWRA\'`]&amp;6?&quot;_UW^Z8,!R]N6;?
MD5SIS[G*\IT&gt;:YZ&quot;/R%=W%\^-+J-CPK8&gt;Y_&lt;%3`%X:[&lt;O03F.5&gt;-2QET4:^8
MMS'QG5,+&lt;@'%+]PUN!F\!T$3^N&gt;\O/D!7GFJ])U&amp;9UMY1%0/WMPBOAC57]78
MH2C4XVD(]CO&amp;8(7&gt;/_LMV;3&gt;%Y:PQH&gt;+G),!B4R8\(ZDGQ-H3[RZZX3RP0QG
M5S7B[U[OZHN[U&lt;&lt;=D_P.RH&lt;7[A)#I+0T5Y(OFH_81@2.UG^&lt;&amp;+OV!+Q]&lt;6`2
M9K]15APK)6M'&amp;,YJ2\G\0K8U!T$U()`-D/=?VOZ^OVOO3Z;_CC&lt;;K@!F,3$-
M,&amp;.4ZAQKM'OKF&lt;C2?1;,&gt;ZZYZ;/9\%LR^-*1]^J`C^G,VI![,\TE+X6YM+&gt;9
MP*%I95VT.,3G8OYN_`5&amp;@H01(8LNEH?8-.--&quot;W;Q#ZB,:IHE?_2%C]6CW/_7
MS#\XP)LUF?W_?;\@&amp;@2E4R4&quot;1P_:(+!';@[&gt;K&amp;[Q]YW[*])R&amp;D^V=W3%!'GK
M1;5+2MYY%I&lt;EFF&quot;)U$6,&lt;1OK`+NIJA5S:=?T3B0HVK_Q\,/]SNT5?7KZ^A/M
M\*S9AUN;JY?FGINHUDO:-_1/31&gt;#C&amp;9?#MT;AJ:&amp;VCA,5ZW$N3=WV]Y)U&lt;:J
M3K[;K*]YJ`Q?DVC*A=E,C*0A'ITVPOXV'9/:7;G;1._R@-AW'UZ9D*'O&gt;NZZ
MH2/_U&gt;X9AMO&lt;-PK1\.A?!?9V;8WW.6MAZ*-+-@G\&gt;8/KP0X&lt;WJW]R4Z20@[?
M5Q^,HN&amp;IUD=^!7+#_]`$+0S=H5'8DOP8P%'LUVOJ6&gt;R?XX@^E?[F.)'X?,DN
M]0%^59[/G8[(?_8J'&quot;3&quot;&gt;JHQFI,W=).O&gt;A\&amp;FPFD-XGAE_W-$`R#QE:AP9=N
MSVL)DD@G_Q\5'NM.-`M^W9:2T2YY_;I64R8N9T'E4%_5)3[*IM9GD#A:$'#&gt;
M1.WB!1#E;&lt;_UUC62!U02[_E1&gt;-/'(UN4SV&quot;`B82GY=X4[/&gt;0LV\6AY:\.&gt;8P
MT&lt;ZPH#G,W6-6IPF,^ZP:B67R_3X@&gt;Z\3)&quot;[9/KNN0],#6I^;]&gt;MJG(DEW^E,
MW&amp;?WZ-CDO_E!2G_OLIE0L^[*.%&gt;\6D8`';&gt;R,Y]\FSOG:;_5:;//M^FCAUT%
MBO=-I/-D6&lt;9&gt;P1@(5SO61&quot;7&quot;AJ'Y*S*]N=-Q($CGK*I3YP.:#DMV$/2^JP3&gt;
ME'-GV6@#*SD?JW3?[Y;LE[QP=U\U67KYIPFJC&gt;D,&amp;.QAA3Y+9[+]%Y,ZK0EO
M:Y6*;=88QK#N@J7^F#VZ5&lt;ZN+&lt;RH3'+W4-TH$L=@TU($?%B`]TNZ`]CYIY:%
MR14&quot;3-$^*_4AR5+$FRI'8F5CL7X0(F?&amp;EB8-C`@OX:2%V37J.WG,H^:/=Y)B
MP9#+)WGJF8I&quot;`$C6.4E29@[&gt;3]*K,\-3XQK.VZBQCRG8TDOU?&quot;[KW,V1ZCH&gt;
M!GS%\?2B_3`\\&lt;95'L8!6#GS.ST;.49=)]*?G+/V'K;E['=R=^!SRJF4YQ=2
M#VT=9AU_',PKW`O$#QGP?9V8X1&lt;\7U]C=M+N1\VCE)*2A&gt;HR3NLZMX&amp;:QG:.
M-/LV9WZIVZ]6-#][6KL[3]C&lt;/S(&quot;IQ$?RO291U=JXO^T?A`8VESF93.'J?[E
MKE1;CRBP`-`%(0X4*/*CA9XI`5ZD)HB36XKIXLV_,I4!2P'YQ96`5`%A:3(B
M:5E&lt;0D:4&quot;#06YDR#?&gt;1AT973B/B-5%*1@]U?\?0TBTF?@F+B&amp;[N[V[!G*PQ-
M&lt;+$+&amp;2N_O2_]1[;62Z*B&amp;@]\[8;S&quot;7@WOLNF_ZJ74&lt;Z`/B5X\W-&quot;`!AM6)23
M5O5@?(0X2/+9\R=TGV@XTV8,1T=C:'].KIG36&amp;V&amp;GX2_&gt;4&amp;8+&gt;E;BAX-Y!U6
MOYZ[P,_DTYV&lt;/@T`:3UN3A`^T/K&amp;N&gt;NSCAGT3)-ZO[:&lt;FEO%Y3OH&quot;[,&quot;I*M&lt;
MS$^(?5=WW5N0]-K\L,;Y1PFRI38CD`&lt;XJ:AR&lt;6/^.3_NSY2F'09[J,X7=+F(
M-^^0B8/(&amp;$=P$CF^26/60,,I0Y=@UHMOT\].SPRM0:9FSD=78M8&lt;'43FGYOF
M5]:&quot;MN\6D#V.`@L8\;3&gt;OBG]5TC&amp;)_U+X=&lt;++\^(Y;3%W&lt;I+4'PRB[(@YOM?
M:CQTBPX;V^-B`$:7&lt;2&lt;E',5AI^!G#Z.J?W93SS.+MQ(7,7&gt;=;G6JAPP[A5'6
MDUF`^(T%9,&gt;#@[UBW.E&quot;C:DI!SR#;]1QZZ_B\!(`T37&lt;EQS*=]FY-&gt;QJT!NG
MC\/-_GB&quot;:.MRREYZ&amp;JJ]?]56&lt;6_NLYW]V20(;;V?_-2&lt;=Z+]H=&quot;GN]QR^[%G
M2UO676Z&lt;\E52@SS@?*4B83[TF5&quot;98'^B?MZ&gt;GRHQ=1)2S&lt;T)[&lt;Y_L*K?P]V\
M(]O1U#-\.#N*22M!#T4I,&quot;B\6#C(4^.M268E#Y!U,0C_1?7.G7\3[/;0Y\E'
MKH(INYDL:7!=@(SR/A[]`\B&gt;*L&lt;IH:H`3ZB?7(@9(..@8).4F\G=FXT*T^X5
MF76`V(QL\#.(V*&quot;!Z^[YYF7[#-TPX:VH)U'@8_\7@97BOK!G\3]/&lt;S11C96R
M2OH&amp;[('2LT(-&quot;(E9H';3?,,8TLS\C/4PE\H:Y0ZX(;7FP99$V^O\0'MAWB/F
M_&quot;5L6:N&lt;W7JL_+3B,UC;1D?K^]F:ULWM3\Z)T:8NM-ZS'X,*)]U/U&lt;??HNE#
MGP[()YC;`ISO:24$-@M2Y\O2WF/T2'_XAD,BCI9UY?M1GV&lt;X=IR7'#4K-VDE
M:0:'D=G!!Q7U4X^Z)&quot;,GFL!TJ0_);X^8Z+(,W1\.[@&gt;*T_')Z2NY(*1&quot;C$??
MF.&amp;@W[^A7H27];EPKO8`,BQV%=E3&gt;S&lt;&lt;T@'D8%SZY_8U-Q5F&amp;N^\N$\IHKD[
M4&quot;3_$NBD%;SS+F7M9@RA'S,[]PI?+GZ.GJ$/*$K))?$!+LSK$I`(W?FNL[^&lt;
M!&quot;&gt;ZL-3G93I4Y0#&quot;35I&quot;=7KFD&amp;_;$+EIW%=?.6.^_2ZSL=R+&lt;$FWCVJ`5%V_
MN67;7''8^E&quot;7*MA%J6.,6'DJ9BMM&quot;X5&gt;A\]?W#:V:[@;H[GRW5?-JJS5WKF^
MK^3\OM:9=%9.+C@'2KJP^IC]&gt;JDY=SS`1OI=(27D$Q92,'+?_&lt;=_A0']3[I+
M1P6_U=67#%(E&quot;3?FE(.1/_Q#)PP-LFR&amp;/@WULI%[28^+(9Y/Z(OV4@-\/&amp;V^
MJA`'92S&amp;)N.Z\3Z3&quot;Z9:R//T,N3+RV^!VYOD#\/2`DN4U+Z^71S37&amp;&lt;096DN
M*%Y6&quot;63A;).51L,C\EWY\AS\4'&quot;PWQ!,!$T)O;H?*$*O9DR()5;&gt;FSNGK?O^
M&amp;:#CD3)O!DC87SG!2@=:$9MTV*A4OW;7G_SMJ)KID(Q%UKI%I_`$V;[.Q\Q%
M.2TYZ2\MF.&lt;V5+?B_.GJ*+;6TOWB=F?LON'_&lt;/'CAZ/W!X`6@1_&gt;JL`:^`3D
M1*]*9&gt;*1?0CZI9O4GCI=9OSUS&quot;IKPNK&lt;&lt;(N&gt;@C[;FB37#&quot;DPVOK3]SJI=E.@
MGK6Y^JSS]9:)E&gt;.:I&gt;YZJ$;`QYHOIHJJ@S76.JG)'3:HW]D4E:AM47H=2V#K
MC,18C(T,(;+,8_6\?*=$W7[.HU\M7CJ[7S+LB7)SDHS=;K!ZR.E_7W0*J6+!
M&gt;9FU[$AF^M4,%2!R6S(UXYUSD.=0VV6O)4-1CGL&lt;6?:GQPV(6+&gt;:F,3\_0S2
MZ/KZ0%&gt;H9UY%\($3&lt;J-O!#C;N[&amp;Q&gt;!$MM^WVLS;U?IL:=@O3]1\^`A9V8IB+
ME'_0LKM/BDE55[`WM&lt;\&amp;BXV.`_!%MVLZNLN4'R5&lt;-[*XB!6=`_;DUP#\\GRG
M!SPT&gt;-NU:6.M]L8#?LQ3&gt;OL*_3SWC5QX4\GI,+&lt;\/JKU7%147)&quot;G],(2P%]E
MQ&quot;;.22I396URXC.PSMTP?YQV%1N`F@0$[+Y%&lt;[NAR0&lt;Z00/6C#^6%.\AI64F
MH:R\TT3G8;#%U`&quot;XA6V[7_D[$8/O7.[&quot;?F,=ZME%:&gt;XXMRE#6&amp;XL%[BC'NO8
M2+Q:)7U?;)K7$#C-Y7&gt;&quot;Y)=BN9TK:.(;%YU5^D\:7;&amp;:]PU%#:MB6J)=5&quot;W&quot;
M1J8*)%Q&lt;^SDCGF=6)A.?!_3&gt;L\S&quot;/;JT::ZI7R5I9PYPS=.64EM.3@ZYC_!O
MVIXDD]9U'UNR_W0&gt;QU&lt;$?]Z())@1*@_K@Q7H'G\XJ?Q2V@^1:9;&quot;\MYD1IU8
M\D=%_0!X:ORVEG/FX&gt;Z'O6!3T[_^UK#*2:.67P70'$8I7%D%O6:W(3JF2V1#
MY*E)WB\)ZY!0SV+5^2R-[=TZ6/4&quot;W%#IWC!B815$&gt;O\LU`N;4Q^45YM$PTAG
MN7&lt;]5%U[T/&gt;BD'8!5=@EJ0I];JDVZ?(I1GC'..[F[&lt;U7=KDO$+(%;&lt;*&lt;[M)N
MNC;.WMLR8@H`V+XW2!DVQ#4@U2%_/OZ+I*!ICJ%R0NV!_DSYZUG4*G,]QI4`
M9D:MLC/BO[3Q]#C.`&amp;YBCNR3?:X2@MF^D=[P'CXVI_YID(HY#=H]&amp;9\TN_-]
MT!68[(M3;^`D?W_T86&amp;&gt;+-2T_3L&amp;4DJ-R[:9F6D5XZ7;/$+4H8[1,1-J&quot;=+^
M.[#A?I=6CJ+^8DZWJ&gt;&quot;5A&quot;7*%O$'#[L]WYB*/`!@GO0G_L`V&quot;UF&quot;LZ&amp;IHN%,
M&amp;;#^2D;X87I$WC':2I,8&quot;RUBA.B[&lt;\T5(^#&quot;\,BB,&quot;[FE!][3KZ`18#?:4I\
MEW5$(;B*-E&quot;3-C+P@UI-C4N/Q8O:297M\^N\@:?_T5W*4G$:&lt;OAS(2E9W`]]
M0^.WH_YVK&amp;&gt;S2JSJ86(.0F8&amp;&amp;PHB=%7S7U]4GJUHG1=XA?1RN3&gt;'\Y[Y=J$M
M$L_;XW&amp;_O!)O+O\H*QFU[5:(G5:#\&amp;_8`9&gt;]&quot;\4UL]Q(#0;U-V/PP*#!X*@(
MB969&lt;509O*@W3:U_9S2;&quot;&quot;AR%S6VT[A#[N&gt;?S,LS%3*/EL3R/0,WJ)HT[&lt;)/
M[Z7V\H]LEL[&quot;NA$-&gt;!UM'5I&lt;:&lt;OB1Y]0%'%XB&amp;DLXN6QJ;[G1],*^AW&gt;EJ[&lt;
M),ST?OH&lt;B4$?$+G!*'5[/A`/0IR9U)?$YZGZH@+TD`,JYB&lt;Q]-I,3X)2.$FM
M*NW&amp;529HIN&lt;F\&gt;J(Q9-QE1SV3EREO&gt;Z:/-C'\T'6_ILUG&lt;;=?@T:$H$FL/WR
M@+25[=L39]&quot;VKGK.HXV&gt;(0/TT&gt;\T7HIP4A7O7K@)GHT#&quot;'W49;Q&gt;(=85B89E
MID\M7G]8ZC0UX563&gt;B?%3==F5R!!])&amp;YWKE9KZ4D+8-JE&lt;&gt;MAC@8&amp;0FU&quot;R+`
M;G&gt;EHK1?@O.VJXZMJ&gt;WFY!A).7;B@&gt;Q'9DKS-[NQ]8_F4&quot;R=1K8,K&amp;]L[6\(
MW#%QT-X&amp;FOW%X=F47HS#^&gt;8]Z_[7Z_*_JW!9,V=7=%#K9.&gt;@4`MPS&quot;Q&gt;JHDW
M550#$**CI,LSF-:J)36R-RC9G49G1-&gt;C!Z'Y6&gt;&quot;-?A7&gt;\-,I*U)8,&amp;/00I-+
M=,I$.?#.V1@IZ31U3$5?JW4#0=&amp;7E-Y!.\;J;HPON'_PA`_'&amp;4^21HNW7.OP
M;.JF71=&gt;C]S/.W`ZOOZ=@MU,:&amp;P,9YD:'D+HT[I`/X6VC$+,PY^3H?M64&gt;D.
M&amp;9%?L`=\?VA[B[P77R=$%^:&lt;]0H8#T%&amp;1J/18T&quot;^V]EC[0VN^]?5VX:H&gt;*UV
M+5BLGYLT$M\K27AM-,_-K&lt;WR6OH0T+('*S+X;#\AT-!)/PTQA0S37M\&lt;^=AR
MU5;_UM?)K)@L`K;YP\X%NN_&lt;_*N$JM9TG'AQA_NF$@-O/PU,,8]+3]+T.,V0
M#)\&gt;X3&quot;B$96Z4&amp;@3:3&amp;L!C34B8]U5&amp;[,!&quot;[.^_%S:WB]GB`N$BXS+7BWI:83
M[?,&lt;)9@55&lt;[D_P&quot;R06N[!W/EXDV^TQN0[CH(-[S.LW&amp;4U=&lt;(!Q;QA&amp;!\?;I@
ME++KU%3I'IMVN#K*/*]P;`8%O7R!_7P=7:[PI37SQ]K%^4TF8\Z#*OU#G9U$
MHV#S_OYRJXYEIFIC_?4I04?(I&gt;UX?,R!WIL[#C5SBOL^GMY;TB.CR,:C96T^
MTU18N#)W7&lt;G+SBDK&quot;\KJ-&lt;RMS,\G],_'SFFC7OYN;P`CWS2H&lt;!V\D),1&lt;2OV
MD\/NIZ3(AJB6=$RU8]^/#ZCZ;:4B1W]W0M2M24V91*9BD*&gt;K&gt;?(-]J_&lt;$F^%
M[A1-&lt;Q8:H7GN&gt;SCG]2-P-$&gt;Q9RMM@Y(TI1064JPR%NG/X&quot;)K0$%R(8&gt;&amp;=[@O
MHU1,],9JR$'7*^+E6T11@IB=5)DM,KC5/1;^X&quot;_*Q'&amp;IWM$'G24&gt;N3*CS\CD
M4F_,M\R.]FD04=)^'A=A)%D$O&quot;&lt;R-:V$&amp;E85&amp;7\PM82#+KPSTO#!_@/)]8K$
M;]$^Z5C24&lt;%,/8LT=H?V/@W\&gt;M9WG.C2AG.2=MMEYJ((QE659*%D%I&lt;M1#`_
M:=M:Q5#)@7-S&amp;Y$-2FU5FXOO'_1%NG%G.?BJ=+B[;-U=K)$N`L(^!6&amp;%J'&lt;O
M,8S/O&gt;'I?3M=,UV6EQB`[`^H%&quot;+[6?$B?B(F3L7I`%`TV$_&gt;36-M3\!'[W\X
MF8??_5EX@0*MW&quot;%;1!E6*@-JZ\LF*4&amp;T*@I$\=T`O1A&lt;_MLYC.L$JU09;%AA
MU_)G`M7=!]QJ%*.M^P+\5&lt;F\X0L;9V?&gt;VFMV=CCXJ2;ROKOEZ6`(D:1MN51N
MF,8:8.@;[OB=J7NK&amp;Y/2U'G-V38F\Y-1Q;?K;WOW&amp;NAPOD&quot;L-W?(G0]-KU6=
M/[#M%QH.^U/0WGZ32&lt;2N*\$6F7BT!:$J8J&amp;/#,JDTQ,:&lt;LVT&lt;O][O)LR,!I\
MJ%).NNIP&amp;&gt;Q@:X!J8)Q5ILVR_6VXA]SUE,B%ZLV2_=,OC]!_#'M.2:-EU&quot;,F
MTQ?7F`2\?_-KRT+XPRK#5]9T&quot;K*\];PCP&quot;GY9QD%($9-X`*I%/1]G-R7B/.6
M$:O@JN?%PXN)%+:B;YC$O+5G)C$ZLCBER/RSXTHWLW`[J=OG]&lt;Z.!T?CD_&gt;`
MTHNXXW$'71\UI7V_[9JQ9.W/$(.$O':RA;1]MHE]G.%.FT?S5-S@'Q^NZ[9-
M2M*\N^PK&quot;_W6E&amp;7GNK4(T7F&quot;L=#02=^@G-^=B@EL1P0CU3&quot;8,\H;6+_1$L3&lt;
M/+5RJ@*3A_92_/HA&gt;!`&amp;62&quot;I]$S!OMB0O2BJ*H^O[[,E?UM&quot;VGR$.,OY4TQ&gt;
MOG1@6!P:ZHBU:N?8&lt;A?=4)SY[E)'X&amp;;F]&gt;L=/95.-&gt;_A!K?`Q-?+&amp;%SZ4B1#
MAY;ORPHBG+1@S.3A_QY(J)W_K;][HX1,0MZB(4.QT7DIXZZ&gt;1RXG#2XU,[*'
MS]L=;1S\UT;^;YM&gt;;:TLFZR%TT:5,C(5`&lt;P0+&lt;X8OIU/KX@AN96FJ=?[BRI?
M&gt;Y&quot;N,&gt;&lt;:L'YHIGO?IB3$YPQQRXUZ]5*B8U?L7:6B^*,H+\4!Y:&gt;?OF7BO9$_
M`_B]:D*&gt;]$4*&quot;S_)'@KE*9S86,UN[Z.D:TO$S&lt;CM&gt;O\Y-2/&gt;U-ZS&quot;DJ:GSP'
M,PMEIE5R&gt;GRY(B`Q)AJ)AZ]#5@6R+OAOF*@78N-4\8/,V#&amp;22,.A-D&quot;C0=ES
M_;92R\VPHDJ7PK?1G_/9GG1S&lt;;DG.Z$;&gt;C'UF\/^_6^V,/LEWEI&quot;AX&lt;D8CV3
MB.?69;EUIV92[\%1R8Z3&quot;NL-JZC&quot;X:GW,%VK9&lt;!$XX)BP=A4&amp;-[-V;RO`#JR
MZ!T9;9&quot;*@G7(&amp;X`6+R$?C%3@I?9EGU7*NVZ.G?;RI\JR,&lt;(_I_ILX^#`4(&lt;U
MGTYB94!B2?)#UWEPPX=KL8[*&quot;3+R]9W(9^+CM0/TIUDA?JC3!I?CRLU4.GYD
MU&lt;I3X8!S6_D7&lt;%'9WAWL3X&amp;&lt;:0V@!9_N/04Z6N^Q+.J^2,3(0C'E[M&lt;O`)3%
M&amp;&amp;P783[US:V&gt;(;6\GGR.1Y^C[R\]2DVSR?77SXK^+[9H4&lt;_X[0W@ZA*``[6E
M04Z?MJ)&amp;\&amp;S('&amp;,[=OS?4H]THZ`/I-(1ID&amp;7N;\4!W\A96`&quot;I0,K&amp;YBU-CS:
M?*AWK&lt;[]'Z1;V&lt;&quot;KZ'@W#:=#'&lt;T?J3:?&quot;LXVYCV:+LY\V#\&lt;X`&quot;RD`.+L,$A
M13/KMQ75;1==8*1*2&quot;V]4!49[&amp;6_;07;!&quot;E[)05[FGV@6+K=(C16].?WYV=#
M8(OQ$YAD^MZ2N1OR];FQ7_AZ*;%34&lt;5;*&amp;_0#DU1E&gt;\`'+J9_&amp;3%6R'9`8QF
MM/?OZ^E+=&gt;A\P.YY&quot;CRVFQK%2+/+4.I)&amp;\46CVJ\6:M`9S0@B$.3PT`186&quot;[
M]EW&lt;7!(].ZVJ4&quot;#W.O`#%3T!=)6@!G&lt;^7V_2\I2\]&amp;'/V#_;0$I`:KW#G7E#
M[&quot;(T5OQY(4)W!_OXZ46F7;2^_&quot;TA$9,O8`]C!\,@*%O37*A760YSA4[#+PP\
ML1VEC&gt;E1@]YK+8=:T3K[&amp;XFV\V14)D;Y&quot;25D0B&amp;J7=`C1S:-$OFY_&lt;C;#WK+
M_5+LV?T\Q8=Y9L*6TL($OD%ZF,J%2'C1U&amp;%'](#&quot;?;\%1P@+;&quot;%5?R)NOV1U
MWB!OR2GC19XFM.KM!E7QOE%=S,L&quot;5VE\QHV#%,1@PP=C/&gt;9F0O?OX$_.%O0/
M&gt;W^D;I,'2=XX/\9B,=6^E=)F9K^P7F.U0`WE&gt;2Q=71&lt;6U.JU,$?!,;LGLTR-
M6KK_L-G8WR7A^U2/,XFO;)BT0F4$7=TP6/,SQAA_(E],&gt;T;`LR&lt;,VCH^GO8_
M`G3OY#FV@%X.FO7&amp;]*&lt;I,$Y0:DKH4)&gt;NR/S3+@.XW'S^C$D8`E2%3UX8&lt;7,B
MS'Z&gt;F&amp;`5%Y&amp;]@7T*^X5OM!&gt;Q?@H(9$3Z]`]+X;?&lt;WJ#6.NN'VT!,#--&quot;.G&quot;.
M(]('9!TAOY_;ZG$LC[=X8J4=_EOL,1&lt;8ORO8=GBTX:/BKS#UWY;L/_5\R@2W
M[B[G2T[4;I[U?J1I^\=&lt;0J3\[0&lt;]CU*K=KVA&amp;V6D0U4-+&amp;9Y]RVQ6NF/02C,
M]!369JX&amp;,N@?4+ZW-H8L[&amp;U[L&quot;GHW=;.9O$;P(;+E=OF:'[&lt;[K&quot;[.OM^M_._
M&quot;($5J/Q7OSR'M&lt;P7);6Y7L$['Y0($YP6X-UY1.4/4R9+&lt;&gt;?T%*=C]=&quot;,A&gt;B&amp;
M#AOWW;247'PO&amp;(OY5AV;&quot;#AR&amp;5RV0RAUJH#4A8^)&amp;RE`1&lt;&amp;D_&gt;1C0(/^M1?P
MP`I][NJXHD!5ADG$?)K&lt;`!;DY1,#`E^#,MVK&amp;7,#4TIU2RT.&quot;$A@9OE,UW5&gt;
MKMU4Y8VXM&amp;#&gt;B3AM3']Y63!]Z-+KG?\&gt;]WBY?&lt;4G23'?,X$%)=9Q(8:&amp;3VPD
MV++@B*COI2\:Z])UJJW.CYN?G,(PLI*^@6,C8.XMQ3\RS)!DS)F#B3QN:C,O
MC^O\&gt;SL5B8)M6I#]EB]YCB`@R,PRT7)F8^S1_*+20Q[B0:6_IV3HJ;-:5AM&quot;
M;OLX&lt;O'@2U)@&lt;%K%'?FF`GJ1Y^=1JJ9[AE;1=^&amp;/-)OK8?EW9VK,I%OWI)ZC
MP4X6?*&gt;=#&lt;GP&quot;W+XEFI`D`V9[!`DY.]P,&lt;5\@Z7Q27IP%O`&amp;]D]:[N/[:W-#
M)[&quot;N22G^(5K&lt;,/=*&lt;)&amp;B7L+09YK??,&lt;&amp;[_(5(WJS5XZN?CV#*YC\YM/XRBI&gt;
M)0M\`[5TT=9]6\$^NE4GP=F$797R+=6=&lt;FQ;]7DZEH(2T$_:PE#TL`R$)C(*
M^I+LYYN)2&quot;V*A+Q@,@+)A`6,T0AM\B:\M%1EN=V#2[*PBNPX.\?$,(GG8C*_
M_]*+4UZO)USTYJ.?W=FQTJ?,+US4X'*8=E?4E$=5L_^CE2'SU7&gt;@RFQM-@DL
M9]&quot;04\D`!Q,KD\8_?Y1[DQ[&amp;*U`%6&gt;C$9#!#S:N\['S;R-7OOW&quot;^_OBHGUJ&quot;
MK:]CX)!7O&gt;#C8'R!&gt;`!!W6T`?S&quot;H@IF^S/-B8E-$5^Q;23^'F!;D_/)]9*94
M&quot;C.3Q6:]3DI'1&lt;.A,)=%7\%!9\&amp;&gt;&quot;&amp;9LD#X][OJNKK`3HL;)P:F,+Z#-S%]U
M=L!W[1=B\&quot;[S&quot;DF)K9!I//NS63P1(&gt;6[+%&quot;VK-&amp;OTV#M5GU8X[),WPPR&quot;&gt;#S
M9X=9U1[*ZW?^HV*MC%O;`&gt;ADATD;V]C'2&gt;J;3:SQD^1S4;3O)70#SOCH^Z=6
M-@X&quot;YA=&quot;`Y$I2K^4BQB^&amp;7;]=G%BJ]Y8(GSB0Y$@R1;N=`#;=H:,MM9S@`I-
M(#UVPP1/O4U7=M&gt;AV5JCMR&quot;NC\3X,-+D&gt;W2P\&gt;B5SL-\6D0Q/.AXXB?W?*OK
M(,WU+#+M.PE:B&lt;L_[PO+*]F^L&quot;5/\W0@+-Y3R*2&amp;L=6R;/`U0IFP0THYJI'E
MZ;8&amp;GL1#&lt;*\Q`-*]^G7&quot;+E8&gt;][GDASLX$*^M)^WF)QUAPBHGVL#BDO78616=
MDH4==CL\TH^&amp;NG,J=]5$#8(979T&gt;];TI:7B%#A4_?/;^:W8^UON`CV!X4&lt;I=
M!C9+ZP,4!-&gt;M/I?8\W.*MO@WWRK&amp;;,E&quot;5!#;]4O:-9A:B3)-K-&quot;RN-(1F%.Y
M3!N0P!KI+WBO;@/_Z8_K/T'=^;=3P2`P%A!CO5@(#XY-'^YQVE77^-7OM/]+
M$];G&quot;M)Z2Z\I]GT&lt;L9L@/_!PGRSKODI(Q&quot;=`?0@`2;5?^0.7H;VZ2PR7DY1W
M,?!PK$E(3Z;)O/WGW&lt;O!EX;`_]I^456O;OKQF3&gt;_6J3-W0:295:8:59N?+NN
ME'%?*&lt;N.3KF=-//ZGZL)#'3&gt;&lt;]Y0__CM^GQ\S6*#&gt;#3W2/X&quot;'E'/J#*+2VL?
M@M8(57F[S&quot;&gt;!6-DK]O+I9Q=0T&amp;1N5DBWPO/P0.)G0K`[$&gt;V'N`NN676.FR+Z
MV_*5V[]A?L40+IN+*4Q&lt;=ABIU&quot;&quot;D0Z;S!A0(&gt;7Q7E7-(&quot;FZP-IY5ZZH)XNRR
MH&quot;4E[G_((B^9-5'W76HMR*(P$B?[&gt;?6)]3VFEU&gt;S/9SQYE!@@':?^GNUS^)]
MEA&amp;^#ZRH#,T5?.@]-PO-FG3\Y:4G&lt;KHPL',^+SH+=5+DB*?:52'PKA3#E&gt;^5
M$CTLP&lt;V2&lt;%M7^4HK,KOQ9B^&lt;5&gt;+8F&gt;&amp;[7L.+QT\&amp;M2.]I:)/S21!/ENE8NV+
MXFQ,3^EWGWB&lt;/+SYG=4RVN]-@^UQ4%&lt;],NB$N+F_'C.&amp;-'FMC-'YSR;BU^:X
M_^O;7=$-5/5?TRX5'N%A*&amp;R:;493Q,%`)0LFP.R5FR#TNCVP^H(3B(SR'1V,
MSB7ZAIA)7H^0`440+0O`PV$)::$TBA?%7Y7#SQI3XCAMF!NL.X;S!:T(/F3&gt;
MVYC5O[R6#LR*JE*:.DCG-=JG9;-&gt;7D72^J)&lt;/.$I/3L])$3YTWAF&gt;X\.][H8
MSO9LGSUN/[5%=[U.UO#TB&gt;)#/RYKB*]JG&amp;=G=41XZU)5QG&gt;(7SZ&gt;'W#C3&amp;V2
MLBZ:I0M[N3P5;_3.\.)M;4K,ND+TX]#PSR&gt;[OK-C[%A*+/PU%3T1=E(DOL&amp;&gt;
MNPGO1;%WG(AUQ:8QOC3EXP9G[2\PBM)1H]C&amp;PT=V9I#Y.%%ZL*U&amp;#`](&gt;[;_
MPC'-KL0-A[:X?-6VJW:()5KN/L;1GS1S&amp;@W^^[T'^VL^RNFTO1JA235)SH8#
MSO-WD(?FF*:1(46CNPL&gt;&gt;1^=XW)(CJ&quot;I#O607'NWVFKX(?1^+C;`+&lt;2&amp;1[[[
MHD\=&quot;8/!S&quot;+WW18^P0A^_]&lt;,UQ=/RG2'-WU,ETXE-&gt;X08TDG47S@L8F8,PL]
M`IC@_+I:Y+*R]3IV4O_.3W`1(CN$W+-7#FZS.NFPS*-)-2F=Z.C_E5?J[?B9
M-W-**DZ&quot;3Q0?+Y&quot;UY&gt;S&quot;Q!&gt;[S/OTVY(Q*-+BO&amp;2&gt;\NYJ\J;VZEQ;_=*_/&gt;&gt;K
M?-/BK,MASFE!&lt;2K,R0;];-Z)#&amp;3I'XCF1XMJLTZZKR\G;6Y6?H-P&gt;VM.30TY
M+#]P\Z&quot;F)\;M8/T@YA`.87P(#7&amp;_.9I2H8Z&gt;E:*Q+M.)[@?7DK7=-Q4?+&amp;RM
M/#'1G[:)T#X&lt;&quot;@E,2?%^N6D&lt;M@8=;)JE&gt;&gt;?X#:/Q_#.V=-J^Z!#T&gt;[WLJIE-
M=!CQK&gt;(1HR6GQ4==SSTC$NV`YL:BY3R,(&amp;F-J]NV@D.&amp;J5]^TB`&lt;;SP(VR_2
M#1[V8&quot;9]C6G^7=F)J.7/5OEE+V#&quot;_08C$W=YDC!.YF^V5$I_QL.%)&amp;873IIU
M3T?^,&quot;5MM_P^^!/KNWX]NJ`Y%'PMP`K&lt;2B-AHJ:&quot;+5L&lt;.%=5;R/%P7&amp;WU+R=
M8(,AXZS&gt;$T)7!,P;Y'/BX6A?-M]&quot;U*Z[_7=_5HA6^SF(&quot;V6)XFL%T]?BUX2&lt;
MFX?PSKM8V^,`^6%S.D.PP'9C2554RO*=Y*EZM:&amp;OT^)E!D?#$?'?]E%VTZ#,
M8K$%]HG9+8C.09.5:&gt;&lt;/'Q]B#;US!CW!/R:E#6,17ELMU;N:S1[9#]D[4(:2
MC)5?.\N&gt;F74!T(&amp;F\T-4]D6@X&quot;2&lt;JF&amp;'XVI_,CT.5V1;8%.:KK9:W)_7_R3G
MQ4%.C.YGQ1B)T%:]@SALR:O[06&quot;563\087$&lt;W'7KR(_\$$)-0JNA)Y&amp;2R\[\
ML48:FGH)D/Y#BV%&quot;49^ZA,:/?&gt;_FI_:/V\MC+I$!3&gt;(YRW$NGK-)Z=SNA`CZ
M&lt;8[\*J3SJC/UO;&gt;6I8*1T?R0I[_19OT.P+#A+I`:/=SXHF&quot;AO[JLX6K:0/[Q
M0][G&quot;&gt;.%M+1XU&quot;Y@!2W!Z0/9]TY+:ZG0Y;_=0D\&amp;M&lt;34YS?86T(IGHWFH.7+
M?]!3K]^[04(22(\Q5J'T@GDN%R0/)!@[++&lt;&quot;IN8W[^2H=&gt;RH_`B_.&amp;;D.8Q*
MI5Y''MA91&lt;P?@$^&quot;%%8:;]E]@1[1%&gt;8C:9&quot;C6\DKOP,5TQ4,R33&quot;]C,JT283
M$S$R+U!2&amp;POMAIH8OA@D6_4S,LSP_BW0\(IQBI\[APV(X8HB@JAMMO$?'CN0
M&lt;@2N-:2(,QAV&amp;9K/;79TTH8EU54WGS,=&quot;DQ'!4S5WG9&gt;T*.0B8M55)D@7&lt;-'
MAJV&amp;5+P*'G#H=-;.-,&lt;%Z`]MRG;\[_6&quot;JCB%B#=?YSPD(-960W=LN=&lt;&quot;UBCH
M=AS&gt;-6.-?+=.`C-HT-%QC%-OQ:;FD`N(H(1CW0V[0!?S2]^VOB1W77Z$1Q?L
MOU];6T?3_H?62EB`E&gt;2TQ63`?&quot;&gt;\K`&quot;COVKIM&gt;5G'6V[J&lt;T0C`&quot;%&gt;RIV2SZ.
M:PA&amp;5;&gt;CTX%3_\&amp;P0W+?[M,CD#%I.!L]SA$,K)$JJM&quot;UI+197#`L2;K26&amp;A'
M?^]]9-'KNUXR'S8+$Y7\7&gt;1,S\&amp;UJ`-_*JYD&amp;(`ZO_62:WC1'&amp;[P-LU'ZN3&lt;
M=D.QB8)\&amp;T,_L=]!CGBK-&lt;3\&amp;#*P\R8@N\/]0LH+SFY&quot;#T1[%VB%$_*VW;UB
M)Q)]J@C8T4;5).HH^N2$),3*WPSX%1&quot;UAN61S6&quot;6@$32%KV`T&gt;[.4K/M'ON&quot;
MQEJS;8?JO4_EM%W9ES&lt;\I4'K^01]KMI.P+T^5QJR6^'M&quot;:RI,2&amp;_:EB17DPB
MT?&gt;6SU+,ZST[;JX\!2&amp;@GCFZI4]-)0WNR@_**^$O[SLV!1X28GH!W2$U?@[2
MJ]&lt;*#B&gt;G[+]5;`6#'$J2^'*Y+CZF*=!(ZM$&amp;?5J(;9[K&lt;UJ&quot;^3\,'&lt;KN&quot;`ZZ
M-ANQWRALB[L-,*NNAJ&lt;)_#OP8W?EB]_P/;G[]`?5L6J')R?&lt;Z$2828B+@&lt;[?
MT[UJQP_'@2]G\0O(]F(*NK^\:*B[O=.9HO_=([$R.2=-2D%OB%$$IJS7&lt;?,E
M5]AA4%+OVBJ$UG%IU2D?YZ^R%!?#4N;[FHDA=P;)YF\HW+7?Q/#?K=,[8F95
M7MZG1&gt;2@8&lt;J&gt;\SG]%J,&lt;$&lt;[Q,/+J&lt;7]/)&gt;X`\:2[R9SBAF.^Y^%X&quot;7&quot;,X5?^
M34LN?7X&lt;H'@M*YCI&quot;`SFG![2&lt;S[/9H?DO&gt;0.7E@PKJ*%&amp;]O-#!+1J&gt;YWMK2_
M+?3J\_9W\3_=LXCR,R&amp;KK\[QMK@@.^F&quot;!+75WZ&amp;M##^$M(W!ASI9-0B\RSDE
M#?\PWIO-^P.#*5//A;'SL&quot;JSG53OM3OW=HA:5;+'[*Z4A`PIPX=`M0V0(Z-7
MYA+J'L0E,K;U2FL7P5\(Y0JVL#O!L[WD\-_N59&lt;&gt;GQYSSVPV\9I&quot;6K^%U*/7
MS]:5)P*L*S=!RW2K0`9*&amp;S_4W2AT\D?!&lt;0&quot;B]QSE4;@E(0DKND^`6^&lt;A#70V
M!K0)0TT2J&amp;WH8#FWOG0$4&gt;I1&gt;%;H!8#@7&amp;#/[)O*@+8=9SL_)3*O?]:B*`3&gt;
MR$TE&amp;$9EKT'TO\#-^!-@6'AM8'1,DE#&amp;AP/-I;1H!O(V])41DH%.2_IQ&amp;RWP
MMK&lt;)$ISC0Y#&amp;%[0#&gt;=K/Z;''`)X?&gt;&gt;=#LU#Y:&gt;CR6LF9OZ69]T.QESE'\V3E
M#R'&amp;'YV#\WRWXE?%]=+=?-?&gt;8(43D\EQ1&gt;+LU-XBE^,F1XXO7N&quot;3R!\[W:#=
M4XTV;?$#%T09;+.FF;JQH&amp;?'N25AV(EV@SZ3LHE])(PWPERD?&amp;HJ);YO--)#
M7+V=UK-]W':(%&quot;F%)*UD`HJ1&quot;`6&quot;3Y8EXP[]O!'#&amp;+]3-D0K/W?\:^B76?G(
MIG14JJ;D.68SQ3^%TW[1)1F+O^&quot;*)YO7W&amp;%3-;[:&gt;,&amp;NE&amp;4I&gt;?ZN=P_*QR]B
MC+`KT2/R?1T6&amp;8JUR&lt;.JA17MA:ZN?D6GHDZ6DLX?-1DQ=3WOK/-&quot;_+T1^*FG
M=.9!OX$DXG#D/JT[^Q:^`F0S#@/MDV\ZY2?%M/?O%60&lt;$@8:9LV8VPWUH(@3
M+)]E&amp;3;P`6_@@KM,&lt;QN-YSY)6S^=W#_:-NRD4G_M=-I&lt;Z?N@M^K.R%SB7&gt;BT
M6^W!&lt;7A#V6CEP_&quot;F/:!;+G%91,B[@BIM6L$K#;L$#]9;?2_)K'U9NMPT+^;U
M&quot;G(AU]MDE.7B?'BUSQXG^Y6N2_'&lt;XVRUHV&lt;PQCX,5(`Y2#=*`CU2SYH5Z1\3
MP&amp;*.KKW+9U[.+(_J;5?&gt;IOX^!?]29]'[6+Q[?'V'OQ[:J?:[J*LZ()NX'[YU
M\G&gt;2\7B2NNF(.&amp;O.+V_]0L/N%81.\,&lt;:*C&amp;5?`R)Z^/&amp;F\!FU7M_&lt;7WQV&amp;_,
M@K-W,S'(J.#@AL=#@1?M'&amp;X(;,/;^22I!V&gt;UG/J&amp;47\K3K/A(S21(^4[F1.5
MZ.:;EA;WX*WN^J&gt;JNF(*1(]D[0@7DY)&lt;!2\!K7=*GU*K?;$-3[HZ_JHBQ(AY
M9E9ZL)O=Q^&amp;6DAXG?ID5-RR=!.L3&amp;)99VB+YRX@_(=SW^_W=4:%B7/*&quot;+`*-
M]^[=K]RGS5-8;6BB7\YK*)$41OJ`;&lt;S19H.E!U1&lt;GC12H6&gt;Y38X9:4EHGO5U
M(/0+X\OU&gt;\062C7M9Q?'B/V&amp;EAWI7%!,9ZZ4!,J&quot;S@6F?;7(XNE&quot;PI[&quot;!8_W
MOT\&gt;O:G_'(=('S4P])&quot;5]&quot;O)YO&quot;3WS.,QZ5_92FY`F[`]LS$N-`T&lt;NT&quot;5/9X
M&amp;L0Y`Z*A6QFJEAS-]FTGCS8A$H\/*?$.0\$S`MU^0%XXE:$S??I5&quot;6?/6!2-
M5+K]D+&lt;F7+2TM&quot;C*&gt;=1^J*?INN4`U&quot;\]2?RW']R*X52P6]SACFKB1D^2LA1[
M@V+&gt;QO+^Q'$HR**_F?64TZ(Z/6:V$_VR&lt;:&lt;R7(SAS(/&amp;='LN?BRCG7'!M[RQ
MX&gt;&amp;_*^S6!-G*NL4XR#D3YD]`B9)&lt;-QWK?A&gt;ZQG&amp;O#A&lt;RPG'\HV`B/9Q*ZUV0
M!PF8LJ&gt;WG&lt;S2ZU61GTHP.^Z^&gt;^1&gt;G+Y=^+=N)M'A;K[C,5L4@R.('M_XP6(H
MXM9&quot;LI!_5&gt;2^8UWTI[2L;U1\D^_PV=FI,-AKTCL&amp;9V'_*18-I?B%UEJLJ7:'
MYYN'.*9&lt;^(I%[`WWC:H'#5#/Q7O%3^K?+Q7?J=C/2\(Q]I&lt;8HE5CTV9N)&gt;C]
M&gt;`G[04V0#*MK.&lt;%ZR)ZW#]1%=7G]96_;&lt;*DY6/8KM06&gt;B,Q\JY39X,_Q^[OQ
MSC!_!V.0?_T7(^FR%D-;ON-M&lt;#NQ(&lt;3\TY?F)&amp;2OU.6N]E[!A[24&lt;!6J`2Q/
MT=C*0GB)'MS@C6Q&amp;:[N9ZV/?Q:TY\.3M`^KY?3Q*`IY$E+0W+&lt;ZAG\-*R&lt;_F
M@'`:G[S&lt;KE@[$XS;=Z&lt;#_L^B^&amp;=K%B&quot;\BWGHNFW&gt;8$:HI&quot;CU/_*&lt;Z-6P;,]4
MB$$%5&gt;Q&quot;-U^/J&lt;\I:!65WW'MR&lt;&quot;1W$DR'488?V:Z?6)794LS9/ARUU`I=7&amp;=
M;#/YWZNQ&lt;\?SEMKYA*Q&lt;)[_E]#%\.,_?*E3-&amp;];C^G#'%`RCG'/)OM'$33\9
M-&amp;V8[P5Q\3U0'@=2SCB&gt;V%62W\LQ2EQFI9^V&quot;-+Z^[%5G37&quot;9N@&gt;4P&amp;[G1;F
M=&gt;!2G&amp;R!V+O[O&lt;M&gt;1*Q(H8M/IF%SP[%=O?N&quot;95/8BMF@]3B:P,_U6\WZU61Z
MW/;Q6J;ELD43J&lt;NUIB7_QSP[D&amp;G83&quot;/YN#R;C0@SSZE3-*0&amp;T3]^3)]GE'&quot;I
MK48;#A2ES.+H0,D5)7L\?U:UX8E/Z:FJ*$;')6GV\R#VH+&lt;&amp;5R.PB.&lt;UAX)8
MNVR64E%9:.,,AV8C8O2F5_V-UK?&lt;'-9]-QFAXB!2\1&amp;[I?$?@RW[K,52&lt;%YC
M\^\'+N#\`E/HZJ0H70ALIW[!Y8/^4(%CGJA](:1C&quot;J?MTE=BVZKZ+PU/35Q`
M1'PO&quot;\C)VOY+ZQS5K.BY5&lt;RB%1VQH!.)LBDM0;JU,&amp;7),$%4!6X+)O,BB\E]
M3K+(P=W^AG_NRE&amp;%J6@&gt;W(KVZTK53OL9&quot;L-A'429YY/5)M&quot;?\&lt;%ZGXK$^5\P
MB3=C.X3)21_'&gt;Y;5.)Y1XD=S``D*2,ICB-Y2-6O?3OJA3-1MK'W[5L7HFNCU
M]QAT&lt;I0Y2:E%Y.%FR_$[;?CAKMV9Y$G?]1VBS[^_!$UF83_V:H``&gt;0BQJWKK
M^/MP9SD98F-M/H4G!\,&gt;@Y*!3II-=Z=&gt;6QQVA5Y6AJ%^G'T0EW)4G(RL*2E%
MBHL+EK,W#.&lt;`':LL&gt;TYPM&lt;H_JAY[U\'9T&quot;KTK&lt;`SJ_.7O&quot;37`H!-6C9ZN_;F
MI(`!+&lt;[H2Q1Y54LFPMO[MG,4!V&lt;*W5*2DV%$HZXKB?NR=#=T1V&amp;&gt;9KZ#&quot;BB/
M]`YJ3?VRE;*$^BQF7:M8\M9_W=!9R.Q7TJ5`2[L5&quot;K#.R,2';LEI60MF1HV7
M`!/'&quot;_=2]U2[DJ#SO*.#/V:;%LR;DGGI-SO*&quot;M[N&quot;/[2'0IBHL^=B8,@[7!?
M-91TF[2&lt;PF0-W8AVN@S+XFXNZH0YEO;#%IB&quot;\7IJ\*INUKD1U1TK%%C=G)*;
M'T0(*4\3FWWR,,&amp;N,7&gt;VP?!B&amp;&quot;*6USL&amp;M-!U?OY)57`KQFIO/;@-#TL2@2=:
M_9,#&lt;P:=K@+V/'H%@=%+S282^F89&amp;T[@2/Q8EUS8&gt;:?^7&amp;3^J8+U&lt;15NI^%A
MEIO+&amp;6*;U&lt;:/05R;MW9]1;I#$9.5!#`6Q1_S5VX/[&gt;KP__=,^&gt;K*6OES%=6)
M,\T90AHS7I1[5TD).Y(D0!&amp;[Z,*J-7[AXPK81_KJ&amp;YI'@+`R&quot;T,_/&quot;VP^#(C
M.H_J4.&amp;KK*PVU:PM&lt;1%\Q(()[8EF$8TMR8YCP,#$XO_G8A1S0YM6AP//;EX0
MF.M,1B&lt;XOT'A^V4N.3,E1(N!E2XV+,#!?,G)643197HAP)+3+;&lt;9T?,R)#`1
M.RWI9W).?$98]:WCGL74\8VL&gt;ND.H??[M94-5_CXBBJE9UU=SW^M`H9]ZD@\
M0Q^R]LP0S!T&gt;G12CZ*&quot;Z^&gt;&quot;,LB[S^1I[=&gt;F/3^S19TGL_'[H^.QPBX[?A!=G
MX^;C\GRSD)K,()65'VT(!!2^?EH?4=$NG)B+&amp;AL=&quot;YEO4?'=M/*/@$S4Z/^\
M&lt;?;VUK-RP;\'C$:;?D?#MRK1K#QM/_/&gt;0.ABOD@&lt;BMQKZRG9^&gt;:^!?[)GJYC
M19KJ#Z_@W/)[,(-BP'&gt;X7?*F:G[*JJD53)0EJ=D(D1PP&lt;E7!J,27_JL`=SBX
M[,_&amp;!$3'?W2&amp;66AP.]E-;&lt;@;UO$^379=PNM/@DYF=:^@-P*[%7=E1&gt;$F]&quot;^N
M]7E9KZN&lt;I4MX8W9M+(.FUQ^2LKJ4S+&quot;,^E@F2^933C.K$%TY+&gt;K(V\LSHA&amp;W
MD/\RM;_&lt;804`UGQ1&gt;627^^3G;_(A+EZ^ON:[Q[]P.7E\JZ.:AJ$13+C$ZD:3
M65Y1&quot;&quot;+EUF&amp;S:,^F[2X=QWIEI4+RLM=(&quot;9C4HH,'KH&amp;1W4_EM&gt;Q^_K-V,*]-
M,B&quot;)])PU,RI%;'@M_I0IW!`A?KDH\3*VLWU9&lt;RLYB_C&lt;&lt;&amp;1'\679L[$)J`2L
M^_7CPS`.]T5*''[;E``5H[`_UX4=*G^UOU]N^+B!6R&gt;Z5W/R?@HL0\&quot;DX^ZY
M'4YR947:W#`'1#!2IL-,G]TVYUM@H@!$KA5)/NSJA7M#;\.A&amp;WUWZGG7(FC[
MCR1P:$VF`4DV5N*_$A6RD_+L,&gt;'IKW7@NXDTDB^[V&gt;:*&amp;*3M;1X1IEZ&lt;+:XZ
M$Z)&lt;&gt;BJF#NZYE,&amp;?Q$'L8%#];&gt;J6`E:&lt;I1&amp;-^^+*1:NZ'[O&amp;4$*04&lt;?SYCP[
M;L+_J;\LIU9F&lt;[DWSYXL8:$/&amp;Q%FB4F)N[U8C09((90BI@[D^L)]%&gt;38V8!/
M70*X$J;+CFA^.R%HI9UQU[HWMS7L*(X345&quot;U5X;%S,I3J?;G.O.]F)S/#_X%
MD(@QJ9U_*JJKR]7T2'C=)GXPJL&lt;;7NZU]R**V!RPU^XB[Y_IU!]?:&gt;7^AE+1
ME:@$T:,M'$S][5)U[&gt;T=\3MS&gt;*6D_-%J^XO,52-^WVYSUDWN-A`YP_3'Y4'6
MLV/LQE@*[X?ZV7V5V9=$*:P1LHB(MV,-ISXT@E2U`BM`ANVKO$^/J&gt;-J=&quot;9U
M?GB=&quot;8T&quot;:8G,:!8J]6..,(.\.*&amp;*EC1PSP%CG+&lt;O&amp;J=ETQ@4@&amp;[.]UWA3;(=
MI&gt;JL?J@[&lt;:`48@VICOD&gt;1OG=;:P/O5W'#P].B&lt;7:6D:[D[S3$C@&lt;40.0W&amp;&amp;R
M)&quot;D$6F&quot;L(W2[K:RN&amp;377U2(4;B#HUTFJ*E79F);FDI=TB7P@)KU9;_WN#5G_
MD_QOX6A&lt;!OA1JPKRLPL_%^3_Z*5/YJ)E2`IS3#YL@5B?/Y(G]OW4K'EGZ&gt;.Q
M7I-^[+4^VB]+APMPQ?$(V6U8$YHG\#^\8)+8:)#^&gt;=O&lt;0!#'[&gt;/(XKE/&amp;HOB
MZ;+(N5KFA6B?5&amp;-'(Y!SDK3;T(S]-ZUQ;Q=&lt;HH1-R2&lt;%&gt;,[^M+A:96#$BF04
M&quot;VN3O#6_N7)R,BYN6SL0Z&lt;1G!F#LI\UY!N\9CTX02W?W_^R28WF;A].62(#C
M;3&amp;KZ*)668FT!3O*D6V9PA%F**0^R_;KG&amp;*]PY.BG/,]&amp;B\DD`(Y``%8ZP&lt;(
MVON+ZUY)`J\SJ81`AYCL_:VO%+2QGIT@%7'/&gt;:!:P$[$\X/\^MY8JZ(I\NW:
MPIZ@^C&gt;IC?/ND&gt;2-^Z=,WVXQI!O5XSPL,2X.E_-$`HJ8B5II6M&amp;[JX^\&quot;*P5
MG&quot;5J,S_5MI:'ZZQZ(,2A'9(5M[-](\F3T0UJ8EQZV&gt;@]%AYT@38U77:.!-'L
MQT3Y3;4GM3+W3D;5.%A\[`M.@%]BQDA]3&gt;)N?E4^SQ&gt;1R@I8V0(&gt;OF1UQ6#Z
M-N6FA1Y9,G$&gt;.-R69+T6,WEMNC2;/)TFK77NMTL57'3DRUG]OEJOKI*X6BDN
M!;9EW6&gt;]1\[`651VSM,?#GS9VF@+4)K?GOF'W3SO+L[,!CZ\61&gt;/ZXK@K@3H
M1HD[6\T\1Z1_?FQWV%J@JJJ;@FPN\(A,R.^?H+^3Z\*R[QZJ&quot;43Q3TC)6&lt;A%
M*[S`V!&gt;FG'X\'=09&lt;&amp;Z+$ZD*J,(`&amp;[-*8J)*(KCL9[F&quot;3^=&gt;L]NP]!8).Q&gt;.
MI:;$[`D'Y67DW0J\3:]9XAYV&quot;9Y]0U6,*SD1E(KU:'P8A,)*XF+C)V-(J&quot;._
MD,6:;9:*JQT.)[(#E$J2!=Z[G&amp;:@WG,%#/F'Y+R0_F0E;*ZITQQQ^&quot;Y,E^DQ
M5YNX709;S%9OZN6&lt;AF1O2KY&gt;'M6DH&gt;!0MB3K'SA1_28EI8AWF&amp;-0K-#&lt;)6@)
M&lt;(/'!U8M&lt;1'5Q1'(T+6O;=#PDNLX;OLV.NPG,W]9:)&quot;C]S)@39BDI;7&amp;:I2=
ME)2:/@!VRFRU&gt;Y@&amp;]/XPM7KWAG`XT.CNAM\5/4E:=7/GN_VYCZ'!O102?IH9
M(X97!U'G%3V#WR!BRHX'8LO)VM!:37&gt;UT/`@T&amp;`D`9R:@NMVD^6,RXP9.1E:
M5=SKD.&amp;%?OX&gt;7ZB';.V1MI;)\QA3PSY6::P=C3!8R'&quot;XBIV&amp;L6?K%:8A/[&gt;'
MAKPM)29+2PM!%0=\/B6W`;WE02&lt;AQK,_G?W&quot;4*AERW/$@*R!JU;/F(\D&quot;+&gt;3
MO4\'H!;29-?_7-W/M&lt;0C/&amp;LKK.2J6R=KO/!N'%H2&quot;&gt;BSQ&lt;%-9CG](@'ZBZ#+
M&gt;P#6K7&gt;Y=+3:O$E;RUA``!=(Q*U.V/ZR)\+1N!YK==2:25ZK,PQ:]Y5$C1%9
MU@W*B?+Z_EWU,Q\G.)AB)K4X[78S-,V==RN&amp;RWOOG1@1V&amp;F(AYF%(O&lt;T&quot;$$]
MA/H^:S&amp;M4_UDKDJ;Q+K)YX[_!4YMH5+#KV3T&quot;^KIQ,8/G&amp;^?^VF'5(ESZGC*
MCJ$8.#.-++]!43NW6B\H&amp;5ZBPKS,E/EFHR2U_23Z&gt;1&lt;41!\I)6J!_`HA2MRX
MX&gt;N&gt;,BU/T5FR,G/@8WA,1UL)ZB?&gt;Y-G3Y2&gt;6597C_2C=C\J4BINO8,6_5C^^
M8+!BJW+&quot;'D6B$1M!A8XKW%/XM@]95%`8*:`&lt;MO4-*YY)UL&gt;_K+0PGW'5@C_:
M;'\%SR[8C.L?T^RU&gt;63_B#CI#*^FPYC#PVIY?5TMI[_IWM2Y&amp;DYAYX16\#\3
MD@`6_&gt;QQ87L%&amp;VH-);Z5SGI=&gt;P:+(9Q9Q3&amp;7L(H+&quot;/5EIV&lt;9=`T!`SDA\K!,
M^?O.GZ#K39QWKF&gt;?]#O.3YUFG^J?B.M+,K:OC?W?OIY&lt;&amp;&amp;+7JN=8&amp;B)\88)'
M.L71H%;M,_&amp;-445.XNR0M^$;?Q:POEY&lt;W'P&amp;I,[MTE?5E2&lt;*.&gt;&quot;&amp;J%2_O-,V
M7&lt;'H96`*_,5`I;6?^&quot;)^&amp;34XV&quot;+5QYH\9,8@;2;MVC=RMB=]!NF&quot;K-,5`4T[
M'SS3:.F6&gt;105&quot;!DB/KZ]H1)F(&amp;)IA&gt;`:@2/*:_&amp;X`F8R:T3J!7FXB)J8^35-
M[$&lt;,8HW]Y0*B'A#(8%_.IN=JAPD,G&lt;_/,=DI]Q!_SN8_A14MZ$\50FV`D+.5
MJ9L)N9V+Y]]Y&amp;*7\9FXLSKXG?BH`-4&quot;NB7+&gt;&lt;]S#W]G@!TTOO&amp;T6OT4X8GY#
M&lt;KS--1TZ_W)7U76Q:&lt;&amp;N&lt;T]C#VF@GFY;7=%8,^H]0MZUN7MXT7UKJ:G&quot;_NVK
MKG6)=7MM0A&lt;^64@(XR&gt;TFZD97NKLBJ5&quot;&amp;BI:K*V_LW4EF#T!^0.%&amp;!1KW2@A
MO&gt;C&quot;M8V&gt;`8:&quot;]6PA44W%5A4KZZ*%^%_$40$5OOMF@\J4^':]`T*,$G[DP=))
MU%G:$3)EFY+RZO*IZQC)U@2E!8Z\'@=.-&amp;R)A)BQCLHWWQT6!,G&lt;Y%V*&quot;6@Z
MOVT;=6H7*0PYU9VL*PHTBF%L=HJ=2S74GO@'_O.O!D[VLM8E^52MTN#$](8P
M(-UL5M,;*=W0SPC5G(RZRT],1F,9ZZ[@VJ=R;MM&amp;9U[6\4I&gt;MA.`OTIH7STK
M[&amp;4Y&amp;3LU,(W8?&gt;^(3*&gt;N,/BPU[I^Y@UO&gt;^CN*Z\Z.6Y#_Q;C(_C1NN]B5'(R
M;MG'-54(7\T.Q,V)9$B-C&lt;;PZ;V\,OJG)A\EWW]ZA-(C#EB-[9.9A-C$4=F-
MXJZ;/OE!,2)(_R*I&amp;S3FQU&amp;M58BD3B[8G1JL:!&amp;F9?8.[B4R2W._0AK%'&lt;N(
M53\%LX5@QC=A`%RSCC1F*ZIF$R.II.7WMG&gt;S_UX7Z@`BD'::&amp;ON*?#?M?!MA
M?J]532'S:&lt;0&gt;#BB^T[7GB*CKOGZ6DBZA$&lt;D[=*B4$:3X=72#.+*+G=%*6MS-
MY@Q;1?-NX:=X(VYET*N3`\;B1&gt;^]&quot;18[&lt;;5G!?[5#62&amp;5=S.RRNV;VR[D])W
M1=&amp;P-?A`LJ:SZ&lt;[!04D^*S43V7(]$Z_-R.;0&lt;&gt;LAJ[0+5-5J\NYL)%1P$L3C
MG9,?TQ.C0OT^5ZVQV_E+E0E1\&lt;#L.QY*LT^;/`P#IO*F`1G6I#$_''RJZ&amp;C1
MBH)`VW@;DX+L7Y@9G*\O?V*X0EY1&lt;+O?MPNNG&quot;E]VB?72%&amp;TM9GG;,?&gt;Y%HL
MM-&quot;;`R`%#8ZB#O&lt;PO%7_9FHM)Z]85%PF[6SW?&lt;GJH#)8RO'9&amp;K-[/^RI4QXC
MW&lt;8VD(J9)?AQ8/,!\1)B&gt;0_.DZGDG..HE117/R5-9+;8ZCUJ$R3=#PM8@99O
M,@9^1RDV4,J`L6P&gt;I.E6:%-34&gt;A(W`,6P5Q_PH^/:5X',TTX@;0X-Z'&gt;H8P'
M=8K=@DU-BG8DBO5F/QJ::R`!D.J+(65WOKLW]D\;)Q#`@I__2545N8R3T&lt;*#
M92,3AT_D0F[&quot;W.B;UI438?;&amp;!JSJZYZ/!$-7V`9FZDB*)&amp;])RY'D3ZC?9&quot;YB
M&gt;I:,1&gt;HF)WL]+#LLIOL@ITUQ-2EK,C=0:1E4FOS*3X[Y7-(3Q3+/0L;&quot;1&quot;2*
MA(Z/%A&amp;9DP$&quot;Q#,(%KI0:,$&quot;6#[P2,&quot;&gt;E#!9S'&lt;&amp;W:@W-YMZ&amp;Z5F/OP[9AI7
M^5.Q,$&lt;BVBG=TJ?E]Z)8Y2C-_0Q%]G^WICOT%0,^_V4&quot;_E1.O'#L@7&gt;ZVYW$
M$&lt;./`Y\LKWVX]X.?&amp;?,THF&gt;BVU:7N6/)*BYKT=*I'9+UC&gt;!SXE3-D2BOW(^.
MVBD5.C34&lt;`B&lt;+'F;5(=WH&lt;4]UO/Y_&gt;VLN%!4]WN7N&gt;%BH^_CN-]WT#3:RK?U
M;MIC&amp;K5.XXLX?E.-JNX7^;FK]U3QJ$@%-09=!V?&amp;FFX$S0=-0_B+6DRF=8V_
MF084RZ9'YC2ZE6?)JBN,B_$?Y_?8.-3E?PTO3B.%#1PU8M?.&amp;DO?C,_E)A$1
M4]#P8_*(?.K.3@XP10HBC3V;4(G:[&gt;E(\?M['ZS:(/GA&lt;6]O%&gt;NI:SI\'LNS
MS3%',]O&amp;Q_CB7?M)%^+I.)`#ZO!AVU4IQS9GW/;?4`..V-R#PLH)-8EN.`8N
MG=TW[0.G:8OB/WEOVJZDE-V7UD),#+QM]AIDW'1B-I;P5K@KN&gt;])4R^MYED^
M+B1HG5:&gt;4C&gt;A?:Y#)$L#0T$=&lt;X7E&quot;6]B:\;K!9)QB.^]*:`@+`Q&lt;`C;3]#V&gt;
M@C11P,PU^FYA:U:C9SWI&lt;@1OJ=D\E&amp;MZ.[VP/5E/GT]GWQ&quot;*4],HRT7'_UZ%
M/O[9[&lt;/?'&gt;C=2UY63'*%&lt;0.@BOH=XUMJ?/GW(:LEAH;XF6&amp;&quot;A'R,&gt;.04]J8A
M7WZ+&gt;6YLO/YMXJ&gt;Z6][4S0,`7G6EILC&quot;//'T'1*&lt;ER#3H]V_OQ=4\4)&gt;[TIN
M9TC:H,BD=7E#89_*JSZ;H-W9&gt;1&gt;7,=\/!D9\*(`ARY[?/S^A/T=Y\F7NN=L6
M8:Z1KK0TOC/`$UT6XX2$*.C\;575N\&amp;)DJMC^&gt;STZ`?JQ70\&lt;15KF!P\4)KF
MGZSDCSFJJ.'E@-.HRE&lt;C%&gt;A]4OCB3/1[2E2,G8L.&gt;1Q*F/9U[/G2IMC','6O
MI4KK[]&quot;&amp;L7O3,4`/]1*M?7-W:]!&amp;&amp;]FT?`UP?&amp;88CAYHGH3\W%(F4IZRLI=Y
MU`$'^#3A'&quot;ZQ,:R9)&quot;8`Y&amp;3J(M^\TRM-#\2H!5?&quot;[A+_S:9^-62QM=&lt;BW'PA
M(I?@/*N=I39K;21E/G*&amp;UT4SY+OF%VU1Q&quot;!K#1X(;HZ\4YLB;CGPS#)(L\7&gt;
M+UE8U@-#4]OU.QR.[XYD\F?D&amp;O1,UEE-]Q&quot;/Y#9$/[HZ!(J:4I7]&lt;HR]S=RN
ML^F-UPP](N-D^ZCWE=&gt;DLX&quot;-CAX7L^6Z_'KN9L8D]9&lt;&quot;&gt;JJY3=@2-#L':UYH
MK:3M);IB_#][`F20(F:O1S70(\]6R!5B.4V]+$`5@P$@ZW7&gt;JE5V/DZ'$RT.
M'\3MNB1$^&gt;P%SQD,35=E&gt;Y,EAGB%:P$6BFI;6HU\9F:BF&quot;G4&lt;0D)-&quot;R89&amp;5[
MQ\7M;TO+M(6DBD+9`9B4_\5&quot;/7/_PMUFU=K&amp;O?\9N-Y+/4_&amp;!^WCI2L&amp;@*Z]
MV3)_1]V\YRTP^JAXKRPCI3GX5U@Z&amp;2WVVS&lt;;`B8PT(N-OPD4.]FF([3`SN&gt;H
MR!;9'I04ZR_W^!C87C!2=$S##;+$][^2XC@;O&gt;WLHAE3I\`XJZ@+4&lt;5:&gt;`GO
M&quot;BU)*$O0B2$Q$6&quot;OLL2XV&gt;]9-ND$RXU/C=4258YEENOR:I!5[RE$R&amp;&amp;3H:/Q
M8PKO_AA86)XW;`3&lt;MS57*LYB&quot;4P4GE6&gt;K&quot;Q3E+O[N':&quot;,J192CP^[%M._#`H
M$[&amp;VLC8MH*1X7T:';J:(BD2XZP%`&quot;L!@G^FT//=QKKM?&amp;OUJ4.K^[V-TJ_%#
MFI.B1K!\:H:@&quot;$M(,A&amp;1K4:Z.A)ZQ#&lt;#+0!&gt;UWZ3^14O.2XO&lt;6VB6XA*Q=4L
M6LC&quot;7&gt;:7H!E+)#U%,I2&amp;+F\0XEYHKM#_(C/#NJ/6SETIQ*1*8Z:S,05KB+NX
M_/4@ZO[,(#4M11NL&amp;]&lt;+FM4^L-:A3[N7I\9?%O\S?PT=@'V7^F8C,;D7X$8Z
M^.!WV7:=;/W`%P3_)+^HI&lt;7.T0C^=%DO$)&gt;;:@MX1XB*;ZU&gt;ZO)7T(MN-'5^
M8NP&lt;P?)\?D'%`]70%'&quot;Z567O5SYI3-T`6NXO/\&lt;(65&gt;D2@3]W#\ZL7NY1Q;C
M6#TI&amp;3KOT!7*1WA\A6@E-0`;&lt;@7O.X^-`UYM4L(2\:/L[I&gt;;DKXE?L;&gt;Z8D+
ME=VM&gt;&gt;GL0@T8R4A2BWOW-SB/K):X5!'5$+/\%W8I=EFCI0'L1;U)4`@R];4O
M2.D,!&amp;&lt;MW5%$L[A[(/M-;-DJ?6O[E^C?37#;1K)`KDGDP-&lt;X\#V%X%%*A\#?
MDY]QG:LE=#H81B7W8N\Y'@^3C&quot;F?JZ8A/%+BAN[F`A![J6;CW59..\@;=*&lt;\
MRL&lt;!`DBW.E*:3`QN&quot;#H2*UK0T(7W&quot;Y5SU2VPJNO8QWFC6A3N.A':JE84RJ0L
M_\:Y%)@C9&gt;:?ZSR17_RCT;LD$U!YK&quot;\0^(0&lt;7N60YX3,@&gt;&lt;UQF_776]H,[6F
MV&lt;#&gt;L/\;;7-:.FC&gt;0'=MY:7+QO\$X$Q]&gt;T^&lt;#B4G:\@G1C_2M-MA*E+],F?N
MKJ&gt;,R&lt;K&gt;%J&lt;RDVB&gt;Q)C/961\P^\E!]B`O&quot;3J2M6(NU0LZ1VG2(75*]Z\2O;P
MZZHQ.UH7:GP;\-*N+U,,]HIGF[&gt;3AN^^P2MP;XM&lt;+/:F20U?N9_XU6@KI$U:
M&lt;]]T&gt;GR!&lt;'?^[48C.:_I-=MS[IC9V?2#?O5YHO,0(_AU-[\U(B0SX8GO+6M)
M&gt;2J&amp;'&quot;&lt;J5O3']_S&lt;TYKTB[&lt;S!09[&quot;Z&quot;NK'N&gt;B1IF9JW:T?=*U(S,E&quot;),\12!
M&gt;=)')FC^1O*NM=!['3&amp;4)ISJ&gt;??L#GZ)G*;E&gt;Q:SEL;FI4Q]$C![PZKKK$03
MQ37X_@RR+*#$4&gt;&gt;81U:3)[(=$&quot;+SO1A*$:].C)9LA;&lt;^78H\TYV&lt;&amp;/LDBD18
M/%XX8P)74]J\7EQ)5#(MT#&lt;L.J)B430_;=+%D%:[:W]M%CX6!;E5-714]!06
MG![9P-H!V`%4OW[1FJ8P6#``!!9&amp;%0S#_]*0I@=U&quot;B/^%GGW-RU?+[G^J[]N
MR7G$^5%5)&amp;O&gt;;G*:,&lt;_34;6B_UKN%^C[2ED&amp;W]1&gt;`AZT-'%VN]MKL'%-K&quot;?&amp;
M.Q\5AB&quot;1N?P(;/59SON&gt;SO_F#&lt;ZUC/F7`H;/;W\$Z*T!I4&quot;()C:&amp;C:L?&amp;6_%
MF-G_\F8;8?K4,&lt;K%T_T.RI&lt;-^1`Z6#2M;8LMW/RJYA2PKUSGDW7:H,$J`/6C
MGIG0$5/Z9=*!G`N.7,.`MDZ'V&gt;B\-&lt;@L3C5V-/8NPB'&quot;_&gt;5R&amp;3_R$0GY%U/!
M%M-R]\RZNFCS6\$/#E+XND51_'^B8U&quot;1\Y^&lt;!.:2A[KQRF#ZQ0^Z*'H796+S
M\&gt;\_:Z#+_WW]&lt;5&gt;;S\-F#=_4S[0I&lt;_&gt;I2GUEF+LAN6R[\%0\FT9&amp;*%Y`#-#.
M4S.X39HL;`X&gt;6@Y^5-I^MSOJAAK859#UCX&amp;)LGG=K&quot;@R))V+&lt;@,,(&quot;6&amp;B#K3
M/H2F)A&amp;&gt;\Y&quot;!C(.&quot;&gt;WUW@)O0D4_A]X`@4QD&amp;QB=&quot;/-K8[$P4P,7&quot;&gt;FOGX+49
M0[J&gt;5GDK&amp;('8&quot;`?\?`)=/)2)W@*Q:HT,=T&amp;]!&quot;KQQUUGLU2KMJ`3?:4[VY4%
MT5#&gt;-:TVXW2;S+*Z.PGXZ;=_ZHB#&quot;[NH?B^]Y:MR:H&amp;E;Z0JO!D?F&quot;E&gt;5[9L
MXL+E@&amp;?ON=&gt;U;4!-J1M(FWYC$?&amp;!?Z5S1@@UC7U0KJ&amp;_DSR4V&lt;S64[O3E:$2
M2'+ZBLM&quot;][:D$6Z#KL,\/5:&amp;5,0/$U,Q?#LNQ:_:%VL^30\K]RUX(3\R-72:
M[G2[%+]&gt;%&gt;NNY=N4./DC/W8!@QQ3.O=9,`13B80,&lt;=AG9&gt;&lt;KP]Q_]\1-1)Y]
M?9D\(4%#BL@/+E,L&gt;!E=J-_;M&gt;K'Q9=/5^\)Z/;ERT.3F4;OV;;+;'4HQ&amp;DR
M1.LN*WR3J3%=@0R@8T5C]J%#&lt;EQW&lt;(.+[OC9O7?P;9BNO$93E\&amp;VF&lt;O_DK^&lt;
M=ZN3H&gt;]A&gt;(+)A_+0T5QS&gt;73F]MTPW&lt;?.0-W,G6'%B#0'^?LGA&gt;XX^,W&lt;S/C6
M7DFE76&gt;*Z=G(3LLC!'5%U_!(VR&gt;9@C\L_#4C!P\`0?SCM&amp;V:JW.%E*\MV``L
M3!OM2'&gt;HTT/0%6UGK[&lt;&gt;\E[U$$YT%Y#43$&gt;P!GN-H5]%NRA)!_2&gt;?:-JH5*J
MRKT)1%+3+_[A-*0!=Z/%&gt;XFBLI.XECT,RK9?5R/,`30&gt;KU1LP((!3]&gt;`&gt;WXY
M'U78AY9%FYT0]VG&lt;:V^-I,(RYP@HTZMT2B,&gt;*-BN\;\&quot;&quot;G]DB_?G_T1&quot;$4/-
MIN#K&quot;0C8)5`7)@1(/1USHCY6::OE`9HK#&gt;&quot;:`I#5\95UB8[3&amp;UY-OIO1GV)=
MC2B`*NP2&quot;Q/K(K)W_#P.Z3R,#&lt;B*OS9*?X&gt;SOZ=X']#&lt;@U3P5A473YEAY5^'
MP7=W9U??AWF;'Z*#XE.:S%]5H,1!54J(=CY\*HR%5E[NKA4WSSJ!81+`8%-=
MA'&lt;%X;(CGKN^I\2NL:^#.Y2G82XD].^%(/0-C0L'_$FU8EYL8)\C2KU,QJ/Q
M&amp;E%7!]H#!&quot;`,FFP*N'2CQF?J?O\PTS$SP(#,O:'9/S.77F[*9VXLM.3B.'D&quot;
M4X8#=1%RG&quot;C[:H9W+*CX.F+NIC:V*1/1RBE:M1G3Z2'Y\7_5OY^=*0_OK$F^
M83#]O(,7-V13DI8#?LJ?CQ3@A/*3;_((U1_KL@]#&lt;EX\8`_,%,&quot;U1@?_V,`2
MYH&lt;^#7D)+\9KV]&quot;R!@G;\LU=U)V@_F(&amp;&lt;F4PW*,%G?SG$PIVEB':C$&amp;2-,16
M7P#XX2FPM&lt;-]3UKGJ&quot;Q]?A_9&gt;C_'..MS4`&quot;_2'&amp;J3LV&quot;R]9/0*._W$L&quot;D'W;
MVO8C!DHJ!=D!#XJ&amp;9+\\]DIO:3R#`.H_/'LJ9'0Y?&amp;K',GC&lt;D?6$Y6(H!KS0
M!BY0]2@U46O?7SGNJ%.$_,7MV&quot;I2SWV=J&gt;[V^OC,2&gt;_EZ21F0N5C$3\&amp;X)3J
MUE8=N.06+)78&gt;*V`@EOS%QYU&lt;8]/'Z1*_$TV!)V)&quot;E&gt;Y10-)AXWC+Z$`&lt;.WT
MZ0SN)#1?WM91G@*XX.EPJSJ]OCVU95&lt;&quot;K*]$K&lt;`SL:W+5K+RQ&quot;1?1]5&gt;@05C
M;`]6J@&lt;19P5(X&quot;0=RVD,Y#L6&amp;#;U$^@N=O3&quot;+[\A-F[IU)6SRN#.VO[S2&gt;_M
MLS+?1P-MI=(J-3%&amp;$(/(!T$RCM_2=$R_ECE*BY00^_#N%]LSR7G3S2`&amp;&gt;;T\
M^U#I[$W&lt;WP&lt;#^/^FPU$QGR_,&gt;OH#V?%G&lt;1TZ:8,6KL;$?(WG5VWN&lt;,3&gt;&amp;&gt;),
MM':$DC[N:;MROS;=52DC;+_E5'/?UI\)5)VV(8AUNU*,O6=J$_F.J1JTOJ7M
M4!RE;\Y\IZ4PM67H9@RNQ57N3N%KE&quot;3J&amp;2H8&quot;!L,4(Q0`YK]\&lt;^O5P0O]T;U
M0&quot;:?&gt;I=U)*HZ.(E4STB&quot;1ZY'?2`YW)SV;E_!&amp;P\OOY/SB.9ML&gt;C/6_$UNY:E
M-OUW,Z&gt;NR?TG_/I?0=KFEW5Q!*NA@C27/R6X[9'$:7&amp;22-Y/EPHBR5``?U5Y
M&amp;HL1XP&gt;;F_ZL$8!W77J84GR:S@@9+$X6C%:L^G;RK52HP&quot;^8WF\QV4(ARDRE
M;;K5?#96&quot;J/ZV&amp;.Q4DZCCD=@[%ZP\EBFFR`NAA)&gt;@7:.P*L8NB$$PC%`=WMQ
MMJKM*.H\`CVA:S_(PG]\6B0(X,@RQ_:JV?K(B$&amp;M[QH;,P+ST,\*!5Q2S&quot;G/
MRU]1??K,*:&quot;`,5H\4+ROV'S'XCHEY29FY]1Y%O)CS]$GJ(@@[ME=H99HJKR:
M]H^:;6:QZL!\+7RFXGVF+'=YB'V&amp;SFV6+M/POS(;#?03!.2U?]+36%$/^F\*
M4M[[6P?-'E\).IY=2V6-B6M7WY&amp;2.5AJ@X'YJ8]5&amp;&quot;-,.IZ!:!/O?99,B9(-
M,6-/81A1*C+G^S=,%4@]Z!'OWWU&amp;PXV(YP%H,+P^ZY&quot;9Z&amp;3CKV3U09ZZ;`O$
M?ZH8E9]&lt;&amp;.`T=9%5ET=B:XZ=5G7.D#&quot;M`CL]1-FG:]S'C8X'\8D,3B&gt;?:I8J
MV`)45M1G&lt;;!C*W_\A0V&amp;L9!F.EM/;Q&lt;@D7&amp;SIIK89WM\&amp;1N*`##X,FPF8G$9
MH/:^MEI`8RZT+[5[K$K22%X]Z,+!3O[!CO[8-8T--`?P&lt;H,0_A?SC5!MUNH%
MN,C9K)LQZU;,F.V'\$//OTOT!_\8Y*U]B!ZUL(2\MPOD&gt;JA/*BX!?+\.EASL
MS':6L&lt;&gt;(JJA@_,H5!N-4&amp;T\;49S]DVYMU16C$8P_`$$A;[^09$M&gt;1&quot;'):MR/
MY9O9O,_ZM?:#\-V(/B_NK^_RL&gt;CR@1,4;PR1&amp;%O2T$*9/R!OI11TQ=S$&quot;+Q*
M7OW*[:&lt;GZ./8K3QLMB&amp;,IV/\F;N3A,FTCY-?N#,MO=FGR(Y9&lt;=W9&amp;E94C$9*
ME6YJ^F=K'PI5!?3&lt;WXZ0,^W2H&amp;!B801P6YC$FP4&amp;XOKC0!].5!CL?+&amp;4QCI8
M'J?B_(N7-504K!E*QTQ2#%+8L&amp;6J25GR0,`T/I^6&quot;&lt;79O(&quot;T^=M?B;:,0[2/
MOU*[PX^T&amp;W20FRE1L4,&amp;T_:?A_&gt;&quot;3Z:&amp;]=7EWS!2;+3Q-HRRY2/G/UR8,+0_
M$7_D4Y*=[QU4$A&quot;CK%+49%6&amp;)+M&amp;HC]BB:&quot;Q!6`%UHJ&gt;_DA!13K\%/+&lt;\(D'
M&amp;U?FHTG=:$*/A0SC)Q99K&lt;UD)#3`9[!F%1/#9HU.8*G&amp;0\N#3\8[C.'IATN,
M,D`,P_0^TB\&amp;&amp;M1+G-^8#*,H#'BHOZ;O\NG_D_Q&amp;_14&quot;O^0;[4:N01_]#R)$
M_^]#88-:VF*.4?X_UML9H[SHQ1N$$?HR3=&quot;-&amp;H^S&quot;9C&amp;*,.=7O\/C*1PP$?]
M#W4@0&quot;V-%-Z#ASZG'P%&quot;7PKAPW^?_\_'H[(&quot;2AD@]#GT)?*2M0QCFJSJ$&amp;4:
M9?((9?(0I0PS9@ZE&quot;N`3$XF!'XG!\LSR,CF',CJ]5/1&lt;;EHF%(I41AU#-'U\
MK*&lt;\@!$SDU6%C_J?(0'J)#ZJZ?!OI/^&lt;7SZF?R&quot;&lt;GF]Y]__MDP^CU!0`0/H_
M0D9&amp;1D$%_$=(R*CHF-BX^,1D5&amp;__-_T_V?]P='2,_[$HJ&amp;CH&amp;%@X&gt;$2DVBG_
MS5'1,##_)\'$QL''!Q#RU/PWG&quot;__1X#_GY#0\%38D`&quot;7X\QO\``YWUI(#H'#
MMT9+.T=\R&gt;+OCGV&quot;U3]MAJ.!R;57A4T+\&gt;,9CLT/D8C@)#DP`H,2H9YUM&amp;TA
MD21O30H&gt;MF\$0Y,MR&amp;.!R7?Q&lt;NTU..H4793O&gt;A011#&gt;CF29:O0,!I.:Z-'HN
M'@-!I'9&quot;USW$8&amp;KCA6O%,0X&lt;;MX9`&lt;77*/M-LMJB=`/L+UBF#7H?0H??#S`K
MJI!&amp;,T[_!I0!&lt;@&quot;+.8#E',!*#F&quot;UC&quot;$'@)H#0,L!H.&lt;`,`ZGM_Y3(,@A7#Z&lt;
M?OH-Z!#QR[%`[U#QRZE'/]Q\,WUA2HJ/BD9,CO0&amp;C9B!G(`8%Y6!`9D2!^D-
M`3XW+AHA&quot;18#*AHW$C$6&quot;=K_`U!+`0(5`Q0````(`(%&gt;VB9V^2?#&amp;`$``)$!
M```3``P``````````$&quot;D@0````!&amp;3$DM=FEE=V5R+DY44T,N&lt;')G55@(`,_W
M=3=!$W4W4$L!`A4#%`````@`@E[:)KD%[BAU`0```0(``!(`#```````````
M0*2!60$``$9,22UV:65W97(N4$%,+G!R9U58&quot;`#/]W4W1!-U-U!+`0(5`Q0`
M```(`.0VXR;HHOKRKQH``(4Q```,``P``````````$&quot;D@0X#``!D96)R:7,N
M&lt;&amp;%N:6-56`@`00A^-RL(?C=02P$&quot;%0,4````&quot;`#R@N,F-3IK999S``#Z&lt;P``
M#P`,``````````!`I('W'0``=6YD97)W871E&lt;BUN='-C55@(`&amp;&gt;-?C=GC7XW
M4$L!`A4#%`````@`G&amp;/'&amp;N5*/*M1=```8G0```X`#```````````0*2!RI$`
M`'5N9&amp;5R=V%T97(M&lt;&amp;%L55@(`$N-?C?HB!,L4$L%!@`````%``4`&lt;`$``%&lt;&amp;
$`0``````
`
end
.......
....
..
.                                   C=H #18

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


Obj3d trilogy
-------------

	The rest of this issue is devoted to obj3d.  Obj3d is a set of
routines for creating and manipulating 3D worlds, and builds upon the
lib3d routines discussed in issue 16 (the lib3d routines have also been
upgraded, including a multicolor version).

	The first article introduces the use of obj3d with a simple example
program which places two objects into the world (and lets you move one of
them around).  The second article is the programming reference guide, with
a memory map and a list of routines/routine descriptions.  The third article
covers &quot;stroids&quot;, a more involved example program which demonstrates several
game-type algorithms and ideas.

	Mark Seelye, mseelye@yahoo.com, has written a really nice &quot;object 
editor&quot;, i.e. a program for editing objects for use in obj3d programs.
Unfortunately it was not quite finished at the time of this issue, but
hopefully it will be featured in the next issue.  For more information,
contact Mark!

	All files are in a .zip files, included at the end of this
issue:

	obj3d.o		-- Obj3d library
	lib3dv2.o	-- v2.0 of lib3d library
	lib3dv2mc.o	-- Multicolor version
	table13		-- $C000 table
	rotmat.o	-- $5E00 table
	ptabgen		-- program used to create above tables

	bigtets.b.o	-- Simple example program
	bigtets.b.s	-- Source code, in El Cheapo Assembler format
			   (see the Fridge for Cheapass docs)

	stroids.o	-- Stroids
	stroids.n.s	-- Source code for stroids, cheapass format

	loader		-- Program to load in relevant files

	stroids		-- Single-file stroids executable (load and run)
	
	obj3d.ref	-- obj3d programmer's reference guide
	lib3dv2.ref	-- lib3d v2.0 programmer's reference guide
	
	Binaries, source code, and documentation are also available in the
Fridge, at

	http://www.ffd2.com/fridge/obj3d/




Obj3d -- The 3D object library
---------------------------------&gt; S. Judd 4/99

	Obj3d is a library of routines for organizing, manipulating,
and rendering 3d objects in both hires and multicolor mode, using 
version 2.0 of the lib3d library routines (described a little later).
Let's just dive right in and look at some example code, to get a feel for
the routines, and just how easy it is to get a 3D object up on the screen.
This example is taken from the example program &quot;bigtets&quot;, included in
the obj3d.zip archive in this issue.

*
* Test code
*
* Nice pair of tets
*

         ORG $1000

OBS      = $0800          ;Object records
GETIN    = $FFE4

TestCode 
         LDA $D011
         ORA #$20         ;Bitmap mode
         STA $D011
         LDA #$08         ;Bitmap -&gt; $6000
         STA $D018
         LDA $DD00
         AND #$F8
         ORA #$02         ;Bank 1
         STA $DD00
         LDA #$80
         STA $028A        ;All keys repeat

         JSR VERSION      ;If multicolor...
         BPL :hires
         LDA $D016
         ORA #$10
         STA $D016
:hires   
         JSR ClrColMap

         LDA #&lt;OBS        ;Object records
         LDY #&gt;OBS
         JSR Init3D	  ;Initialize libraries

         LDA #&lt;TETDAT     ;Object data
         LDY #&gt;TETDAT
         LDX #01          ;ID
         JSR AddObj	  ;Add an object
         STX VOB          ;View object

         LDA #&lt;STARDAT
         LDY #&gt;STARDAT
         LDX #02
         JSR AddObj	  ;Add another object
         STX ROB          ;Remember this object for later
         STA POINT        ;Object pointer
         STY POINT+1
         LDY #5           ;Set object center
:l1      LDA OCEN,Y
         STA (POINT),Y
         DEY
         BPL :l1

:sec     SEC              ;Solid polygons
:setp    LDX #$60         ;Bitmap at $6000
         LDA #&lt;PATS       ;Pattern table
         LDY #&gt;PATS
         JSR SetParms
:loop    
         JSR ClrBitmap

         LDX VOB          ;Calculate view
         JSR CalcView
         JSR SortVis      ;Sort objects
         JSR DrawAllVis   ;Draw objects
	 ...

Aside from the trivial screen clearing routine and some data tables, that's
the entire program -- initialize the 64 and the libraries, add some objects,
then call the three subroutines above to render the objects to the screen.
Is that easy or what?
	Now let's have a more detailed look at the library, and the example
program above.

Obj3d overview
==============

	Lib3d, as given in C=Hacking #16, is a set of core routines for
doing 3D graphics and calculations.  Obj3d is an extension to lib3d -- it
is a set of routines which uses lib3d.  Its purpose is to take the tedium
out of managing and rendering 3d objects, and make 3d graphics accessible
to all those guys who never paid attention during high school math class.

	I'd like to offer a bit of advice to any of those guys who might
happen to be reading, though.  If you intend to do any _serious_ 3D coding,
for example a game, you're going to need to understand some fundamental
things about 3D graphics, and about why the various library routines work
the way they do.  Amazingly enough, C=Hacking has a series of articles on
3D graphics, with a very comprehensive article in issue #16.  I read it,
several times, before doing obj3d, and suggest you do the same.
	Knowing coders the way I do, I can see that you're going to ignore
my advice; that's fine.  For now, you can just jump in and play around with
the example programs a little bit, to get a feel for things.  But if you
later decide to attempt something more involved than displaying objects
on the screen, and are unwilling to take a little time to understand how
things work, then you should expect to fail miserably, or spend many
frustrating hours wondering why something isn't working the way you expect.
	Therefore, before you begin work on your dream program, I suggest
spending an hour or so with C=Hacking #16, a pencil, a piece of paper,
and a brain.  The last is quite important, as you'll probably have to
do some thinking; if you're expecting to understand things with the flick
of some magical switch, you're probably reading the wrong magazine.

	Finally, a word on distribution: both lib3d and obj3d are freely
distributable.  You are _supposed_ to use them in your own programs.
You can make money off those programs (good luck!).  You don't even have
to give me credit, if you really don't want to, as I figure anyone will
spot lib3d a mile away.  But please, *use* the thing!  That's why I
wrote it!
	And, knowing coders the way I do, if I hear one guy sniff and
loudly exclaim to everyone within earshot that he never uses other people's
code, I'm going to take your tunes, charsets, sprites, editors, assemblers,
and all that hardware you didn't design, and bonk you over the head with it.

	Alright, then.  Let's talk some code.

Organization
------------

        The obj3d routines can essentially be split into three groups:
routines to manage objects globally, routines to manipulate individual
objects, and visualization/rendering routines.
	The global management routines are for adding/deleting objects
to/from the world, setting up objects for use by other routines, and
retrieving information about objects (e.g. location) for use by the
programmer.
        The manipulation routines are used to manipulate individual objects:
to move objects forwards and backwards and side to side, to rotate objects
about their roll, pitch, or yaw axis, etc.  In other words, these are
routines to change the position and orientation of a given object within
the world.
        The visualization routines are naturally used to visualize the world.
These are routines to compute the view from a specific object and render
that view to the screen, as well as how to render it -- what bitmap,
render it solid or wireframe, etc.  There are also routines for drawing
individual objects and even individual faces.  These routines are the main
interface into the 3d library.

	In order to support the obj3d routines, lib3d has been upgraded
to version 2.0.  The rotation routines have been changed to ease a number
of calculations.  Three new routines have been added, for plotting points
and lines, and for determining which version of the library is in memory.
Finally, a multicolor version of the library is available, in addition
to the hires version, which includes screen aspect ratio coordinate-
corrections as well as multicolor rendering routines.

	Let's now return to the example program.

Example program explained
-------------------------

	The first part of the code simply sets up 64-related stuff,
turning on bitmap mode, etc.  JSR VERSION is used to determine whether
the hires or multicolor version of lib3d is being used; if multicolor,
then multicolor mode is enabled:

*
* Test code
*
* Nice pair of tets
*

OBS      = $0800          ;Object records
GETIN    = $FFE4

TestCode 
         LDA $D011
         ORA #$20         ;Bitmap mode
         STA $D011
         LDA #$08         ;Bitmap -&gt; $6000
         STA $D018
         LDA $DD00
         AND #$F8
         ORA #$02         ;Bank 1
         STA $DD00
         LDA #$80
         STA $028A        ;All keys repeat

         JSR VERSION      ;If multicolor...
         BPL :hires
         LDA $D016
         ORA #$10
         STA $D016
:hires   
         JSR ClrColMap

ClrColMap is not part of the obj3d library; it's just a simple routine
to clear the color map.  The next piece of code initializes the obj3d
and lib3d libraries with some default values:

         LDA #&lt;OBS        ;Object records
         LDY #&gt;OBS
         JSR Init3D

If you ever move some tables around (like the $C000 table), you'll need
to change table pointers _after_ calling this routine, as it initializes
the zero-page lib3d pointers to certain default values.  .AY points to a
free area of memory, whose size depends on the number of active objects
you intend to have in the world.  This will be explained in more detail
shortly.  The next section of code adds an object into the world, using
JSR AddObj:

         LDA #&lt;TETDAT     ;Object data
         LDY #&gt;TETDAT
         LDX #01          ;ID
         JSR AddObj
         STX VOB          ;View object

If you look at the obj3d memory map, you'll notice that of the 4k it
occupies only a measly 1.5k is used for code.  The rest is all used for
storage -- a whole bunch of lists, used to organize all the data.  One
of these lists is the &quot;active object list&quot;.  What JSR AddObj does is
to find the first empty spot in the active object list, and assign the
object to that spot.  This spot is returned in .X, and this number is
how obj3d will reference the object.  The STX VOB above is for later
use by the program; you do not generally need to store every object
number.
	A maximum of 128 active objects are allowed, so the object number
in .X will always be in the range 0-127.  Since AddObj always grabs the
first open spot, .X will in fact never be larger than the maximum number
of active objects in a given program.  You might want to use it for your
own purposes, too, for example as an index into a list of velocities.
	AddObj also &quot;allocates&quot; a chunk of memory to store the object 
record in.  This area of memory is specified in the earlier call to 
JSR Init3D, above, by .AY.  Each object currently requires 32 bytes of
storage, so if there can be N active objects in the world at any given
time, this area of memory needs to be of at least size 32*N.  There is
a distinction here between &quot;active&quot; and &quot;inactive&quot; objects; an object is
&quot;active&quot; if it has been added in with AddObj, i.e. is actively present in
the world.  It may help to understand this distinction by considering a
program like Elite -- although there are many different kinds of objects
(different ships, asteroids, etc.), there are never more than a certain
number present, i.e. active, at any given time.  So even if you have
50 different types of objects, if there are never more than 6 active at
any time only 6*32 bytes of RAM are needed.
	So what is an &quot;object&quot;, anyways?  Three things are needed to 
completely specify an object: its position, its orientation, and its
structure.  The &quot;structure&quot; is the vertices and faces that define what
the object looks like.  The position and orientation determine where the
object is, and in what direction it is pointing.  Position and orientation
are such important concepts that it is worthwhile to review them further.
	Consider something like a chessboard.  Each piece is located on
a specific square, and when you move it, the piece moves to a different
square (as opposed to e.g. moving the board).  The square it sits on
is its position, and in chess this is denoted by C-4 or something
similar.  Now imagine that we are one of the knights -- what would we
see?  It would depend on the direction we were facing; in other words,
our orientation.  If we were to then compute the view from a different
knight, we would need to know its orientation.
	In three dimensions, the position is specified by three signed
16-bit coordinates, the usual x/y/z Cartesian system.  The orientation
is specified by a 3x3 rotation matrix.  This orientation matrix essentially
tells you which direction is &quot;forwards&quot;, which direction is &quot;down&quot;, and
which direction is &quot;sideways&quot;, _from the object's perspective_.  That is,
if you're flying a plane, the &quot;forwards&quot; direction is always straight
ahead.  If you're watching it from the ground, the forwards direction
changes if the plane turns, or dives, etc.
	Thus, in obj3d, an object is defined by a 32-byte &quot;object record&quot;:

Object:
        CenterX         2 bytes         Position, x-coordinate
        CenterY         2 bytes         Position, y-coordinate
        CenterZ         2 bytes         Position, z-coordinate
        Structure       2 bytes         Pointer to structure data
        ID              1 byte          Optional ID byte
	User byte	1 byte		Free data byte
        CenterPos       1 byte          Position in rotated center list
        CenXRem         1 byte          Remainder, x-position
        CenYRem         1 byte          (Used by MoveUp, etc.)
        CenZRem         1 byte
        Matrix          9 bytes         Viewpoint matrix, integer part
        MatRem          9 bytes         Fractional part

CenterX/Y/Z are the 16-bit signed coordinates specifying where the object
is located in the world.  &quot;Structure&quot; is a pointer to the structure data
defining the vertices and faces which make up the object.  Using a pointer
means that objects may share the same basic shape, without wasting lots 
of memory; it also means that objects may be e.g. animated (beyond merely
rotating).  When AddObj is called, the contents of .AY are stored here.
The structure layout is discussed a little later.
	The ID and user bytes are purely for the use of the programmer; they
are *not* used by the library routines.  For example, you might store what
type of object this is, and its current velocity.  When AddObj is called,
the content of .X is stored in ID.
	CenterPos is an index into a list of relative object centers; this
list is generated when the viewpoint is calculated from a specific object.
	CenX/Y/ZRem are used solely by the routines MoveForwards etc.  They
represent the fractional portion of the center coordinates, to ensure
accurate movement (especially when moving by small amounts).
        Matrix and Matrem are the &quot;viewpoint&quot; matrix; the viewpoint matrix
is the transpose of the orientation matrix.  Values in Matrix range from
-64 to 64.  The remainder portion is used by the TurnLeft etc. routines
(in particular, by the lib3d routines ACCROTX/Y/Z); only the integer
portion is used for rotation/projection.

	The viewpoint matrix determines what the world looks like when
rotated about the object.  The orientation matrix determines how the object
looks from somewhere within the world, i.e. what direction it is pointing in,
etc.  It's the difference between being &quot;inside&quot; the object or &quot;outside&quot; of
the object.
	Computing views was explained in C=Hacking #16.  Briefly, when
an airplane e.g. rolls, it rolls about its fuselage -- about a local
coordinate axis -- and when it rolls, the other coordinate axis change
direction, relative to the world (e.g. the wings move).  The problem is that
the usual rotation matrix really only rotates about a _fixed_ coordinate
system.  If the object starts pointing in a different direction, you would
need a way of rotating about the new coordinate axis, i.e. about an arbitrary 
line.  It can be done, using quaternions (which are a generalization
of complex numbers), but it is cumbersome and time-consuming (and thus
popular among PC programmers).  The smart way to do it is to realize that
the inverse of a &quot;viewpoint matrix&quot; is an &quot;orientation matrix&quot;, and to
further realize that the inverse of any rotation matrix is simply its 
transpose.

	By the way, it should go without saying that the object record values
need to not get screwed up.  If they do, all sorts of strange things can
happen.  So if you write a program, and it starts behaving or crashing
mysteriously, first check that the object record isn't hosed.

	The bytes following the user bytes will probably never be used by
a programmer, except perhaps to copy orientation matrices.  The bytes
up through the user bytes, however, are meant to be modified by the
programmer.  For example, the next part of the example code sets
the center of the object, after AddObj.

         LDA #&lt;STARDAT
         LDY #&gt;STARDAT
         LDX #02
         JSR AddObj
         STX ROB          ;Rotate object
         STA POINT        ;Object pointer
         STY POINT+1
         LDY #5           ;Set center
:l1      LDA OCEN,Y
         STA (POINT),Y
         DEY
         BPL :l1

Not only does AddObj return the object number in .X, it returns a
pointer to the object in .AY.  This pointer is also returned by the
routines SetCurOb and GetCurOb.  The above code stores this pointer
in POINT, and then sets the location by copying from a little table

OCEN     DA 00            ;X-coord
         DA 00            ;Y-coord
         DA $0100         ;Z-coord

At the very least, you will probably have to specify the location of
any object you create; otherwise, the default location is the center
of the world, at (0,0,0).

	Next, the example program tells obj3d about how objects should
be rendered to the screen:

:sec     SEC              ;Solid polygons
:setp    LDX #$60         ;Bitmap at $6000
         LDA #&lt;PATS       ;Pattern table
         LDY #&gt;PATS
         JSR SetParms

SetParms takes four parameters.  The carry flag determines whether solid
or wireframe polygons will be used.  (The wireframe routine is not
particularly fast, because it is not particularly smart -- it does not
compute hidden faces.  It does, however, skip lines that have already been
drawn.)  .X contains the location of the bitmap (high byte) to be rendered
to.  .AY contains a pointer to a table of 8x8 bit patterns, used by the
rendering routines:

PATS                      ;Pattern table
SOLID    = 0
         HEX FFFFFFFFFFFFFFFF
DITHER1  = 1
         HEX 55AA55AA55AA55AA
DITHER2  = 2
         HEX AA55AA55AA55AA55
	 ...

These patterns will later be referenced by their position in the table.

	Thus do we come to the main loop, which is just four routines:
:loop    
         JSR ClrBitmap

         LDX VOB          ;Calculate view
         JSR CalcView
         JSR SortVis      ;Sort objects
         JSR DrawAllVis   ;Draw objects

The first routine is not a part of obj3d; it just clears the bitmap.
JSR CalcView computes what the world looks like from object .X -- from
the object's position and orientation.  It does so by translating
and rotating each object's center (except the viewpoint object),
and storing this relative center in the center list; the value of
CenterPos, in the object record, is an index into this list.
	JSR SortVis computes a sorted list of _visible_ objects,
from the center list.  An object is considered &quot;visible&quot; if it lies
in a 45 degree pyramid in front of the viewpoint object, and if
its z-coordinate is between zmin and zmax.  The paramters zmin and zmax
may be set by calling JSR SetVisParms; I don't recall the default values
offhand -- probably 100 &lt; CenterZ &lt; 8192.  The purpose of the sorted
list is to ensure the objects are drawn from back to front -- so that
objects overlap each other correctly.
	Finally, after calculating the viewpoint, and calculating the
visible objects, all that remains is to draw all the visible objects,
with JSR DrawAllVis.  Individual objects may be drawn one at a time
with JSR DrawNextVis.  When an object is drawn, it is rotated by the
orientation and viewpoint matrices, then added to its relative center
(M R P + M C), then projected, with the projected points stored in two
lists, PLISTX and PLISTY.  The appropriate rendering routine is then
called, using the points in these lists.  Also, before projecting, the
rotated z-coordinates are stored in PLISTZ, for use in drawing compound
objects (described later).

	That takes care of displaying an object.  What about manipulating
an object, i.e. moving around?  The example program accepts the following
keys:

	a/z s/d q/w	-- Pitch, roll, and yaw object
	@ /		-- Move forwards/backwards
	space		-- Switch viewpoints
	=		-- Draw using wireframe graphics
	*		-- Draw using solid graphics

You can look at the source code to see how all of this is done.  Here,
it will be enough to look at the code to pitch the object and the
code to move the object (and to swap viewpoints, for good measure).
First, the library must be told which object to operate on:

         LDX ROB          ;Set rotation object
         JSR SetCurOb

Recall that after adding in the second object, .X was stored in ROB.
In this program, movement always affects the second object, no matter
which object is the view object.  The program now waits for a keypress,
and branches accordingly:

:wait    JSR GETIN
         BEQ :wait
         CMP #'a'
         BEQ :pitchdn
         CMP #'z'
         BEQ :pitchup
         CMP #'@'
         BEQ :movf
         CMP #'/'
         BEQ :movb
         CMP #' '
         BNE :wait

         LDX VOB          ;Swap viewpoint
         JSR SetCurOb
         JSR GetNextOb
         STX VOB
         JMP :loop

:pitchdn CLC
         DFB $24
:pitchup SEC
         JSR Pitch
         JMP :loop

:movf    LDA #$07
         DFB $2C
:movb    LDA #$F9
         JSR MoveForwards
         JMP :loop

To change the viewpoint, the program simply sets the current object
to the current view object, then advances to the next object in the
active object list, and stores that as the new viewpoint object.
	The routines Pitch, Roll, and Yaw all function similarly.  They
all rotate by a fixed amount (2*pi/128 radians, which is about 3 degrees),
and the carry flag specifies the direction of rotation.  The rotation
is performed about the _local_ coordinate axis of the object, which rotates
with the object; there is also a routine, SetMat, which can rotate about
the fixed world axis.
	The MoveForwards, MoveDown, and MoveSide routines also function
similarly.  In these routines, .A contains the &quot;velocity&quot; or length of
the move, as a signed 8-bit number; the actual distance moved is four
times .A.

	And that more or less sums up the less-technical aspects of the obj3d
library routines.  For a complete list of routines, routine parameters,
and a memory map, see the files &quot;obj3d.ref&quot; and &quot;lib3d.ref&quot; in the .zip
archive (they're plain ASCII text files).  There's also some example source
code.  And now it is time for the more technical details: object structure
data, compound objects, some internals, and lib3d v2.0 updates.

The More Techincal Details
==========================

	As you may recall, the object record contains a pointer to the
object structure data -- the data describing the points and faces that
define what the object looks like.  For a normal object, this data is
organized as follows:

Structure:
	TypeID = 0	1 byte		Object type (normal, compound)
        Npoints         1 byte          Number of points (vertices)
        Nfaces          1 byte          Number of faces
        Xcoords         n bytes         Vertices, x-coordinates
        Ycoords         n bytes         Vertices, y-coordinates
        Zcoords         n bytes         Vertices, z-coordinates

        faces:                          List of faces

          nverts        1 byte          Number of vertices in face
          fillpat       1 byte          Fill pattern (index into pattern list)
          fpoints       m+1 bytes       Points (indices into X/Y/Z above)

TypeID identifies the object type, and will be discussed in more detail
shortly.  Npoints and Nfaces do what they say; there is no limit on the
number of faces, but an object may not have more than 128 points (which
is a HUGE object!).
	X/Y/Zcoords are signed integers in the range -95..95, for reasons
described in C=Hacking #16.  Note that the _length_ of each of these points
must be less than 95.  For example, a point like (65,65,65) has length
sqrt(65^2 + 65^2 + 65^2) = 65*sqrt(3) = 112 or so, so if this point
were rotated down onto the x-axis it would have coordinates (112,0,0),
which is out of the -95..95 range.  Strange things will happen to your
rotating objects if you make this error, so if your objects start freaking
out upon rotation, check this first.
	Note, moreover, that the vertices are defined about the center of
rotation of the object; this center is exactly the coordinates CenterX/Y/Z
in the object record, i.e. where the object is located in the world.
	Following the coordinates is a list of faces, which are specified
by a fill pattern and a list of vertices.  The fill pattern is an index
into the pattern table, which you may recall is set using JSR SetParms;
the actual location of the pattern is PATTAB + 8*fillpat.  The vertex list
is simply a list of indices into the X/Y/Zcoords table; moreover, this
list must close upon itself, e.g. 0-1-2-0, so that it is of length nverts+1,
where nverts is the number vertices in the face.
	With all that in mind, here is the data for the first object in
the example program, a simple tetrahedron:

*
* Test object 1: simple tetrahedron
*
TETDAT   
         DFB 0            ;Normal object
         DFB 4            ;Number of points
         DFB 4            ;Number of faces

* Point list

TETX     DFB 45,45,0-45,0-45
TETY     DFB 45,0-45,45,0-45
TETZ     DFB 45,0-45,0-45,45

* Face list

FACE1    DFB 3            ;Number of vertices
         DFB SOLID        ;Fill pattern
         DFB 0,1,2,0      ;Vertices

FACE2    DFB 3
         DFB ZIGS
         DFB 3,2,1,3

FACE3    DFB 3
         DFB CROSSSM
         DFB 3,0,2,3

FACE4    DFB 3
         DFB HOLES
         DFB 3,1,0,3

Pretty straightforward, really.  Note that faces can have any number of
points in them; triangles will have three points, squares (e.g. sides of
cubes) will have four points, and so on.  Thus the way to think about
creating an object is that some points are defined about some center, and
those points are then connected together to make faces.
	This kind of definition works fine for simple objects -- that is,
for convex objects, where one part of the object won't obscure a different
part.  But what about more complicated objects -- a tank, say, or a cross --
where one piece of the object might be in front of another piece at one
orientation, and behind in a different orientation?  The general problem
of polygon clipping is fairly complicated and time consuming.  Being 64
programmers, though, we are of course a little sneakier about doing stuff,
and we can make suitably complicated objects by just modifying the above
structure a little bit.
	Consider for a moment a cross, or the pointy stars from Cool World.
The basic problem is that a given chunk of the object might be either
in front of the rest of the object or behind it.  If it is behind,
then we want to draw it first; if it's in front, then we want to draw
it last.  The idea, then, is to divide a complex object up into a number
of smaller objects, and to draw them in the right order.  In the obj3d
lexicon, such an object is a _compound object_.

Compound Objects
----------------

	To define a &quot;normal&quot; object, we define a list of points and then
join points into faces.  A compound object takes this a step further,
joining faces into smaller &quot;oblets&quot;.  All that remains is to figure out
what order to draw each oblet in.
	Recall that before rendering objects to the screen, JSR SortVis
is called.  SortVis sorts the visible objects based on their z-coordinates
and far-away objects are drawn first, so that objects will be rendered
in front of one another on the screen.  So we can do the exact same thing
with the oblets: associate a _reference point_ with each oblet, depth-sort
the reference points, and then draw the oblets from back to front.  The
reference point doesn't have to be connected to anything, or a part of
any face -- just some point which allows the oblets to be sorted correctly.
	As an example, consider the pointy stars from Cool World.  These
are easy to create, by starting with a cube, and then pulling out the
centers of each face, creating a star with six tines.  The tips of each
tine are a convenient reference point, so the idea is to divide the
star up into six oblets -- the tines -- and use the tip of the tine as
the reference point for each oblet.  Once the tips are sorted, the tines
may be drawn in the correct order, and viola!  Violin!  Instant polygon
clipping, with very little computational effort.  Note that the key to
success with this method is choosing the reference points well.
	The format for a compound object is similar to a normal object,
with TypeID set to $80 and Nfaces replaced by Noblets:

Structure:
        TypeID = $80    1 byte          Object type (normal, compound)
        Npoints         1 byte          Number of points (vertices)
        Noblets         1 byte          Number of oblets
        Xcoords         n bytes         Vertices, x-coordinates
        Ycoords         n bytes         Vertices, y-coordinates
        Zcoords         n bytes         Vertices, z-coordinates

	oblets:				List of oblets
	  ref points	p bytes		List of reference points (indices)

	  oblet 1
	    nbytes	1 byte		Number of bytes in this oblet
	    nfaces	1 byte		Number of faces

	    face list:
		nverts  1 byte          Number of vertices in face
		fillpat 1 byte          Fill pattern (index into pattern list)
		fpoints m+1 bytes       Points (indices into X/Y/Z above)

	  oblet 2
	    ...

The list of reference points is a list of indices into X/Y/Zcoords,
and the first point in the list is the reference point for the first oblet,
etc.  Note the &quot;nbytes&quot; field in each object; this is used to advance
through the oblet list (for example, to find oblet #4 quickly).  There
is a limit of 32 or so oblets allowed; chances are awfully good you'll
never reach this limit, consdering that an object can only have 128 points!

	Here is the second object from the example program, which is just
a modified pointy star.  Note that the TypeID is set to $80; a normal
object has TypeID = 0.  It is also worth pointing out that the choice
of reference points -- the tip of each surface -- can lead to incorrect
clipping on occasion, because the tips are of different lengths; nevertheless,
they work quite well.

*
* Test object 2: a compound object,
* spaceship-kind of thing (essentially
* cool world stars)
*
STARDAT  

         DFB $80          ;Compound object
         DFB 14           ;Number of points
         DFB 6            ;Number of oblets

* Point list

         DFB 50,0-50,0,0,0,0,15,15,15,15,0-15,0-15,0-15,0-15
         DFB 0,0,16,0-26,0,0,10,10,0-10,0-10,10,10,0-10,0-10
         DFB 0,0,0,0,94,0-22,15,0-15,0-15,15,15,0-15,0-15,15

* Oblet list: reference points

         DFB 0            ;First 6 points
         DFB 1
         DFB 2
         DFB 3
         DFB 4
         DFB 5

* Oblet 1

         DFB 26           ;26 bytes
         DFB 4            ;4 faces

* faces
         DFB 3            ;4 points
         DFB SOLID        ;pattern
         DFB 0,8,7,0      ;Star 2, Tine 0, face 1

         DFB 3
         DFB ZIGS
         DFB 0,7,6,0

         DFB 3
         DFB ZAGS
         DFB 0,6,9,0

         DFB 3
         DFB DITHER1
         DFB 0,9,8,0

* Oblet 2

         DFB 26           ;26 bytes
         DFB 4            ;4 faces


         DFB 3            ;4 points
         DFB ZIGS
         DFB 1,11,12,1

         DFB 3
         DFB BRICK
         DFB 1,12,13,1

         DFB 3
         DFB DITHER2
         DFB 1,13,10,1

         DFB 3
         DFB ZAGS
         DFB 1,10,11,1

* Oblet 3
	 ...

The remaining oblets are all similar.

lib3d v2.0
----------

	Finally, lib3d has been updated, to support the obj3d library and
to be more cool in general.

	The first thing to notice is that there are now two libraries:
one for hires, and another for multicolor.  The multicolor version not
only renders in multicolor, but corrects for the screen aspect ratio
by multiplying all y-coordinates by 5/4 after projection.

	The second thing to notice is the addition of three new routines:
PLOT, DRAWLINE, and VERSION.  VERSION returns the lib3d version number;
the high bit set indicates a multicolor version.  Currently lib3d is
at v2.0, so this routine returns either 2 or $82.
	PLOT and DRAWLINE are used to, well, plot points and draw lines.
The coordinates are 16-bit signed values, i.e. the routines understand
points that are off the screen.  To use them, you just store the coordinates
in zero page and JSR.  The line drawing routine is not the world's fastest,
but it is still zippy, especially for its (quite small) size and flexibility.

	The third thing to notice is that the memory map has been altered
significantly, both in zero page and in RAM.  lib3d now starts at $8400,
instead of $8600, so not only has the jump table moved but there is
no longer room for sprites in bank 2.  Zero page has been shuffled around,
with perhaps the most significant result being that all of the $Fx locations
(everything above $C4 actually) are free for use by the programmer.  See
the memory map for more details.

	What you might not have noticed is that several of the routines
have now changed.  The accumulation routines ACCROTX/Y/Z now require a
pointer to the matrix to be accumulated; they used to simply operate on
a matrix in zero page.  This way, object matrices may be directly
manipulated, instead of doing any wasteful copying to and from ZP.
	ROTPROJ has also gone through a big change.  Recall that the
equation for a 3D world is
	
	M R P + M C

where P is an object point, R is the local rotation (orientation), M is
the viewpoint rotation, and C is the object's center.  ROTPROJ used to
just calculate MP + MC; it now calculates MRP + MC, which is why zero
page now contains a viewpoint _and_ an orientation matrix.  Also, ROTPROJ
stores the z-coordinates before projecting, for use in drawing compound
objects, so there's now a pointer to PLISTZ.  Finally, I feel that rotation
without projection is now a pretty useless feature; I left it in, but
it now stores the rotated points to PLISTX/Y/Z, instead of using a special
zero-page pointer for the purpose.

	There were also some miscellaneous recodings, to conserve memory
and such, but they're nothing special.  For descriptions of the
individual routines and their use, see the lib3d.ref document in the
.zip file.

The End
-------

	Since most of the obj3d routines are either really stupid or were
yanked out of Cool World, I don't think there's any reason to go over them
(except the cool sorting algorithm, discussed elsewhere in this issue).

	What more is there to say?

	Go home and code!

.......
....
..
.                                   C=H #18
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


Obj3d programmer's reference
-----
last update: 4/16/99
version 2.0


* Obj3d and lib3d memory map:

|-|x|--|x|---------------|xxxx|------|xxxxxx|------|xxxx|-------------------|
  |    |                 |           |             |
  $41  $0200             $4F00       $8400         $C000


$41-$49         Orientation matrix
$4A-$52         Viewpoint matrix
$53,$54         Xoffset, Yoffset (screen offsets -- where 0,0 is on screen)
$55-$72         Various temporary pointers and variables
$60-$67		X1,Y1,X2,Y2 -- signed 16-bit coordinates for PLOT and DRAWLINE
$8B-$8E		PLISTZLO, PLISTZHI -- pointers to rotated z-coordaintes
$A3-$AE         CXLO, CXHI, CYLO, CYHI, CZLO, CZHI -- Pointers to rotated
                centers.
$AF-$B0         ROTMATH -- pointer to rotation math table
$B1-$B8         MULTLO1 LO2 HI1 HI2 -- pointers to multiplcation tables
$B9             Bitmap (high byte)
$BB-$BC         FILLPAT -- pointer to fill pattern (not table)
$BD-$C4         PLISTXLO, XHI, YLO, YHI -- pointers to rotated/projected points
		(PLISTZLO = $8B, above)

$0200           Point queue
$4F00		LINELO -- Record drawn lines in wireframe
$4F68		LINEHI
$4FD0		OBLETS -- Sorted oblet list
$5000           obj3d
$5600-$5D00     obj3d tables:
	$5600	OBJLO  -- Object list (pointers)
	$5680	OBJHI
	$5700	VISOBJ -- Visible object list
	$5781	OBCEN  -- Center object number
	$5800	CX	- Translated rotated centers
	$5880	HCX	- (high byte)
	$5900	CY
	$5980	HCY
	$5A00	CZ
	$5A80	HCZ
	$5B00	PLISTX	- Point list (projected)
	$5B80	(high bytes)
	$5C00	PLISTY
	$5C80	(high byte PLISTY)
	$5D00	PLISTZ
	$5D80	high byte
$5E00-$5FFF     ROTMATH -- rotation table (relocatable, pointed to by $AF)
$8400-$9FFF     lib3d
$C000-$C2FF     MULTLO, pointed to by $F7-$F8 and $F9-$FA
$C300-$C5FF     MULTHI, pointed to by $FB-$FC and $FD-$FE
$C600-$CFFF     More tables (nonrelocatable, see lib3d.text)

				----------------

So, to put it another way, free areas of RAM are:

$02-$40
$55-$72 (temporary only; library work variables)
$90-$A2
$C5-$FF

$02xx-$4FFF
$6000-$83FF
$A000-$BFFF
$D000-$FFFF

|-|x|--|x|---------------|xxxx|------|xxxxxx|------|xxxx|-------------------|
  |    |                 |           |             |
  $41  $0200             $4F00       $8400         $C000

Moreover, the range $C000-$C5FF can be made available by relocating the
tables there.  This way, $E000 may be used as a bitmap, with enough extra
room for 8 sprite definitions.  Thus, bitmaps are available in all banks.


* Object record

ObjCX    = 0		;Center, X-coord (signed 16-bit)
ObjCY    = 2		;Y-coord
ObjCZ    = 4		;z-coord
ObjData  = 6		;Pointer to structure data
ObjID    = 8		;User bytes
ObjUser	 = 9
ObCenPos = 10		;Position in center list
ObjCXRem = 11		;Center remainders
ObjCYRem = 12
ObjCZRem = 13
ObjMat   = 14		;Viewpoint matrix, int + rem
ObjSize  = 32           ;32 bytes total


* Jump table

Init3D      = $5000          	;Initialize lib3d
AddObj      = Init3D+3       	;Add object to object list
DelObj      = AddObj+3       	;Delete object from list
SetCurOb    = DelObj+3       	;Set current object
GetCurOb    = SetCurOb+3     	;Get current object
GetNextOb   = GetCurOb+3    	;Get next object in list
GetObj      = GetNextOb+3    	;Get pointer to object

SetMat      = GetObj+3       	;Calculate and set object matrix
Pitch       = SetMat+3       	;Pitch - rotate object around x-axis
Yaw         = Pitch+3        	;Yaw - rotate around y-axis
Roll        = Yaw+3          	;Roll - rotate around z-axis
MoveSide    = Roll+3         	;Move object
MoveUp      = MoveSide+3
MoveForwards = MoveUp+3
GetSideVec  = MoveForwards+3 	;Orientation vectors
GetUpVec    = GetSideVec+3   	;(length=64)
GetFrontVec = GetUpVec+3

SetParms    = GetFrontVec+3  	;Set rendering parameters

SetVisParms = SetParms+3	;Set visibility parameters
CalcView    = SetVisParms+3  	;Set viewpoint = object
SortVis     = CalcView+3     	;Compute and sort visible objects
DrawAllVis  = SortVis+3    	;Draw all visible objects
GetNextVis  = DrawAllVis+3 	;Draw next objesible object list
RotDraw     = GetNextVis+3  	;Rotate and draw object
DrawFace    = RotDraw+3		;Draw single face (polygon)

* lib3d stuff

CALCMAT  EQU $8800
ACCROTX  EQU $8803
ACCROTY  EQU $8806
ACCROTZ  EQU $8809
GLOBROT  EQU $880C
ROTPROJ  EQU $880F
POLYFILL EQU $8812
PLOT     EQU $8815
DRAWLINE EQU $8818
VERSION  EQU $881B


Routine descriptions
--------------------

Init3D
  On entry: .AY = pointer to object record storage area
  On exit:

  This routine is used to initialize various obj3d and lib3d pointers and
  variables, and should be called before any other routines are called.
  Note that if e.g. tables or the screen center are moved around, the
  corresponding variables should be set *after* calling Init3D.

AddObj
  On entry: .AY = pointer to object structure data
            .X  = optional user ID byte
  On exit:  .AY = pointer to object
            .X  = object number
            C set indicates error (e.g. too many objects!)

  AddObj is used to add objects into the world.  It places the object at
  the first empty spot in the active object list, and allocates a 
  corresponding portion of memory in the object storage area, as passed
  to Init3D.

SetCurOb
  On entry: .X  = object number
  On exit:  .AY = pointer to object
            .X  = object number

  SetCurOb is used to set the current object.  The &quot;object number&quot; is
  a number returned by AddObj.  This routine is used before calling
  e.g. the movement routines, which act on the current object.

GetCurOb
  On entry:
  On exit:  .AY = pointer to object
            .X  = object number

  GetCurOb is used to get the current object number and pointer.

GetOb
  On entry: .X  = object number
  On exit:  .AY = pointer to object

  GetOb gets a pointer to an object without setting that object to
  be the current object.

DelObj
  On entry: .X  = object number
  On exit:  C set means rather nasty error

  DelObj is used to delete an object from the active object list.

GetNextOb
  On entry:
  On exit: .X  = object number
           .AY = object pointer
           C = 1 -&gt; error

  GetNextOb gets the next object in the active object list, starting from
  the current object.  On exit, the current object is set to .X.  This
  routine may be used to cycle through the list of active objects.


* Object manipulation routines


SetMat
  On entry: .X  = angle around x-axis
            .Y  = angle around y-axis
	    .A  = angle around z-axis
  On exit:

  SetMat is used to set a rotation matrix for the current object.  Angles
  go from 0..127.  Note that SetMat rotates around the fixed _world_ axis, 
  not an object's local coordinate axis; use Yaw/Pitch/Roll to rotate about
  the local axis.

Yaw
Pitch
Roll
  On entry: C clear -&gt; positive rotation
            C set   -&gt; negative rotation
  On exit:
  
  Yaw, Pitch, and Roll rotate an object by a fixed amount (3 degrees or so)
  about the local coordinate axis.  (The local coordinate axis rotates
  with the object).

MoveUp
MoveSide
MoveForwards
  On entry: .A  = distance (signed)
  On exit:

  MoveUp/Side/Forwards are used to move an object along its local coordinate
  axis, by an amount proportional to .A; negative values of .A will move in
  the opposite direction.

GetUpVec
GetSideVec
GetFrontVec
  On entry:
  On exit: (.X,.Y,.A) = signed (x,y,z) coordinates of orientation vector

  GetVec is used to figure out what direction the current object is
  pointing in.  The vectors are signed, and of length 64.


* Visualization routines


SetParms
  On entry: .AY = pointer to pattern table
	    .X  = Bitmap address (high byte)
	    C set   -&gt; solid polygons
	    C clear -&gt; wireframe
  On exit:

  SetParms is used to set certain rendering parameters.  The pattern table
  consists of a list of 8x8 patterns.

SetVisParms
  On entry: .AY = Maximum object range
	    .X  = Minimum object range
  On exit:

  SetVisParms is used to set the range in which an object is considered
  &quot;visible&quot;.  An object's center z-coordinate is compared to these values;
  the range is not a radius.

CalcView
  On entry: .X  = Viewpoint object
  On exit:

  CalcView computes the view from the viewpoint object, by translating
  and rotating centers relative to the viewpoint object.  The relative
  centers are stored in the CX HCX etc. lists; the ObCenPos element in
  the object record is an index into this list.

SortVis
  On entry:
  On exit:

  SortVis computes a sorted list of visible objects.  Objects are visible
  if they are within a 45 degree cone forwards of the viewpoint object,
  and within the min/max visibility range, which may be changed with
  SetVisParms.  CalcView must be called before calling this routine.
  Sorting is necessary to ensure that objects overlap one another
  correctly on the screen.  On exit, the current object is set to the
  first object in this list.

DrawAllVis
  On entry:
  On exit:

  DrawAllVis draws all visible objects, in order, as determined by SortVis.

GetNextVis
  On entry:
  On exit:  .X  = Current object
	    .AY = Pointer to object
	    N set -&gt; at end of list

  GetNextVis fetches the next object in the visible object list, setting
  it to the current object.  This routine is used to draw one object at
  a time, but in the proper order.

RotDraw
  On entry: .X = Object number
  On exit: Cool rendered polygon

  RotDraw renders an object to the screen, by rotating and projecting
  the object vertices and then drawing faces, either wireframe or solid.
  On exit, the rotated and projected points, i.e. the screen coordinates
  of the object, are stored in PLISTX and PLISTY; PLISTZ contains the
  rotated (but not projected) z-coordinates.

DrawFace
  On entry: .AY = pointer to face data
  On exit:  .AY = pointer to next face

  DrawFace renders a polygon to the screen, either wireframe or solid.
  It would be an awfully good idea to have the rotated points in PLIST,
  i.e. to call RotDraw before calling this routine.
.......
....
..
.                                   C=H #18

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


Stroids    o
-------  o   o
               o SLJ

	When you get down to it, just displaying things on the screen is
awfully easy.  And clearly, the obj3d library is up to the task of simple
programs like Cool World.  What isn't clear, however, is whether it is
useful for making applications like games, where objects are constantly
being created and destroyed, and have different properties and velocities
and such.

	Hence stroids.  Stroids is a demonstration of the obj3d routines,
more specifically a demonstration that obj3d is suitable for writing games
and such.  In stroids, you can fly around in an asteroid field containing
three different types of randomly drifting asteroids.  The first part of
this article will discuss the main algorithms and techniques used in the
program.

	Stroids is also meant to be a starter project for people who would 
like to experiment with the library.  For the most part, all of the difficult
routines have been written; with a little more work, Stroids could be made 
into an actual game, and there are lots of opportunities for modification and
improvement.  Thus the second part of this article will suggest a number
of possible ideas and modifications, and how they might be coded up.  This is
rather akin to a C=Hacking C=Hallenge, so I'm interested in publishing the
niftier modifications and applications that might result.

	Finally, the full source code is included at the end of this article
(the PETSCII el cheapo version is in the .zip).


The program
-----------

	The source code is in El Cheapo format.  To use the program, just
load and run the loader program.  Stroids accepts the following keys:

	joystick in port 2 	Pitch and yaw, fire
	@ and /			Increment/decrement velocity
	space			Switch viewpoint object

	r			Toggle radar on/off
	a/z q/w s/d		Pitch, roll, yaw
	+/-			Increment/decrement asteroid density
	=			Toggle wireframe mode

Initially, the viewpoint is set to a large, fixed tetrahedron at the
center of the world; your ship is straight ahead, and you can move
it around using the joystick and @/.  Pressing space shifts the viewpoint
to the next object -- the ship.  Pressing space again will hop onto
the next object -- an asteroid!  Pressing it some more will cycle through
all the objects, eventually returning to the first object.


The code
--------

	The purpose of this project was to test out the obj3d routines
in some tougher game-like conditions, in which many non-indentical objects
are present and are being created and destroyed more or less randomly,
and where things like collisions must be detectable.  A 3D asteroid field
seemed like a reasonable test -- asteroids can created more or less randomly,
with different sizes and velocities.  A player could then fly around in
the asteroid field, maybe with a radar display showing the relative
positions of asteroids.  Maybe the asteroids could be shot, or simply
dodged.  And so on.
	The program is really pretty simple.  There are two routines which
control the asteroid field; one controls creating and destroying asteroids,
the other controls their movement.  There are two routines to compute and
render a crude radar display.  Obj3d is used to render the screen, and
all that's left is to move the ship around and wait for keys.  A little 
IRQ routine is used to keep the program running under 60fps on a SuperCPU,
which also reads the joystick (and which in principle would play music,
handle sound effects, etc.), and that's about it.  Thus the main loop is
quite straightforward:

	- Update asteroid field
	- Set up radar
	- Compute/render main screen
	- Render radar display
	- Move ship and wait for keys

Stroids  
         JSR Init
         LDA #00
         STA CURD

:loop    
         JSR CheckDensity
         JSR DriftStroids

         JSR SetRadar

         LDX VOB          ;Calculate view
         JSR CalcView
         JSR SortVis      ;Sort objects
         JSR DrawAllVis   ;Draw objects

         JSR DrawRadar

         JSR CheckFire
         JSR SwapBuf

         LDX ROB          ;Set rotation object
         JSR SetCurOb
         LDA VELOCITY
         JSR MoveForwards

:wait    LDA IRQFLAG
         BEQ :wait


The asteroid field
------------------

	The asteroid field only &quot;exists&quot; in a little cube.  When asteroids
exit this cube they are destroyed, and new asteroids created.  Currently
this cube stays fixed in the world, but one of the suggested projects is
to center it on, i.e. make it move with, the ship.  The purpose of the
cube is to keep things manageable -- it makes no sense to keep track of
asteroids that are many thousands of units away.  That would just massively
bog down the system, and mean that the player wouldn't ever see or interact
with any asteroids.  What's fun about that?
	The asteroid field within the cube is characterized by a &quot;density&quot;,
which may be changed by pressing the + and - keys.  There are three different
kinds of asteroids -- large, medium, and small -- and each asteroid has a
&quot;weight&quot;.  When an asteroid is created, its weight is added to the total
field weight; when destroyed, its weight is subtracted.  If the total weight
exceeds the &quot;density&quot; value, no new asteroids are created.  The net result
is a constantly changing asteroid field with a pleasantly uniform density.
	To create an asteroid, a random value is chosen for the weight;
this weight determines the size of the asteroid.  If the weight is too large
(would exceed the field density) then no asteroid is created.  This keeps
the field changing, since asteroids are not simply replaced by identical
objects, and probably gives big asteroids a chance.  That is, a field that 
is always &quot;full&quot; surely favors small objects: if a large asteroid leaves
the field, it can be replaced by multiple smaller ones; if a small asteroid
leaves, it can only be replaced by a smaller one.  So I predict that the
field would otherwise quickly degenerate into a bunch of little asteroids.
	If an asteroid makes it into the field, it is assigned a random
position, speed, and orientation.  The orientation is computed using the
obj3d routine SetMat.  The object's &quot;weight&quot; is stored in the ID byte of
the object, and the velocity is stored in the user byte.  This provides an
easy way to identify the type of object, and keeps the velocity along with
the object (instead of putting it in another table).  By storing all non-
asteroid objects with the high bit of the ID byte set, it is very easy to
differentiate asteroids from other objects.  Once created, an asteroid
just moves in a straight line, until it leaves the play area.  There is no
collision detection -- that's a project for you!  (But it's pretty easy).
	All of this is done using two routines: CheckDensity and DriftStroids.
CheckDensity simply creates new asteroids until it can't create any more;
DriftStroids simply goes through the object list, looking for asteroids
and moving any it finds (recall that the velocity of the asteroid is
stored in the user byte).  The code is pretty straightforward, so you
can go through the source listing to examine the routines in more detail.


Random numbers
--------------

	It is worthwhile to say a word or two about the random number
generator used.  I used it as an experiment in my quest for a very quick
but reasonable random number generator, and it seems to work fairly well --
certainly better than other ones I tried.  (Deficiencies in random number
generators become awfully apparent awfully quick, in the asteroid field).
	This particular generator uses the &quot;middle-squares&quot; method.  In
this method (which was proposed by VonNeumann), an n-bit number is squared,
and the middle n-bits are taken as the next number in the sequence.
In this case, the numbers are 8-bits.  To get the next number in the
sequence, the number is squared, giving a 16-bit number, and the middle
eight bits -- bits 4 through 11 -- are used as the next number in the
sequence.
	To do the squaring, I simply used the lib3d multiplication tables
of f(x)=x^2/4.  Two more divisions by two thus gives x^2/16, i.e. the middle
8-bits.
	Middle-squares is not without problems.  The method is known to
have a number of short sequences -- ideally you want a sequence of numbers
that takes a long time to repeat; a sequence like 1 99 63 1 99 63 ... isn't
so useful.  The method also dies once you hit a zero -- zero squared is
just zero.  So I built in a simple modification to compensate for these
deficiencies: the routine re-seeds itself whenever a) the current seed
generates itself (like zero will), or b) the current number sequence
exceeds a maximum length (that is, after generating N numbers it re-seeds
itself).  The re-seeding is just a simple method to keep the algorithm from
getting stuck.

	
Radar Display
-------------

	Navigating around a 3D world is very difficult without some form
of reference.  A compass is one possibility; landmarks another.  A radar
display is potentially much more useful, though, and also more difficult --
another good test of the routines.  The stroids radar uses a pretty neat
trick: it actually creates a &quot;radar object&quot;, whose vertices are the object
centers, and lets obj3d do the hard calculations.  This will be explained
shortly.
	The purpose of the radar is to display where objects are located
relative to the person.  With a few moments of thought this is seen to
be very similar to the &quot;viewpoint&quot; problem.  That is, to compute the
viewpoint from a particular object, the surrounding objects need to be
translated and rotated about the viewpoint object.  This is exactly what
the obj3d routine CALCVIEW does.  So by dipping into the obj3d center list
(after calling CALCVIEW) we can get all the relative locations automatically.
	The purpose, however, is to _display_ the relative object locations,
not merely to compute them.  Imagine, for a moment, a cube, with us located
at the center of the cube (this is, after all, all a 3d world really is).
Then imagine a bunch of dots around the cube, representing the locations of
other objects.  There's our radar display -- now how could we draw something
like that on the screen?
	Well, we said it was contained in a cube.  But drawing a cube is
pretty easy -- just specify the vertices of the cube, locate the center out
away from the viewer, rotate and project.  Well from there it's awfully
easy to compute the points inside the cube -- just add them to the list
of vertices, and rotate and project them along with the rest of the cube,
and then maybe plot them on the screen.  And when you get down to it,
the vertices of the cube aren't really necessary.
	The only other thing to realize is that there is an obj3d routine
for rotating and projecting points -- RotDraw.  So now we have a way of
generating a radar display: create a new object, whose vertices are exactly
the relative object centers computed by CalcView.  Give the object a
center coordinate out a little ways from the viewpoint object, and then
just rotate, project, and plot the resulting points somewhere on the screen.

	The radar code is a little tricky, and could surely use some
modification, so it's worth going through it in some detail.  The radar
is an actual obj3d object, and is the first object created -- thus it
is object number 0.  Recall that CalcView translates and rotates all
objects relative to the viewpoint object.  Before CalcView is called,
the location of the radar object is set to the location of the viewpoint
object:

*
* DrawRadar -- Compute and draw radar
* display, by creating a new object whose points are simply the
* (scaled) object centers.
*

RADOFF   = 24             ;Size of radar
RADFLAG  DFB #$00         ;Radar toggle

IDENTITY DFB 64,0,0       ;Identity matrix
         DFB 0,64,0
         DFB 0,0,64

* Set radar center to view center

SetRadar 
         LDX VOB
         JSR SetCurOb
         STA TEMP
         STY TEMP+1
         LDX #00
         JSR SetCurOb
         STA POINT
         STY POINT+1
         LDY #5
:l       LDA (TEMP),Y
         STA (POINT),Y
         DEY
         BPL :l
rts2     RTS

Thus CalcView will translate the center to be (0,0,0) and store those zeros
in the center list (CZ and HCZ, located at $5A00 and $5A80).  One consequence
of doing this is that the radar object will not be considered &quot;visible&quot;,
and hence skipped over by DrawAllVis -- the radar object needs to be drawn
manually.
	That's the job of DrawRadar.  The radar is drawn on the screen last,
so it is always in the foreground.  The first step is to locate the radar
as if it were out in front of the viewpoint object (if you think of the
radar display as a cube, you can see that it needs to be treated as if it
were out in front of the viewer, not right on top of/surrounding the viewer):

DrawRadar
         LDA RADFLAG
         BMI rts2
         LDX #00
         JSR GetObj
         STA POINT
         STY POINT+1

         LDY #ObCenPos
         LDA (POINT),Y
         TAX
         LDA #200         ;First, cheat the center
         STA CZ,X         ;by putting it at (0,0,x); note radar is object 0
         LDA #03          ;(so projection will work out correctly -- don't want
         STA HCZ,X        ;negative points!)

A value of $03C8 is stored directly into the object center list CZ.  This
is the list used by RotDraw: the object centers from this list are added
to the object vertices before projecting.  The value $03C8 was chosen
because it makes the radar a reasonable size on the screen -- smaller
values of the z-coordinate mean the object is closer to the viewer, and
hence will appear larger.
	The next step is to set the viewpoint orientation matrix to the
identity matrix.  RotDraw implements the equation M*(RP + C) -- that is,
rotate a vertex P by the orientation matrix R, add it to the center C,
and rotate the whole thing by the viewpoint orientation matrix M.  In
this case, the radar needs to be _not_ rotated, so M needs to be set to 1 
(R, the local rotation matrix, is already set to the identity matrix).
The viewpoint matrix used by RotDraw is stored in zero page, at VIEWMAT,
so it's a simple matter of copying the identity matrix defined up above:

         LDX #8
:l1      LDA IDENTITY,X
         STA VIEWMAT,X    ;Don't add any extra viewpoint rotation
         DEX
         BPL :l1

The next step is to create the data for the radar.
	The idea is to create an actual radar object, and update the
vertices at each pass of the main loop.  The radar object is stored at
the very end of the code:

*
* Radar object.  To do the radar, an object is used whose points are simply
* the translated and rotated object centers.  This object is then projected
* using the obj3d routines, and the points plotted.
*
RADOBJ   
         DFB 0            ;Normal object
         DFB 0            ;Number of points
         DFB 0            ;Number of faces

* Point list

RADDAT

The idea is to update the number of points and set the vertices -- stored 
at RADDAT -- to be the translated and rotated object centers.  Recall, 
however, that object vertices must be in the range -95..95 or so.  A typical
object center, however, is a 16-bit number.  So the object centers need to
be scaled; the radar code divides them by eight, before adding to the vertex
list, setting any out of range numbers to either -95 or 95.  This is done
using the little subroutine DIV8X1, used later.
	Before doing anything, however, three pointers need to be set
up which point to the x-, y-, and z-coordinates of the radar object
vertices:

         LDX NUMOBJS
         DEX
         STX RADOBJ+1     ;Number of points
         TXA
         CLC
         ADC #&lt;RADDAT
         STA TEMP         ;y-coords
         LDA #&gt;RADDAT
         ADC #00
         STA TEMP+1
         TXA
         ADC TEMP
         STA POINT        ;z-coords
         LDA TEMP+1
         ADC #00
         STA POINT+1

Note the STX RADOBJ+1, which sets the number of points stored in the
object.  Once this is done, the code simply moves through the translated/
rotated center list, divides each coordinate by eight, and stores the
result in the object:

         LDY #00          ;Order doesn't matter
:loop    
         LDA CX,X
         STA X1
         LDA HCX,X
         JSR DIV8X1
         STA RADDAT,Y

         LDA CY,X
         STA X1
         LDA HCY,X
         JSR DIV8X1
         STA (TEMP),Y

         LDA CZ,X
         STA X1
         LDA HCZ,X
         STA TAB1,Y       ;Remember sign
         JSR DIV8X1
         STA (POINT),Y
         INY
:skip    DEX
         BNE :loop        ;0 is radar object

That's all there is to creating the radar!  But it still needs to be
rendered to the screen.
	The lib3d routines have two zero page variables, XOFFSET and YOFFSET,
which tell the routines where the center of the screen is -- after points
are projected, they are added to XOFFSET and YOFFSET to get the actual
screen coordinates.  Normally these are set to the physical center of
the screen, e.g. XOFFSET=160 and YOFFSET=100, but having the radar plopped
right into the middle of the screen isn't so useful -- better to have it
tucked away off in a corner.  The easiest way to do this is to change
XOFFSET and YOFFSET to make the projection routines think that the origin
is at, say, (24,24), in the upper-left corner of the screen:

         LDA XOFFSET      ;Change coordinate offsets
         PHA
         LDA YOFFSET
         PHA
         LDA #RADOFF
         STA XOFFSET      ;Upper-left cornerof screen
         STA YOFFSET

         LDX #00
         JSR RotDraw

         PLA
         STA YOFFSET
         PLA
         STA XOFFSET

RotDraw projects the points, and stores them in PLISTX and PLISTY.  Therefore
all that remains is to move through these lists and plot each point!  When
I tried this, however, the result was unsatisfactory -- there were just a
bunch of points on the screen, and it was very difficult to tell where
they were located relative to the view, or how far away they were, etc.
So the next logical step was to draw lines instead of points -- that is, 
draw a line from the center of the radar (the viewer location) to the
individual points.  This helped, but it was still difficult to determine
e.g. whether an asteroid was in front of or behind the viewer.  So the
last step was to use different colors for the lines, depending on whether
the object is in front or behind the viewer.  This is done by simply
checking the sign of the z-coordinates; the z-coordinates were stored
in a spare table TAB1, above, in the code which computed the object
vertices.
	With all that in mind, here's the rendering code:

:loop2   LDY RADOBJ+1     ;Now plot each point
         DEY
         LDA PLISTX,Y
         STA X1
         LDA PLISTX+$80,Y
         STA X1+1
         LDA PLISTY,Y
         STA Y1
         LDA PLISTY+$80,Y
         STA Y1+1
         LDA #RADOFF      ;Line from center to point
         STA X2
         STA Y2
         LDA #00
         STA X2+1
         STA Y2+1

         LDA #&lt;COLOR2     ;Set fill pattern
         STA FILLPAT
         LDA #&gt;COLOR2
         STA FILLPAT+1
         LDA TAB1,Y       ;Use different colors
         BMI :draw        ;for front/back
         LDA #&lt;COLOR1
         STA FILLPAT
         LDA #&gt;COLOR1
         STA FILLPAT+1

:draw    JSR DrawLine

         DEC RADOBJ+1
         BNE :loop2
:rts     RTS              ;Whew!

where COLOR1 and COLOR2 are simple 8x8 patterns:

COLOR1   HEX 5555555555555555
COLOR2   HEX AAAAAAAAAAAAAAAA

And that's all there is to it!
	That pretty much wraps up the non-obvious parts of the code; the
rest is really straightforward.  All that leaves is...


Simple Modification and Improvement Projects
--------------------------------------------

	Not only did I not feel like doing further work on the project,
it occured to me that others might actually be interested in doing the
simple routines needed to e.g. make it into a game.  So in this section
I thought I'd describe some possible directions that the code might be
taken in -- some simple projects that give some practice in using the
obj3d routines and 3d graphics in general.  So without further ado...

- Third person perspective

	It might be interesting to try putting in a third-person perspective,
i.e. place an empty object above and behind the view object.

- Collisions

	Currently there is no collision detection -- in particular, there
is no detection of an asteroid hitting the ship.  This is a pretty easy
task -- get the ship's center x-, y-, and z-coordinates, and compare
them to the coordinates of every asteroid.  Use JSR GetNextObj to traverse
the object list, check the ID byte (asteroids have the high bit clear),
and if an asteroid compute the difference between the asteroid and ship
centers.  If it is small enough for all three coordinates, signal a
collision.  Note that the translated/rotated centers in CX, CY, CZ
may be used without performing the subtraction.
	If you're feeling more brave, a good challenge would be to let
asteroids collide, and break into smaller asteroids upon collision.  It
just involves many more comparisons -- perhaps even a little data
structure to process the comparisons more efficiently (e.g. sorting
one of the coordinates, and only comparing near neighbors).

- Realistic flight model

	Currently stroids uses a rather cheesy &quot;flight model&quot;, where
you always move in the forwards direction.  A more realistic flight model,
taking intertia into account, would probably be more fun.  Physics says
that force causes a change in velocity in the direction of that force --
in other words, if you thrust in a particular direction, it adds velocity
in that direction.  To implement this on a computer, you need to get the
direction of thrust, using GetFrontVec, and add that vector to the total
velocity vector:

	If thrust
	    - GetFrontVec (vector has length = 64)
	    - Scale vector -- maybe divide by 16, keeping fractional part;
		maybe treat strictly as fractional part.
	    - Add to total velocity

Then at each pass through the main loop the code simply adds the total
velocity to the center coordinates.

- Compass, position, fuel, stats

	With a more realistic flight model, it becomes imperative to
somehow indicate what direction the ship is moving, compared with the
direction it is pointing.  In the absense of landmarks, this means that
the position and direction need to be indicated somehow, either graphically
or in plain text.  A simple solution would be to use a raster interrupt at
the bottom of the screen, and display the information as text.
	Naturally, if a game of some sort is desired, then it might be
helpful to add damage and fuel into the program.

- Better radar

	The current radar display is not terribly effective.  One possibility
is to make an Elite-like radar display, which gives a plane of reference and
indicates altitude and position (i.e. draws right-triangles).  This isn't a
very difficult extension of the radar calculation.  The radar display should
be tilted, which means using SetMat to rotate the radar around the x-axis 
when it is first initialized.  Then, when adding the object vertices, for
every point (x, y, z) add another point (x, 0, z) -- drawing a line
between these two points gives the altitude.  (Literally, it draws the
altitude of a right triangle; the current display draws the hypoteneuse).

- Better asteroid objects

	Tetrahedrons are not particularly inspiring asteroids.  Draw some
new non-lame ones!

- Move asteroid field with ship

	Currently the asteroid field is centered at (0,0,0) -- that is, the
boundaries of the field are fixed.  Center it instead on the ship, so that
the boundaries move with the ship.

- Variable field density

	Instead of having a single fixed density to the field, modify the
program so that different areas of space have different asteroid densities.

- Projectiles and lasers

	What's a game without weapons?  A boring game, that's what.  One
possibility is to add a projectile weapon -- make a little cube shoot out
the front of the ship, for example.  It might fly straight, or it might
home in on a target.  A collision detection routine would also be needed.
	Another thing to do is to make the lasers actually do something.
Detecting a laser hit on an object is non-trivial -- ships which are closer
are larger, and should be easier to hit.  The basic issue is to determine
whether or not the object covers the center of the screen -- that is, whether
there is any point (0,0,z) _inside_ of the object.  One way to do this is
to check whether the (rotated and translated) center of a visible object is
within a certain distance of (0,0,z) (i.e. only check the x- and y-
coordinates).  Note that CalcVis calculates and sorts the visible objects.
	Another possibility is to draw each object, one at a time, and
check to see if the center of the screen (or some small area of the screen)
was plotted to.  The thing that makes this method a little tricky is that
the farthest objects are drawn first, so a program needs to keep track of
the _last_ object that draws to the center of the screen, not the first.
And doing that means clearing the pixels being checked whenever they are
rendered to.
	There are probably other, better methods of detecting collisions!

- Make a game

	Naturally.  Go crazy!

Source code
-----------

See the .zip file, or the Fridge, for the stroids source code.
.......
....
..
.                                   C=H #18

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

begin 644 obj3d.zip
M4$L#!!0````(`#1CQQH3MMYJU`0```$&amp;```'`!``;V)J,V0N;U58#`!\C'XW
M)(@3+)P/9`!=5&amp;V,$T48GFN%G'`&lt;&quot;PHVDNC&amp;'_B1,U?X52*)\L-/!KH?W6_.
MK,(!58_$F)CP@V1).F-3NTU+0M(#+FZ6[GE[WC57$,\JQ0.1E&quot;JD)B1*C!&amp;%
MGE5/TDM(!(QWSO1`C4WGG7?&gt;9]ZO9V86&lt;##&amp;P6\Y^!P/-_!P(P]W\O!I'K[#
MPU,\/,O#&amp;@\O\?!K'G[#P[&lt;%^)8`]PKPB`!'!'A,@$^*\(P(OQ3AM`C72X#^
MV!V@TQ:XM,CY+Z,)]S0^5L,?NF?Q1S7\L3]O;^%\8&amp;_F[*T&lt;JJ#3Z%W?0I^A
MSY'M&amp;O@4GFKB,_AL$Z=QQ@7X*'X??^!:V,,^'G=57&quot;!CV-7P&quot;!FCKH['R&quot;BZ
M[SG;V35))N!&amp;L9B(.2`_:,E5YK:)I(2&quot;91&gt;DD!HZ:&lt;FMKCB;#4ZKH28S&amp;S$'
M!`[I0T#VU`&amp;10\:0)5_?S,ULY;+!S%;.&gt;=@'.3W)_.D_XW3G=&amp;&lt;E&amp;:O)Z/3D
MG.XI22(D(C);N.(6K@)D$MWT`8DQOIEKK;JX$&amp;A9Q9+KBVK,S4B3A#0I]&quot;#9
M'EY%P8`[WZ0UW2;&gt;)$S(C)@L2%+X$6()Q;N13MSC`!D^&lt;%:06J8ZZ[?*F]I5
MW30[V8T\V9/MJ#YFLL=X&amp;$Q2N;@M[TV:3G&gt;/LZ+'N3^AG`&gt;M651&quot;)UZ&lt;#\4[
MT'$T23/\0#*TPR.CI(_X2UW`/B04E&amp;I&quot;H&lt;LN-[&quot;PI(ME[CU81E*I%)D]CM32
MB=G)*2L;:)2&amp;2\RBA!9I:$ASP./S3$&lt;ROUA=JSWQ/S'JJ04I]*:&gt;TPNRI]&amp;Y
MFJ+RGPII.0_\MYS1*LG[0I+DWFV2J\3L&amp;13L0T+ZL(#+IAWETAR7X3DSDQ?8
M#3S2$X;;Z:PNZ0=?2A*&gt;W:4GCA[&lt;7F-ND9LCLSOYF;S0&gt;AZI&quot;2TU+`_M5U+.
MDISJ@)(:F24'KU9+*IDM.K&lt;-VAV#=M&gt;@WS'HTS)3*LAIR,&amp;N)&quot;!WMT?T+=M2
MBI&quot;KA?=6+!UI%:`C]4*4\[3?.6ZBSU,O\$3_!60%3PWM`ZJG[;/4\+.&gt;^CW5
M_R+ZAC:@44`+]U!`HX`69AVK#)3PRH0R4@;Z%VK9TAO:Q$R^H`P!)34(E!J3
M=JSTI&amp;@&quot;(LK[E5%V6BQ.BB&gt;!PEPW%Y3P'P0ZM5\AM&lt;Y)Y%&amp;W7^6_+#O=+LC,
M25CU@T@CY&amp;VJ-IO-&lt;UK]QK#:O!*L_^PL*&gt;E(&lt;A:7=/M'&lt;92&lt;A_V3B`RL$^YT
M^YI(#&quot;W#ODIGNR%6\Z%^'&lt;6'C6R@&amp;&lt;*O#5P5T&gt;MM]0VJ#K35/42UPU(J#NQU
MTMA5&lt;5B*L,N3XPVQ==]X6!I;)Q6OB&gt;$N=KUTL2'6;])SIT&lt;;&amp;FB(=BZ6)UX'
M8GZO/1\E\%A#))&gt;D`OJ06K'ZD%9LB$YON1X]WSNQ0%D?I:R/4/8KI:P&gt;30W6
MJ1]SKKUM-).-7&gt;F=&gt;&amp;K\0`P9X[D8TJ^`UG('D#N*=/)Q,$*U^@VGH]U9P?#T
M4#Q`'MG=RL:R,&gt;:3N^6UV&gt;B5(O%`OTZ:\P%2^PW2'_5&gt;LE9=^`\&lt;$M&quot;GY!-S
M6$`GBX,&quot;LX8\&gt;\+;$`C,]$KU&amp;ZE6D%V97.#`=`+MS@QD5BP#O5(!V]&quot;K%6L;
MVHZEZAUD!T7Z*;*3(KL2B@.^FI-:3.HRB-8?]:3+NZ.MU57F-T\:!*3UW=&amp;I
M7:W@]3F)#24+RD62\DAD(DLVU;\C&gt;XG+I583_`U02P,$%`````@`-F/'&amp;DNF
M#.+S&quot;P``Z!L```D`$`!L:6(S9'8R+F]56`P`@8Q^-R&gt;($RR&lt;#V0`Y5A]&lt;!/7
M$3_;^)L/A0`Y&quot;($K0QA(&quot;54SF8RFS8=M+&quot;,[9TQL2_(7]NFDDT[^E)1.!]HF
M\1]ZLF.P+8%-1(#$X]Q3+&quot;5I=(5,P@379A@&lt;VTF+_F@ZR;29H3.1!]I,*C+Y
M`](F=-_I3.PB#&quot;'DK^QH[??V[&gt;Y[N[^]/3U17DJE-)725&lt;I0:9%*F2IEJ92M
M4HY*N2KEJ92OTF*5EJBT5*5E*FE4NDNEY2K=K=(*E5:JM$JE&gt;U2B55JMTAJ5
M[E5IK4KWJ;1.I?4J49WCYQ.7__O-C_7_&lt;T^L7Y:=D4;]6/\/48&amp;VH1Q@#3`-
MS`!O!M8&quot;ZX`+@`W`NX!K@#E@$=@%O`&gt;X$[@;V`\&lt;!!X&quot;'@&amp;.`K\#/`X\&quot;1P#
M_@CX//`%X`3PY4#;3/O-3L&quot;Q5!=5T#F&gt;DJFT](S,K.R&lt;O/S%2Y9I[EJ^8N6J
M&gt;U:ON7?M.BI'0S.;M;H&quot;PZX:3G3MZ&gt;SV!X=&amp;HN^,3\8^.G\A&lt;7EVG=WP(OOP
M$=9UA/WI$3;_*!LXQN[O9O5!]IE@.)VC%N4LUJR@US(;-V_5/JQ[M*#8P.ZJ
MKFG@;&amp;*KZU=[?M?IZ^D[&lt;.C%EX;3L_*6+E^U9MV&amp;30]L&gt;^B17SQ&gt;5%*VL])4
MU\C;F]L]O_[-L][N_?Z!X-$A2Z6&gt;J:TP,M4&amp;/?-DZ&lt;X=3$6),B[3FZN&gt;\-7X
M:L,4,B(3JCM%I&lt;NGSQKE,]JE&lt;9,_SU&lt;GGT8P0Z;IV*&gt;ANE@:YZLG*J/(AASR
M&amp;!*0B(TEIN;D![5$L'%+-FJ^+]2%VD;'NFCA)&amp;I'':&amp;ZB5I-[DP#KIVZ&amp;AWE
MF.%#VJ\R&amp;Q+_]-5)1N*$N)-,NDNCR(6%2V.:##:]![F9,X&lt;8__.221Z+R*.2
M45GN45;[815LR`%$9L,+R(1MNKB#&amp;,=%Y,8N79R+9DRX=7$&gt;9.Z+E#8STY5(
MXZ26\=713&amp;QB*_:/T*SCH+72N+VTI)8QE);_)+%A*MV_*B^:%;Z*6F.;(!VM
MR!Q&gt;U&quot;MUQ5:?+XA&gt;##,S[&lt;]07M0Z,DHA9#ZYOAN60O4D+HCJF^@V;ICZM&quot;;Z
M%23'&quot;_DRR*&lt;OZ,C8=.DT:D0&gt;\=(9U(1D[&lt;&gt;9GL3[OGI.%+E4@64_KP1F(TEA
M_GVC\+^X2?BTP/G39^:$K\ETQ?*Q11&gt;W8B[.^^=D8D,?-M&amp;L&lt;T#!021.9W$0
MKQV(*4^=X?0)-RTH6SAGM[#JXA;,Q[FY6_PA0+;@#MUH&quot;Q)-JBU(%!DS9`ME
M@SD&gt;X_W$HWUP8K&gt;F&lt;%YI;;N5TMK4JY06^](^;J(A\2ZVPYF1'=OB'+)%(&quot;@!
M&quot;_1M5&lt;-$8\PZT:1IFE,5Q[Y35:3&quot;^K&gt;!&gt;5A#Z6(G+5B1$SL$/H(&lt;D&quot;*1QF*B
M'`Z\/2^Z)M2J724UR^\BXZF/NIYJN]^L-P;:L)%YI8O]9+_4JK4-4Z.43V]&amp;
MYJ16J'6.'JA`=*?&quot;#,1VMM4?2_SE%.7S@@YJ5;1-L[JF0)O4^L&lt;=W6'N&amp;-6%
M3&gt;`=Q$8B#@&gt;(I`.U3[1--&amp;LS6+0O#/U`:DFL[/:VK&quot;9MX&gt;2UM@&quot;+'&amp;!8/`_#
M1^9AF&quot;(C_+YYSP@K]`*,[V`[+2@P&quot;EP$V2`K`HV%VX6Q`V!LF0-CU?&gt;&amp;\??]
M\V'&lt;T*=TT8@\1I-G\'8AC?;=%-)HWYV&amp;E.U=`%*V]S8@G?;/AU37?\&lt;A;0)(
MZ^=`6O'=(+U![_I;K]*[2$=R0G&lt;E$$+3=9`V(F*1OA4(G_;?%,*G_7&lt;:PO7]
M&quot;T&quot;XOI^;:?RV/#,#`&amp;C!/$#/WTJ?O=*7[+-@WY`X=4?;[`\#YHK]23#AA76[
M8!8&lt;N&quot;F8!0?N-)B?^1&lt;`\S,_)^J9JD*3OIBI@&amp;]\E56_9%A]-?G.HTC)H$K/
MEFR;:(@5`M&quot;/??&lt;7JGPP&quot;?2_#G`I44[Q7OSK]VZH6P[-;ZB.@RF;J)*@P`&amp;2
MH(D6Z?^S,TXGR&quot;J\AR#ZXNO*_*&amp;;]:WC!^;WK&lt;\.INQ9D``;)(&quot;[HV^4GPW.
M3X!S@+MQ!OH/+I2!_H/0ME-FX/6;94`&gt;G)^!SP=NE($?YIE]&lt;&quot;#YS-H'4SZS
M2?@'%H1_@#0\B+X`HG]T7O07;Z7ZCP\DJ__&quot;X(V*_X&gt;)?.O!9.3&lt;H1M'WC^X
M(.R#T!W$PE)VZW57PFUBJ.;;XTUK$\KY='#`AN0!=R.98]`+/F[J:BS79PI3
MS&lt;CBST*6GC)D&quot;G&gt;2).CB)L@&quot;%BY22*&quot;OZ2Y3-(E&amp;R(8%_YKDF%AA6T0QP0)&lt;
MW821I`D/)HN)B174G#W^7'501@L.B!6+3@J)WZHNNZ8:&lt;F#1?X^J'7(D]4&amp;T
M:$8$UR6RW5/BMKNP'/L2NZ?2HY^785=S!'O*$@YXU7R@NT)]X*^.C%)_BB`9
MO55Z%;8YCMZ6/+*LNW0&lt;[L-O77H;3NR*&amp;Y$1N^,F;/2O.^OQ9U^(&gt;\YZHE=\
MQD@B7W4#3OX&lt;,G+3@L?_'_;O+PQ3V&quot;5Y8(#=RI;AJURSOLI8M96IU)?KRXOT
ME4RYGC$;]#N5Z_KV&quot;IB5[JRN(+-*!:;BBO)MG06,)F=1&gt;AJV:.\/&lt;&gt;&lt;++J9%
M[Y.LL=68GYJ,WEU65C;&quot;&quot;(&lt;QMR4[,OI8\*[V0#LWG/$6=\(V:`L.&lt;M.:+PDZ
M'-S&lt;A;A%&amp;T?.X4E2NCQJAA*R:I9@7A&gt;WP\0:=PQWHY:^+X)]#X(WY$KZ0QYL
M*;.[DA_,PU7-6F9W)S^AYD]%W!)W^A_RM&gt;(6QG`8-Y&gt;A)KD]TQ-HGQS/\6&lt;P
MT&lt;.X21&lt;7H[E&quot;&lt;XD'YL\&gt;GHY],M&amp;6^)@+B=A)+,1K%D2S.;I4$(EI-FI2C*]9
M?0Q6'W*^5M2&amp;6S*=B?R2%GMSB=,NLNQAYA^'0ZT7)#&gt;DX#*]%TJ_'5OVCG5!
M[7=@?DOV&quot;&amp;?WH&quot;;&lt;[LQ![=&quot;@.FC,P9#&lt;F2TS+NWR6)Z7E]S@@R31-;4Y^G/&lt;
MQ$TF5LZXM4MC&amp;2&quot;7W'`170NK0Q0WX=8NASD=6P0+=#2#2+/)]5ZQS(7J6AW-
M&quot;`&gt;VAC?V)H*]&amp;PYS]D+R%MZ:1+7:4,L8&quot;G&lt;65S%.@G5Y:3537LM4[2JM+*U&amp;
M-A_OM&lt;+U=\MS$0*);&lt;MS(Z/,.7HO&lt;P[I3U+G=%]3YU!Q#[1\4`A&quot;&quot;R#K%*Q3
MYZ8ZFU'A2094&amp;&amp;5&lt;A/FD&amp;O%#]&amp;;-M\\Z+.U1-H@$:&lt;$VWX^%%@J1@?QX4(@*
M05UWA9F5%Z$=N(CTO&quot;)L5&gt;PBY`&gt;`.&gt;=4;-1SZ.(&amp;9`&quot;_\%&quot;&lt;(Z9%ZAZTL`/&lt;
MD&quot;!!D(=*.+N(S-X:VIF+:H/PW-5QS)HC0]1P1BR;##*&amp;L_I:CT!CJD6&lt;;(Y,
M3D[&quot;R&quot;*;1YC7CV!&gt;,@9JL35@!C&amp;VP5`(F+N[Q[/\YQ0G6=?,@KJ+62.I#)6%
M65/).#F&gt;ZY_FL*C1`!:V$&quot;=9?!8O%[))_&quot;CU'IQ^&quot;L%@8B\UB:PDQ1SBH8BL
M)ZGW(+M3R':2FO@:U@1L(^]$&amp;ZP)(5&amp;S-,0CWF?#UI&quot;`!)^5ZX9C69%9%E&quot;-
M[$!ULA/5RRUHM]R&amp;&amp;G%9Z$F)978?A?/AGL`KN#RT4ZI(SL,]@5?QKM!34F5R
M_D9/X+4@M/7\HQRJ]35XFT82)JDFV;]H9QII8,GV95':%R^9DU..3,GY+)AW
M4I*L68)X`K&gt;9&quot;.(U4HTF0Q&gt;7L[A-E@&gt;4/Y+%VP%OH88$+]4OX+UN8&gt;]UBO=Z
MJ?XZ[Z0&amp;.U!'C^&quot;&quot;79I@E\8%=MF]\&quot;Z[E5T:I&lt;;K=D$\V08&gt;&quot;,'%A3JPB\-1
M9/&amp;9O$:[J%D#WW1&gt;`4`P`/(J`!(&amp;0%X#0-Y`C9(Q\2'@-4S);0:YQ2`[8SF(
M1S9D3VP\48C&gt;3)Z2D]_478):.%&amp;&lt;'-A.[$@.[&amp;+BP1-%\]7(3VC\&quot;;TZMH&amp;R
M01W;B?[F$]M3Z9?,T2^=U9=$[3(HA'U0OZ&lt;Q'QAEWSYV/C&gt;1/YQKP#8#YMG)
M8T-41)/630N[D3TH-&quot;+',#5$89LBJD.VH%&quot;/!$W:M*]!D?.*W`R9$FJ0E&lt;AK
M)2.V@W]'H#&gt;QO,QN+ZFU6^U\28-=L-LBL&lt;]#]E%J.K91JO)V2-5&gt;MR0@%_*P
MU2]+/`BL7I=D(T*OAWW\Y:FTQ$6)3P%L!T%2LM)N908F2;%;$0NJV(.KE!J!
MYNVB&lt;;7@1FYXMCRCU/N)/=?[C!#;\4Y_&gt;EP&gt;Z2&amp;Z0&lt;&amp;#/*KG9.&amp;X(6VGL&lt;=)
M!&lt;Y(UA1&amp;L%&gt;0U*/$SS'J`*-1[`*C,&lt;@TI*:#3`-CV$U\!&lt;Z`\']02P,$%```
M``@`,V/'&amp;C&lt;H/C1(#```\QL```L`$`!L:6(S9'8R;6,N;U58#`![C'XW(8@3
M+)P/9`#E6'U04U&lt;6?Q#Y\C.Z19\?U:?5+KB*J=NUZ;=!P(`1+)&quot;$+^'EY;WP
MPF&gt;2Z&gt;S6SG;+[.0&amp;BD(3!4UKW672=U.2;K?)5J&lt;RRHK3D0+MKMF=::?^56?:
M,-JQ;9SI'[7;KGON&quot;UA8(U1K_^IO.,Q]]YYS[CWG=^YY/&quot;@G!4@&quot;)`,4@#F`
M%$`J(`V0#L@`S`7,`\P'+``L!&quot;P&quot;*`&amp;+`4L`OP#&lt;`\@$+`4L`]&quot;`Y8`5@)6`
M58![`:L!:P`,8&quot;U@'&gt;`^P'K`!L#]@%\&quot;L@#9@(V`7P$V`38#&lt;@!;`&quot;K``X&quot;M
M@%\#'@3\!K`-\!!`#7@8\`C@4&lt;!C@,&lt;!3P&quot;&gt;!%!#L6]_SO+D(@7U&lt;Y8^RM/&lt;
MEPZB!*%!&amp;)`L$!6(&amp;F0[B!9D#T@%&quot;`LB@MA`G@%I`^D`&lt;8-X0?I`^D%&quot;(&quot;=!
MAD!&amp;0&quot;(@'X%&lt;!+D$$@/YVM,\WC+;&quot;5@=U4YM;QM**%12LB(E-2U][KSY&quot;Q8I
M%R^Y)W/ILN4K5JY:3:4K:29+I=ZNW5/!BK9GVCK&lt;WK[^T,FAD&lt;A'%R_%OIY&lt;
MUQ6^I$L^JGOBJ.[:R[H+1W6_.Z9K[=`]=T1W\DC@CRPU)WV^\AYZ%;,^:Y/J
M0?5CV_.TNCWE%34L+S;9GG[F]VVNSNZ#AU_^DR\Y=&gt;[&quot;)4M7K%YW_\:&lt;K=L&gt;
M&gt;2*WH*BXU%!5RUD:6AR_??8/SHX#[A[O*WVN&quot;E=E@$)Z9$!5IZGD\-ES^O`[
MJH51@WNNJRI\%L$3,HQ%/O5719)85S51&amp;40\J@^?00(2L;[`T!#_08U!K,].
M0PWW^MM1\^&quot;9=EH80&quot;VHU5\U7*G,&amp;*_!E:/70X,LL_BPZIN4FMAGKBI)3YP0
M=Y)!?740V;!P]8Q2H?OP!61GMAYFZE^0#.$SP?&quot;@I)&gt;7.^55&lt;R&gt;R@PTY@,AX
M#B,#YM71&gt;F(&lt;%9$=V]11-J08MJNC',S9+U.JE!1;+(F5&amp;H&gt;6AU*P0&lt;&lt;&lt;Z*=U
MGQ^,9:I2`]=14R0+HF]&quot;QL&quot;&lt;+JD]LO)BFSMUO.5B7^B3YR@G:NH?I!`R#JSI
M@$5_-0D$POAO*(?U49]6A+Z!;#@A0=KPV4MJ,C9&lt;/8MJD4.\^@ZJ0V'5A11'
M[#U7-2N*;*)(/NN0(^%)%IC:6\4[/$N\M,&quot;ZD\&gt;GQ*M,L47F89,Z:L9LE'-/
M&quot;?UR%S;0NB\/R8D7B=/)Q(LW#L2&lt;3IS2Y&amp;$[+&lt;A;6&quot;&gt;W,*NC)LQ%V:E;&quot;!ZR
MQ7COK;8@T23:@D2A&amp;&quot;=;R!M,\&gt;A[D7B\TC.\5ZF95DLY/Z268@?D6M(Y]K/#
M-;%3V`)G1A;,1UG$!R$H`0OT[9?&quot;&lt;&amp;W$/%RGK)M2$GVW51*)B,[Q3&quot;,:&quot;A5;
M:&lt;&amp;,K+A&gt;X(*H'O(CTEB,Y:I6^)M42Z6&amp;\&quot;FD/_U1^U/-&amp;XSY&gt;D\SUC.OMNM&gt;
M.R`UJ3@?-4BY\HW(&amp;-?R-TW1`Q4(ZC0$=:[)_&gt;_8AZ&lt;IEQ,T4).L:YC4-'B:
MI::_[^P(L,&gt;H=FP`WS&quot;M)],!#YEI12W#S&lt;,-*H6N&lt;G\`KKW4&amp;,OL&lt;#8N)[=_
MX,;MAT46F,N;QMRV:&lt;PE2,6V_=-NAFY+%Y!W$EMH029/8(.(AW0(-!;NB+Q6
M(*]Q&quot;GEE/YJ\QA&gt;GDW&gt;Y2^Z4P?`9FER[.R#2UCTKD;;NNTODTJX9B%S:=0=$
MMKFG$_EU]]TEL@Z(K)Y&quot;9,GM$7F+)N7KDIL4:3U6:*.$..BN]:1?B%BD9R$N
MVSTK&lt;=GNNTO&lt;Q]TS$/=Q-SM&gt;^WTUGG(#C=NGT7CQAW32@&gt;YX)P7[FMCIN]=(
M?QH*H_OC%,+[Z`XHO.*9E&lt;(KGKM+H&lt;\]`X4^-[R](AH@[O';?P4^=&quot;A.G/T@
MFY&quot;U!&quot;^S#W]T/WRS=WH__/Q@PAXHA[[L(`E]N%'Z_[B'Z!A9A7&lt;(1)]W4]EN
MG:W[/'QP&gt;O=Q'$K8&gt;2`!/&quot;2`O:LOA!,]TQ/PY2'VUAG(/#13!C(/0?--F(&amp;_
MS):!AWJG9^#IGEMEX*&gt;YAF\=BE_#*ST)KV&amp;&lt;_IX9Z&gt;\A#0RBWP[1/S8M^LL_
MI/H?[HE7?TOOK8K_IXG\;P?CD8_WWCKRS-X9:&gt;^%&gt;R_Z*[X_QY@J)A]$#2&gt;I
MB9]D+PJSS%&gt;'7&gt;SH]4B&amp;RQ&quot;@&amp;I#)G8I,G47($&amp;@CT:JC!@@7&quot;Y&lt;I)-`W=!?)
MFD3#SV/!O2(^)E:8#\HF6(#/**$_;L*!R7QB8@8U:Z&lt;[8V)01`OU$!06K102
MOU===$/57X]%][();7]]7!^FYHR+X+H@;'$4V&quot;TV'(Y\A&gt;VCR:$OBK&quot;M(8@=
M1;%Z&gt;$V\K[Y&amp;O&gt;\N#PY2_PBB,#I1&gt;!VV&gt;0N]+3G&quot;8?75M^#;],35M^'$MJ@&gt;
MZ;$]:L!Z]^IS#G?:I:CCG&quot;-TS:4/QN9-N`$G__3KV3'!X?Z/;M&lt;1'X5MD@,&amp;
MV&quot;YO&amp;;C.#JGF*U`M-D4V^%GH[6LD&lt;V0EYD9'0IE%147]3,&quot;+V6Q%&lt;'#?D0=.
M+6[QM+`^Q0GV.-_+&gt;WO9,&gt;57HI:DFH5/8B%J4GV&quot;K&quot;*J]8V0FN-0`W!O5B[`
MG#IJ@0=SM-[7@1J[5=[N5G&quot;*;'&amp;WR(%-118;_&amp;`./HG,119[_,??\*F(&amp;Z-6
M]S97$VYD#GAQ0Q&amp;J&quot;Y_:X&quot;#G&amp;!E*=RN8:UY&lt;IXZ*H7E&quot;0X&amp;CP`$SY[QCD0O#
MS;$/6+^(K&lt;1*G&amp;)%M!M&quot;&quot;P61F*&gt;A.MG!%,L/P/)?K*L)-&gt;/&amp;%&amp;ML7D&amp;CI:'`
M:A%U;B^S\25_TR7)#NGX=FXZO0]*MR5`[3O3G@7%VXJY[+1^%M4%AB&quot;&gt;%FL:
M:H$&gt;TTICUCH'D0]5T[A-M20RU\E)=G!$LFH;S0H]@.O8D5CFN%VU,**`&gt;&lt;D.
M7W^K8+6/8H?MJB7P3$?FP`(=4I#9-/)-+5MF0-TL#RD&quot;GDV!]5TYWB[&gt;R^[2
M:C2:XK6(=W%.,WQ19C\?)*GGLY_O'V3.T_N8\RA_@#JO_HXZC_(ZH2&gt;#@A?N
M*%FG8)TZ/]K6@#0##*@P\C@7&lt;W$UXH?H39KOF'18V&quot;EO$/32`C_=CXD6-$A+
MOL&lt;U2`/JZFO,Y'PNVHES25/*Q6;9+DB^J:&gt;&lt;4[:9.(&lt;ZJD5:\`O%?)Z8YD[L
M00L[P0T)$B;FH@)VG5&amp;;7\QHBBN9W26EY1I=5KX!GLNU^?!&lt;5LZ4Y.5E;]FA
M*6:*]&amp;7EA065\HI14UG&amp;E!0PNV&amp;^O(2I+\G;4JC3P5)A\2ZFL)PI*R_5%._,
MAPE-.5-&lt;4KI;HYOP7L:`KRW%)&gt;4)_8$CX@_&lt;KF,V;V;R&lt;_)S=NAW[RXLWEEF
M$9'164%;,U&quot;E%ZYU%&lt;M&lt;&gt;KF/\BDB:62@\*5V/W(4^EXE8L/&amp;X,C(&quot;(Q,86,_
M\^Q1S$EZ3R4V&gt;XPPC7D8&quot;AYC1\=0JON\[&quot;3UAIE7?3FU/Y&amp;AO#!I*NE'AC+&lt;
M8RP6E4HH&amp;=[/2B:7R&lt;GZ&gt;8D;I-Z%)(\B&amp;`SOHT:0F50&quot;BSBH9/,`]2X4P2CB
M!ZCA[V!-P#QYM_*P)OA%Y4(_AS@7C\U^`0DN,]L!QS(C8UA`%&gt;%Z5!6VHNIP
M(]H;;H:F4^3?)&gt;F8':_`^7&quot;GYU6\VU\LE&lt;2?`YV&gt;U_`&gt;_U-2:?SYC4[/ZUYX
M/5PXRNXHU&gt;S8!;F$%&amp;O*RC&lt;Q.TM+(+?E:U&amp;EJ\99UQ\S2!7QMDE;DTC?C'=-
MD]PU.&lt;D8?V3)(SFW&quot;7-62@HK%R&quot;.5*N13$0KI`JE0AT-I[+WFS;*OR23LQ7&gt;
M&lt;C4Q3JJ&gt;P7O5S-ZK9._54O5-WLD5:D6MG8(-=JF#76IGV&amp;7OS+OLE7&gt;IE6IO
MV@5Q9!NXSX*-];=B&amp;XM#R.0R./464;D&quot;_I)Z%8C&quot;0-1K0%0`B'H=B'H#U4KZ
MV`?`HX\*-VO#C=JP-9*..,0C2VS]&lt;0UZ,WY*-ORF^BK4R/&amp;\^(`_OC,^L(BQ
MS&lt;=SIZN1?ZIQQ_,GQCPH:R?&amp;%J*?=7Q'(OV&quot;*?J%D_J2J%H$!;(?ZOHLYCR#
MNF/'+F;$YODRX-6DQ9SNK\?ZJ*`RJ8,6]B*+5ZA%]3ZJC\*\/%6%&gt;*]0C01E
MTIBK1I[GY'DC9$JH0&amp;8R7RGIL07\UWNZ8DN*+):&quot;2HO9PA746`0+'XQ\X;&lt;,
M4F.1-0C*`]F10Q)T:_XL&lt;&lt;Y6R&gt;RT2;S3+@E.1^C)T:389Q*7@--60J)DINWR
M$UC$I^WRM#`Q[1BDWHLUWVP=)%I#;&gt;[D:+B_4[`CNU=PP!'B/N+5`9-P,QV2
M.8$!%)R7%)S$33&amp;`23&quot;P83O\,&gt;2`EFWAY5]:&lt;LW!F2COH,=EH.D9Q#8KY3F#
MRV$)LN^`AW&lt;@_[MT&lt;#U+BIFRDN*R1YG*$CVS&quot;_IJ?AZSNY+)A3NK*&lt;U;^S]0
M2P,$%`````@`UEW'&amp;GLS&gt;+4/`0```@(```P`$`!M&lt;')O:C$S(#5E,#!56`P`
M`ZQ7-P1_$RR&lt;#V0`M&lt;_7;H)@`$!A6UL59`]!1$11%`=.W'N/N(TSHM&amp;^_S/T
MMR/I16_]GN`&lt;BVGYX^7'ZQ&lt;K\`:\`S:;S6ZW.QP.&quot;()@V.ET(@B*8AB.$P1)
M4A1-,PS+NCB.Y]V&quot;X!%%KR3Y9-D?4)1@2%7#$4V+QN()74^FTIELSC#RA6*I
M7*G6ZHUFJ]WI]OJ#X6@\F&lt;[FB^5JO=GN]H?CZ6Q&gt;KK=[4%$&quot;?EGV29)7%#V&quot;
MX.9YCG.Q+,/0-$61)$'@.(:A*(*`*A@&amp;?:`2M(+B1_ACX#'RO?0[:/G?,_X_
M[K?KQ3R?CH?];KM9KY:+^6PZ&amp;8^&amp;@WZOVVFWFHUZK5HIEXJ%O&amp;'DLIET*JGK
MB7@LJFF1L*J&amp;GOW_&quot;5!+`P04````&quot;`#37&lt;&lt;:O6V06G,#``!3!0``&quot;0`0`'!T
M86)G96XQ,U58#``#K%&lt;W_7X3+)P/9`!U5$^(W%08_X86-_^F&gt;A`IU$H&lt;*R8T
ME+Q,,MG)&gt;EDS4_/&amp;C!LR&lt;\AKP9/'4@JETINX*#VTL.JA:R^+AQ9I)H/T:3VU
M6T0L@@@B&gt;)%&gt;Q%)ZDM)2#R*LWWO)+EU*+WGO?;^7W^_[?M^7M)3]B@;CE/M]
M$GC1..'CM`Q[BT`5'&gt;)!'2Y[E1?THCCG\:`4N\F`QWF]R_E$QN&quot;X8L`XXUT/
MWRZ)Z_EP2FG#-.&gt;!U^][T9IY*#[JNO&quot;%L@\RR@,2$B_*&lt;IY1R9/RK&quot;8&lt;\E32
M756&gt;AYA[03&quot;_8&gt;'3AN^5%^$CDW+7O&amp;QB(!IQ^2;\I;P&quot;!;]NT8K._=(]$M@1
MP^.H&amp;C5'V%(L*!*,%7-\P8Z*E!&lt;SW%5%`@=4#YC`6(VQE#.)L026U#=AW40_
MI)!3I%%S&quot;HCGL!2.JT&lt;%GFSC2=2&lt;))[`!RJ%$9;0F]&amp;HV)W2Y^H[STRI5,&gt;-
M;&quot;.9B%T&quot;WZD97.J\UUF*5N&amp;V&gt;DR:06HSX([Z/IH05S&lt;L*LJ_:=%Y;,,#]20R
M22+D&amp;&gt;+*0-=.`Q-)53&lt;MBPI-&amp;Z^*K.&quot;`=@;$-8S)JV]H9U'PB!0,M0^W,&lt;&lt;+
M?%C65L79(?&quot;V=@XBR+7SV*ZM&gt;&lt;^'L]J%G481+RR[GJR^ZU6WL$FUE@VKVF=(
M'G66X*)V$&lt;Z;Q3&gt;N^959\$(V]8KV)=)/&lt;YGZ*LRT*ZAQ7;LJ1H*X\+-6/ED^
M\L=S&quot;K]K7R/EJTCYC_8MH*5H+UHK;$9)P5M9Q:Q(;1M&gt;T#&gt;1'V&gt;O\3B32@E*
MO:3_@%*N_B.L871E-(RG=.5=&lt;WEJ'EKT&lt;7X'^D\[U06$H-D4CNF_8`7T&amp;@GZ
M6`-&amp;A*UP2O]-1KL!D5&amp;&lt;BAF%3_0[&lt;EQ9)2&gt;N-F--_Q,S?PTSW]#OB&gt;9G3&gt;&amp;7
M]0&gt;8S:;^&amp;&amp;+&quot;-RWAKQU-&quot;+]5;^&amp;N_N^NCZ+@-$(OKZ'OM9LRDRU];XOQHHH'
M&quot;#)I-.-,&amp;OVRH;88%?G@W.2X6FS&amp;J&quot;V^=QM\8U]KW&lt;1O'J&gt;!HDNQ&lt;(GEL&amp;+L
MEWR3I_E.&amp;`&gt;?S?&gt;QT4&amp;^R0[?I.'[U'!:ESJORT$KC?M[-LP@7&quot;2&gt;V9DNOY4.
M2;?C]''0;AL/]ZR3?M=Q(UQ\AS1_%1&gt;[&lt;M_X#[$0@SV!AH'CN&gt;'V/^&lt;P!N&amp;1
M\=S&gt;C9[7#T)HMW]=V)$8BR9O2]CM/Q9V272EA&amp;S\L'UW04HT`J3K2ZR'6-;^
M&gt;Z$A!_@?4$L#!!0````(`*](D2:&gt;R^'R2`(````#```+`!``8FEG=&amp;5T&lt;RYB
M+F]56`P``ZQ7-SJC&amp;#&gt;&lt;#V0`?5`]:!1!&amp;'T[L_^[E]RFB&amp;&lt;&quot;,H(H2@Y!FP@)
MYJ^PL%B10X@@I_'__S^:Q!A$(0@GVOD5B\=U&amp;T@J&amp;SG2NXTNI%'#%8(8L3@V
M38A8G#-&gt;;'V/QSQXS'O#(+\8I(ZH!&amp;EL5PKI(AI[-QU602.&gt;JSQGHG&lt;^;R]V
MITZ^TIV*(T&amp;,JBT0QC^K04T3/'PQ%&lt;1!M:O&amp;E)\.GHT_/5DUWLT$K\;G\YO]
MM7+\I!J(@Z'XFE^:&quot;L2A4`R$XG&quot;X-!T()Q3?6MGO9#@;3&lt;:SX&gt;18-I:&lt;R$:2
MXUE?,I;M3H:RP61_-I`,9MN2?=G;1*0?586\UJE6CT[D&quot;R_?%';UB]Y0&gt;6D*
M_\P.96*K+_XE]BA;Q6M&quot;F7&quot;:&lt;(8P03A+.$&lt;X3[A`N$BX1+A,N$*X2KA&amp;N$ZX
M0;A)N$6X3;A#N$NX1[A/F&quot;0\(#PD3!&amp;F&quot;3.$1X19PN/W:52N(&gt;Z*,!1A.,)(
MA-$?Z;KZONTQ*B*M[$SCC@B?(GR.\&quot;7&quot;JDS+:$-K;:&amp;TT.;646HVZI-*D_5&amp;
M4ZE&gt;:K:42LU270G-9A/U&gt;KVUT&quot;9*;2[/KJVNKLTNM]#FPA:@Z\7BRDKQ+U&gt;*
M7$XS&lt;,Z9QKG)P3AWN08^UV$&gt;^*`&gt;UBFQ+@'DOP.NN[&amp;AI))3/V6@PDY9P76C
M1Y=EMB7+8)G@.DP'LLJQ(1.N&gt;;[&amp;+&lt;W/:7(JYVI&lt;UUQ/DXG-+(]QAYD6XQIS
M3&lt;89\UPF$Y/[MGJ.[7#N&lt;R&lt;GBWG.YS+1=,&gt;4:[KIZISI;D[GGIYS=)D8ANT;
MW#-\S^&quot;^X5D&amp;9X9E&amp;SW_Q1]02P,$%`````@`,6/'&amp;F`F&amp;X!S!0``)`&lt;```D`
M$`!S=')O:61S+F]56`P`=HQ^-QZ($RR&lt;#V0`75-K;!15%#[SV,?L@TYGV'8K
M81F)T:QB;+0_-)$(HH:2JJM]L+LM.GVW*+[;\E!&lt;E$F:C4O@AXGGQ\9QI&lt;HL
MG=JJJ.NR$A(3.PC-&amp;/^@I0E!RJ,FFR$A6#5QO;.[1.(]&lt;^[]SCWGWN_&lt;._&lt;`
M+TV)&amp;J3Z!*E?D(*B=)V?Z@Q(#T6DAR/2(Q&amp;IME9:(4B-*Z&gt;Z`A(7T:_RTET1
M?42T_B9K1D3I8LG8:'49&lt;:O#&gt;,;J-+9:,:/5VF0\9JTW-EBR&lt;9_58]QCM1CW
M6D\9ZZV0(5E&gt;XUFK;6I4-./6`9N(BT@UD0.=@18WK^MB&lt;R*EBP0&amp;[WA06A6I
M@N!-$+)!L5&lt;@_5RY+U[E;5SN]26&gt;K%ZR83),F;/),&amp;V&gt;3(99\U@R[#:GR#3`
M!JAJA5F)[H]EP`;Q_9VJ8R9Z*#[._RF3G1K_(O-&quot;9=XS$\]JLVF(:TPZ$&lt;^X
M&quot;[_S[V\YQ2]/=0BG#DCUR&gt;#P6B6JU0^#$DOV1Y7X1(S`3A4*$%7D0B(J_5:+
M:^L+$+.M&amp;+$.10L0MXTX@LNVX[.GS)_&gt;D^HG6C=/M&amp;W6@DJKTD;X'X\,*6U#
M2NND5#^&gt;@TY%SB4ZE&gt;X&lt;=&quot;D]N427TDL&quot;^Y0!#91^95#[6&lt;EK`&gt;5X#ER-;NW'
MBB$%Q^&gt;D&gt;O.$;&quot;2V#]S2A4N\WRB9S@G94*=I397+4#[XA_:\K(^*8=YTI!H$
M&amp;8H-@MX@A!GK.B'I508)4;&lt;B:S\H/5JO,J!/BDH?`64J.XZU7!-]'D6^L[LE
M.`[%#J&amp;%B&lt;R1WAFI`9T]%W99D]G@CC[A3*\PG2$/3@NK=&gt;&lt;IRZ?19&amp;0/LMJ\
M&amp;I&quot;V&quot;O:E2V&lt;%%&lt;B])`_%&quot;9S]/R*[\0RWO&quot;[LXBB5(YY+PN:J9H&gt;.#$F!2`MY
MS)&gt;$#+7E()WYYVX98']L[J+`^\E*CD\M&quot;EHH=5&amp;87!1R\+T2S&lt;'))Z+;R7=F
M43#IYBSQ'X[)Y9=!'J&gt;=3])Z4G7/Q!LME9N)DPI0J9DX[V@N!8&lt;IPSD=4IE;
MS1KRE/XS#QY7W7J?&lt;&quot;UNEY@O(FT36E:+)&quot;&amp;[%4=$'&lt;XUE\)K4J.B/B9:C'14
MU'=6QUW5&lt;7=E;-FS)$-BI[8GM9+1Q%2`B6JC&quot;J77FIR4JC4U=RIHZK`07N;H
M%&quot;QHB522)B7:(:1(R:X:Y[UZG4E.7F=J3Z_3/DQ-BM+J@`:J6X*(MD:MSY3(
MS=L_(),@@-2C%E'K,OMLW!6HE$=N6\&quot;NCV5&quot;TLP0BHR\99K.J*1JC8362W[=
M`Y'SJC6HP@&lt;(,D(W0@]&quot;+T(?0C_&quot;`,(@PA#&quot;,,)VA!&lt;07D38@?`2PLL(KR&quot;\
MBO`:PNL(;R&quot;,((PBC&quot;'L1-B%L!MA#\*;&quot;&amp;\A[$5X&gt;]9,RV4:%&gt;$CA`S&quot;QPB'
M$280/D'X%.$(@H:013B*,(F@(TPA?(8PC3&quot;#\#G&quot;%PA?(AQ#^`KA:X1O$'((
MWR+D$8XC%!&quot;^0SAATV1`$]*P(0T;T_!H&amp;C:E(9&amp;&amp;?6EX)PWO7C$7[9MM(-&lt;L
MF:G;36U%&amp;LZFX9&lt;T_)J&amp;^2OFM&gt;I?!JI4;&gt;W9BE2']N)&quot;?LS6L?Q&quot;T=9\&gt;[%D
M:WNQ/6\K%(M%R.?SI6Q%H+TBA;V7Y^&lt;O[RV4H&quot;+9:FNOMILVL&amp;Q3T^G3364Y
MW&lt;205&amp;A@&amp;(:F&amp;,;)`,TP'H8&quot;AH2%0A&lt;NA,IR(42F[#&quot;Z'.8JAT$US..Y&lt;&lt;-3
MEAL&gt;,FN'L&gt;4P;SG,9X&lt;E5CCOG[./74/:-=(`^$L`Y:5$;&lt;]S2\1A.VO(%@SK
MN(TEJ;E=)#5P.&lt;F6X.1L1LX-Q,-07A_%N&quot;B?GR)4?@_%L)3'2Q&amp;/FW9Y:8:C
MG2Z:H6B/DV1,&gt;STT\3@9G]L^G)NSD^+\]@G\/H9X*)9S$C;6Z2&amp;)LQX_RWA9
M/\&lt;2C\/A]CD8K\/G=3`^A]?E8&amp;B'R^T@Z?X+4$L#!!0````(`+&amp;&quot;XR:Y(52Y
MP&quot;(``,,B```'`!``&lt;W1R;VED&lt;U58#`#MC'XW[8Q^-YP/9`!%=W=0TUVP]B^A
M]P&quot;&amp;&amp;B`TZ2V`%)'0!:1W$.D0!%\44&quot;E&quot;&quot;)'&gt;0;I&quot;Z`*&amp;)HK2J_2FTGM'0*0J
MH5_NG6_FF]ESGMUGG]ESSA]G9A=$3D6^!^0B).](`0#@+RHYN@$J,&amp;W&gt;)\^Y
M!O6/GA34-*N0Y_P#;MP\GO[F#J$&lt;RI&amp;8T7_#4N3#XN11H[MZ4!&quot;&amp;*!Z`;)R-
M@C?.'8H(!6&quot;X!#B&lt;D%E`&gt;H/P4R`/R/P_ZAMA]#&gt;&lt;'APNICNJ`N&lt;'ZR9I_]\^
MW/M_9!\FB:H`!+]]X][$I3&gt;KO!D!7H(GD&lt;84$-W0)6*_;FKUCYY%C9[LXV_2
M?=?[?%M``?&quot;_AXG#&gt;&lt;&amp;N9R5BX6+%Y^OBX&gt;*_:L1NQ+TW5][_6287#KIY4_'9
M_R;#Q:WT`(AV16SE'S!XE.@/$5@X_,3=X5&lt;,Z&lt;DH$1P`)S'\6B(?/=RG*B#[
M]?\HX?[1ORP.`!$Q&quot;8B2$TP'H;\%O4=*1DY!14U#R\#(S,(&amp;XV5EAU&lt;RE@'Q
M+@QPUY'OH0B:0')+L9@D6&quot;F$$[5UA=X=Q-Q5I&quot;81R9#&amp;\ZM],&gt;&lt;A)CXXWA98
M/M%R&quot;4KR&quot;5G+(XB[5/B+N)02Q-8^$$37R@C&lt;:P7^G&amp;MY_I(N&amp;00IES3&quot;;9=T
M@H!++H'.)&lt;F?9*W,7_A!_92A#&gt;M;CK$6&quot;PA9Z7U4@X-*^'_NV7K$7L$'VY+:
MSU3NY&amp;_]D=K]&lt;V^RY6UJ-U_/A&amp;_DI(_\YU_+?Q^.P;N93&gt;UJ-.&amp;*K!3_2/*Q
M.(=LIK)_]/FV/;K?')X&lt;7AQ&amp;A%N%61&lt;`._,&gt;]%X8IF].FAYP=7M1V$,6SYV$
M4`EQS`=H&gt;7F.BP%&amp;S&quot;QTN$W,F-AN&amp;Z]F4F:MQL7PQX)APLP;:#+JU&amp;%Z.!;[
M&quot;:.&amp;_X;`N_TG/,)9GP(*!.4^8:ZF(F9;I&lt;_B81[ASVU*]S],MAJ1K6R:*%$!
MG&gt;W;C&amp;E91,35(B;2]'G2C'F*G*`&amp;4-,H8G/2.,+(N.+@1E0]\'!P)Y/ZW''$
MM==&quot;]-](G;+L-+=UN8]^.C3WO&gt;ZS+R]XJK]$=]$ZT)NFKV^H2-&amp;_R\QFWH;W
M83S&lt;%)2[?E[!V=]&lt;Y]'HYLHP`&gt;8RE'#)OPY))V7V@)RC4&amp;J4.[@[+EH(0U2O
MO&amp;-Z7$37^3WZ,WW8-,-O^%_3!`B4&gt;VWHH960/&quot;;QE9!-'4@)M*[;&quot;V5?&amp;Q1*
MIF/QZ-#!&gt;+&quot;.!1,)DF%T/C$^*^+J^%CJ:(['6N.=3)X5N&quot;:6&quot;&gt;4Q+8'VJ&lt;O`
MSDL,*@SOO3!FH;HK^LDN[&amp;`S@#J'7H?04ZD^__M;$H;%L-W)(@PS2EPS-,B'
M3S3L+XF)P(+,B8=-E8X*0+I)X(+)`U/27LT&lt;`1\*^`.6=A[ZIC+R&gt;VRYLM$'
M/J!HRK*H\W8M*X_&quot;DSMWCX$4U_$&gt;$IX!LJ=RGEP&amp;]#;[^GGD-3:2XV$Z]\&gt;E
M+H4!EE,(B&lt;XURV-0'VD&amp;YB_`-;3&quot;-&gt;!YX-]KYR;K1;'SS?-K#G7_W^]\[=_O
MT*Q7;AHKCM)XN=5K7WC6O;H;O=-&amp;C:U2YKRGS!FLS-G4PLCY=SQ+D@XJX5V`
M&gt;&lt;'C79#G&quot;14?S9,M4#2B@,&lt;;-B1%?8\GKIT7(E&quot;`XPVS,\FG\FX[OK#I,&amp;[J
M&lt;)]3P3QRK_LD3SK2D'K8GT68:4&gt;`OMLN=9L`))3)9Z!`L9!#]9?([RK&gt;&gt;X/R
M9DM+GV_1V&lt;5B6[P[?1I$YIYYKD9_2E(6&lt;,]DP`.EI0IA%&lt;1M9C4I/%%#ZMC7
M[;D8*T9&amp;.#7K62&lt;.;WW6@\-GG0W@\--G([@*UK.?N`KKLTE&lt;1=;9+*YB^FP1
M5\EZMHJKM#[;Q%5FG&gt;W@*J?/]G!5K&amp;='N&quot;KKLQ-&lt;5=;9.:YJ^NP:'^]N4.VO
M-XK:I45_1^URHG^@=L71/U&amp;[RN@QU*X!&gt;ARU:X&gt;&gt;0.UZH2=1NVCT%&amp;HW`3V-
MVLU%SZ!V*]&amp;SJ-T6]!QJ=Q@]C]I=0&quot;^@=O^@%U&amp;[UZ8RUE[\BD`HKE3A+!Q7
M&amp;G`.PE4KG)/@J@/=1]&gt;?E+&quot;Z9,%'X[E'RV@-FL,NIPWGBRYG#22@$#I5(#$D
MI'R&lt;-80MJ/S$:[XQC;#GUSAGN3[E%Y)&amp;X&quot;K_XHHF)_J*;*]&amp;7F_'M88!Y:Z7
M@9&lt;C7[X,7[ZZ$J22V-K;+MM;?_@4H&quot;C++W%S+(X\1H&gt;.;A.#%`&quot;,&amp;^;[&amp;HD,
M)1$HX&gt;R.VR(SY.]-[ONL12\THO=&gt;1&quot;])R&gt;#,OW^4U5&gt;)T\41O?P1O8\B&gt;ET?
M(C&quot;TI(CA'(.#G/-NATB9_AJ/BQR)%\8CEBS!S#5!E++,OF#0+U&gt;`C+3@$\!R
MNW0I&quot;4.I4#@GBA`(;5,G4G%/HZ%,S%.!Y%6S*6&quot;!T(Y58CYR%D[E@B5!MK`E
M&gt;'6&gt;L$)&gt;G&quot;1/@20F.[M#W4.9)C%0`:,*5BU-(2:ES.&gt;D)G+^)0J1X6-(&gt;%P-
M8:'B5,E//F?%Y#L&lt;'!-3TD*HY'&amp;7B[734L:JTDY(XU136N?C0Z1UX?$5TH66
MZTO[&gt;117O&gt;IY*5&lt;#]WDE5V6_3H+CV2%7;&gt;BY$5&gt;=ZIGPN,R@X.5`XH+[)&lt;(\
MEY@:`V*@,3&amp;*,S4JLPNO+FB/^-@?\:F@*Z*.[FT,CC`VN@4A]K`)\_`)$_LM
M3BWZ2(]8[$(&lt;)OH?PYSL\1TRC3NW[L&quot;#N]7O&amp;Y.#V1+8&lt;MDJ8\!LZ6PE;'71
M3FQ)B?T&gt;_)D&gt;6*1P:7K^!_*+R@)&lt;GK/$7``$RA&quot;$&gt;,&gt;3C][3`-&gt;IA&quot;EG&lt;IL[
M0I?3L!O&quot;4(&lt;'S-&amp;S2RPE*12`LLOQ+\B!O&quot;61ET1'A0%&amp;Q`1_9Z5+&gt;.[/L\?U
M['?I:^0*W_S!!#,_/-%$;YN'JG#D'H-MT53&gt;!'K=&quot;IQ9^0$LN/S@A&quot;/B\_3Y
MJXP@8TDW/^:T^H`/(-L=D6?3=CT1&amp;'&amp;CR/8&gt;32@&gt;ZA-O7.`@8@D3NCXVF_ZK
M!67FI8;,J8#X(KYJ9_YA,=7VD:K!+K;-\6L&quot;L;29(#8N.&gt;'V?8_)3D`5M)+(
MG@(H]@H.ON6_U2:?T!+:I(QU8I&amp;2K)66/C8%GJ&gt;`EE&gt;IG*D\5O&lt;:.J8[9C_?
M:^DZ&quot;J&lt;TGOK@45`D@0MR&quot;-!-MK=F+9R,&lt;H4P9R3:.7Y229K^^.'+A`&quot;;%+5L
M++L]&gt;Q`YH+%&gt;4U+#A!'EZ&gt;NNMW&quot;T&lt;`&lt;H7US!B&gt;@EJ:OU/IK_&quot;QXWP9L(Q\E7
M.)GS?!8&gt;L6?KC=G96;+;ZK+?\&quot;Z?N$]/00]3DY'T(F8O,2MT2RV\/99?:&lt;5K
M.L9[ZQ9OJAD+;\FM*%JS5R&lt;SI5A!DEH#&lt;V'&gt;%*&lt;H\8D$\\1[?WT?Q.%5!@NG
MV&gt;W(]].H&amp;/I++')&quot;+6/R*).MOHE`XV36R*SZPA.4X=*K/YM1-S;;[/FSV=.V
MOX-)/I0E,R^3%0+JC[)Z;PIB!ZH&gt;Y9Q1TK_NY1-3PX?N!^/=7I/3OL1&gt;8G^1
MN)4F;_T0I-`6NE_:^5OW?N'O!YD\/;F[=KA/@;`I7_SX\$&lt;':TO%(=N#7ZKB
MY%1))+X@0&lt;W`.(+-J/&quot;W7B,?_!2H@N&gt;K'.AW+QI$[.#5_;&quot;LF@*4V)@J5`[?
M,,GQ&gt;64G(!GIDPEK'KPWM=YB8`%%IGT8A.[1Q67GT18`&quot;&lt;/^KC%)2IIKG:JC
M]U5&quot;5D5_!9J*/G]&amp;3J?^KO4U7;AY'D0R6&amp;N_;-R%_JBKA-5H0&quot;,S=*&gt;WY'X(
M=NXIJSU]4_Y?2;$(VQ^/2QXF@2=5NJ1-O9ZK?28$UKW8GEW&gt;GN_!/\;B30WD
M6&lt;HG4,6(LG8@2-/+&lt;:?-X(NBI_3'1N$X(G+JM!&lt;&lt;'`U&lt;T%!H6&quot;%-S3I\&amp;JJ#
M112E&quot;6O8LU_EWJ=Q0*?LAA;\%FYC(YL9&gt;N9O1-ZRJ8KD&gt;_2/T\UC[\9N&gt;V6_
ME3;-%4:IXD.I4339I5LDPL]NE\U[6'*_\#`NZ@'(,(&amp;,'RL%/DAW)P?8&lt;*8&quot;
MXL1C,;/%-BR/P1NW+[,^2%.K[4Q'=AU*=#Y9:*,EW_:M&lt;$Q[BJ6MQD:G*[4^
M=$O-]SK-FFXZ;:K,,H&amp;P;X`#$`(JP.?IS'HQ:!6```DF2A]@,51M64];PS='
MZM@7KB&quot;H&gt;[6[&quot;:R6QDSO!M-\$&gt;.#0Y;22F3J$ZC#*DQ809T*XS'%NNZ'CZ.X
M);$D[DG.']:``U2I^M;PF^:^IIMF1KLX:(,712O*QS([.JN_4?M&quot;21%@OB!*
M=#V2&quot;+#S%_\VTQ@^O)-+,D*Y&amp;?V?N/_$H=CZP\$OT'JQH:&gt;*&quot;^$-8F/63W47
M\M.:G3U?D5E,G2U&quot;(,EBNWS\MV\+&quot;`H)&quot;8N(BHF+2TA*(:1E9&amp;7OR,DK*-Y5
MNJ&gt;,-`-3,K#Q&quot;&quot;,4U71-;#Q\`K$Q*=D%'QLZ^G_,;!^&gt;$S&amp;R\MDE0[Z57LQR
MQ&quot;1_+62-GLIBBI9/C/H:&amp;24?$OG5+U+^:7[Y?T;M:N.4J0(&amp;*R^'!WAF'4]/
M[+,!A%2-I$25&gt;$6%*%[D@[!0F6&quot;IP/O;Q&lt;5\1;R%/`7&lt;^?`\+AQG+D&lt;.[!W[
M6[;L;-8LEDSF#&amp;:F=&amp;C:K=14QC&gt;,#(LXP/#ZNFM7,6=HA9#?]K.%8I%Z+\;/
MM$5AD6\OW6_H;K=?ZI[&quot;HM)&gt;@5_1GO5B^/M@Z9:RQ&gt;=[E7Z+=W_G$%[Z^;;2
M#5^HWCV@WNLR;9E&gt;C!9`\^&lt;0LOU6`A9C!-!&quot;.81ROY7ZQ5@!M%@.H&lt;%OY70Q
M3@`ME4/H]UM56(P70,OF$&amp;;\5@,6$P30&quot;CF$;;_5^L5$8?(&lt;PIG?ZCXU'=W`
M]9=E@C\+R?7LH2W`(/8)!$.3&gt;Q.D&gt;I;)N,)A:!9O@G?/&quot;AE7-`PMZ$VHZ5DE
MXXJ'H&gt;6]&quot;0&lt;]:V1&lt;R3&quot;TMO&gt;I5,\Z&amp;5&lt;:#&amp;WE?&gt;K=LY$G&gt;-%;&gt;*26.!2#E!&gt;\
M^%5XU)$X$G6QX=6\N4'&lt;1L&amp;+$0(3@0Z1[.&lt;B2T8.SS!YU6VC!R!Z;JV@C/ST
MH(SE)2`4A`6_)@H'^`1%)67DE50TM/6(-,.[2;4B&gt;LCN1[9_`3OI]3M@2GX2
M!W&amp;U2NN\Y3[&gt;4\Q&lt;A&amp;2&gt;BV=Y2Y@2MXD&quot;*IAVD&amp;IH!U@-VTFD_KJ+6&quot;/L&amp;\G_
M+]!+[EZZ)?2X;!L.=\A;YG;,7^%Q*ECE=2Y&lt;XW,I6N=W+=ZX[5:R*8!Z_TL[
MJH]&quot;)[J?W#7*-3=8G]_*+MB2J@T0X8&quot;OE%GT4+?=35/[`::,L*$3-%%ZG2&amp;B
MGI+EJ6(E&quot;AD(]EKH^*A6.[78\;'CDTEYH8AL`+KC\S@J65M)Q&amp;A71DGDO]T+
M^4ZQ09'G(FCG'587%0&amp;-@=0/&quot;LA_S'BP`WVZY!F)T6:DD;&amp;)&lt;-I+\WB&gt;Z@0E
M]?6.M(SN&quot;QO@&lt;?9$=+@W')$.1T4/QRV4#UU,[B_'[*\XQPR+2RN&amp;N,.3T[L5
M+=3C&amp;6K3(OM'86.5H(UV!T$E%,NI4V%-3Q'0\43&gt;7TVTGNTO1MJ!2A&gt;?J&lt;IJ
M))E5,BT!,@4\&lt;`3SEYXJA9C;O&gt;:!2=HSVL&amp;&quot;-/LJVD2^0HU8;&amp;&gt;\?1XDZ[OQ
MJW&lt;!?3Y(^AX.Q*+6!6SGK*T&gt;&amp;T6D$&lt;O$I9%K%/9VBTG^'EA&gt;Y/O#'E)H(+2O
ML(&lt;6BF;JTF+G(?'9'XAXZ.#N[J#D[%7ZFLA-;23?2,+N683L'W)J1+6N&quot;E7V
M&amp;@022@/4,U1'ON(0`5[TPC#-4OG_@)Q#-[Z[JN9N:W=5VQ9XJ#H'1#1(XE88
MNADK;O_$.XYVZG;!(F5V1*--FWZ\SU$T3C+(-1Y-.LW.&gt;88+$&quot;DMG*G\G=IM
M\0M+]V.&amp;.81VQKU#\MLG/9]8AVZ:5PT63HS&lt;UEAJAM&lt;VI=@ZHZE;WXZ?5B+^
MO&gt;9$$+&quot;7_?\&amp;7I]F?#EH]]GB*F)&gt;MRQ^S.+J'/ZX&amp;.7J5#Z&lt;8$`:&amp;F,1[\_-
M0F-ZAX7*1-9JOJ-\P=.)0_-3VB.HA69=FADV@0.1BW@C/U7S\U9^LOF!^H&quot;G
MC+)^@IR_2--2E4I%&quot;IL=6]MG&amp;G*M_9MY3(3=4X2T^J$];Y=9M4$4F#/-2HAR
MRURDI$2C&lt;H-@\=MMSBW?WTEQ\)&amp;A)*/V9!7(*DJK)G&gt;)&lt;G,9(RX_I4&quot;?K)S,
M,KM%WWKK[YW8,^&lt;LR1:Y9-J5M+?&quot;%QIW+&quot;CQ:VL'KBS%KE=%ZD_7U#U/-621
M^_0TE&lt;@=R-^?[*LVT[5HJ3F-:UWVK_=#P.P;&gt;X0I+S'VL_P6[QNJ33O8L:6%
MM[6[\\65^HO65#G#JR=R%],/&quot;^(/TEHVH.^SZW_?WRC-.L\AC9MGN?P.*U$G
MT'/)A71W!=/U&lt;)8FP)[`!GK8UOW@VCZ8YY%*9)WCGP&gt;]&lt;Q[28]B9(ULM-O&gt;6
M]T2M,P,'&gt;(+E7TWS!)$'LK]?==R]%;H=F=^MG^\.3^&amp;-/3E30NJO773YL=ZF
MZV-H91H\QE\1V4$/JQ[YO^Q3UD?+@V/[9*CB2AKN?^4%G-LK;WL=8/B=T)0I
MKN='Q+[\?P&lt;94W%K@W(&quot;YP(&quot;YV2$H9.9_F#45&gt;/:%%+O&quot;OKFTO=&lt;OKX4V8?\
M@`RZDDL[&amp;]G4,1Q!MO8O;PP;#G.^F!8ZE3S:`/K1O41&quot;&lt;[A]XM`V^LU1DDK&lt;
M\BAOEJ$,18/ET2CR,,]32`+^GZ_N59(DONIW***I35T3T=-U4%I(1T7F&amp;\.1
M(9J3X3B-&gt;?U#;720%7D&amp;[HNP*`,\PAV32$=ZBTIMCS&quot;_'L#'O]*W/WJ.45M*
M;&quot;_E6JZ8^&quot;M]VT&gt;;)B#P15K6N!UK_?CPI.AG3FN\K5O$B^R&gt;[@$],XSA^P8+
M@=I]R_!=!8WO!QZ1%VR?!D_[X!);Q;EH&amp;]A+K'M67HR9)Q.*#\6$HGS(0:=K
M&quot;4L&amp;6?GQFWR5)8E-L7RM(%&gt;;R9N8=)%D5D[W9*80&amp;='+XS;,M)#&lt;.[+&lt;:OZ`
M\/0'XSL%&lt;_5129!PFH6*^E2E&quot;9CLU[H/W5NZ3%&gt;;*A!)MFVR7XY&gt;&gt;7MJ/PSY
M.-KG6`V@SJOGG4/H\7J$3$F2++&amp;043;K=E:`;=QHW9/0R8DV1,^_NN)C06;X
MZU)X66:Q@Q#10$:6+WL-TQ;3!B7\K@65EHZ%3K1M.&gt;1[H9JJRP=B$57%#,FH
MSCCB;/&quot;/6'B=5`RT-(D^3@U,0R5YY,8[E)B6&amp;\,#K9378J0?6C/O^,IJUE%/
MS&amp;,J'&lt;J57VDPCW?\L^)ZKC?&gt;&quot;]4/JD&quot;`_T4\&amp;&lt;&amp;2#PYZZ(;;US3R^VRMZK&quot;`
M&amp;``7+J&amp;)_/T&quot;]VK(0Q$3Z:00^OE8J;3\VKC9Y?)V/19]?E&lt;96);F8UDK2H6T
M`CS$_U=U:[W49_?N[P[1%$YU:\]$#)K`W[.G/^849^4CU!PPY6Y9M8]N)2CE
M*EY0DK,$K&amp;MZE0$!K9&amp;&quot;Z^I/N]22`N-$[&lt;O&amp;2$AIAJ1TY_6&amp;Y&gt;*TWFKSY7O.
M/XK,:FM[H&quot;)L%&amp;&lt;&lt;HMGL:AJAHX&amp;G=J)YS=MFF=75=E&gt;%-B%J];T#=[]\L0K0
M'L_A9.9/[0XV'I:2`)0;0L^7\/O=%.N]0T:*60S]*=H_MJ(F=&quot;*(/X7!K@VX
MPUTBG,*&lt;-P-7,LXJ&gt;RWT&quot;*7-\!^!`N_7A).]5*2'D::'4*MDVY\H]B-8QZ8M
M`'N&amp;VOCHP)9OY*4M/P_?/U8;I!/+K52&lt;^M&gt;N_J]*)V8?-Q`WY7)6R&gt;);3PKE
M;2&amp;C/E5=U5BUY^.&lt;)S&lt;J/2Y]-&amp;!G]*QF@C8HF(K#[942JD#+]L&quot;X'X6_JC%J
M%I#^SA6;&amp;T'8HPS7&lt;N&quot;QU-8T@*L:6,/U#4W,5/4$-2U6VTT5&quot;?NF9G!##0TA
M&quot;?5A!N)BVT,=+&gt;O]#4M5:]-AER&lt;+J_G&amp;2J&amp;X.P,_3!GEUW4,'L!U!ILF3(9=
MGMO='?4=NBOLZRC](Q;A_TEB&gt;-RPMWIE\0.ML'84U0-M^@&gt;UIS3FLG+&quot;R6/3
MV=SFRTRD;&amp;J.%FX*V+02,,US?2/`&amp;+2CPE7U3!'NOEK6XL+M!L5^L_M@S7K=
M4TO[R@QR3W\IAP&lt;?,R0&quot;BVGED,&amp;_&quot;_RXB=?02@(52&lt;^)M^=\M*9L4&quot;WG8N?H
MS)F%*AY*@ET0J:JZHW(\MA.Z;I1:+&amp;XL6I1NNEHBWP'G%/VUCN2].&quot;Y6&quot;-ZU
M91&quot;THONDQP&lt;6UNK8V\M)6&quot;SR080'^)L@Z'L'])BPPR5.0U%N&gt;LDEKL-6;G?(
M$]BL]A$]2NFBUOMJWTJ@7M\JH2^_?&lt;F*U2UY4*0'5W^WC$T7UDI(NY.EF(P&lt;
MZ'BO)+1E)I3Z^%93DXAO1Z7SV^6)P5DP6PHEFSW_&gt;[YMRNQ\1[!B2@@_3SZU
M\&quot;!BC&gt;=2JPE:QJ2,BTT^PI=PL?4[%5D&gt;'CCL]!1%P/@?`T4U$)IA@W%^=./?
M_IJ,`B!@TXFZ3:_#?/E$NY-\&lt;2A&gt;W+-3(OW:)-KS7VEZDV#ZX&lt;F^8&amp;/L'.YI
MC.NSE&lt;&lt;AT&lt;5[8]F/+LN*%RF*?S=?4.&quot;7ME&amp;9DGWIE&amp;YGMN?%U4/:KNZ:%FZA
MH$J?NL(UR^(UR_=KEF5KEA_6+&quot;O&quot;!UP?^7M:)JU$@;]]YOE6A;1YD4&gt;?/G\E
M*6!'G!XE^?GJ@=6Z?7Q08WI4KMWO]*@KNU.=*O&quot;LAL0'5(MNTX3F\;'+JC[O
MS^]O*\&quot;Q&amp;LCN4:U3&amp;8;@3T)LU$2G-PVQK@PV[%&quot;N7&quot;\G9XEBGZJ`PFW:]*^M
M3MK/3P!4#9!B+6],K:7^,(HG&gt;.=,]RW/?$Z?GOE&quot;.9`;2!EA*_G+2?*7)=^$
MJU6XLTB^BV&quot;9=50&gt;*CE^'Y)B*HU`#$BS2S,@5B75$.;N?J;2=C%$(BIHJZ8F
MR4K)2K.XLM='QW%&amp;\&lt;=QSQ)NQ24E*&quot;R2KSN$E&quot;9QT99N-QG5M%3_D26%/5$J
M'?ZXY5V]Y?IIRR=ZKI5TMJ,CP[+G8,&amp;&lt;7J^&gt;&gt;#7:R_K]5L#&amp;@??DH#3*F6L%
M==@S^+)G%=F'Z[%GO3B,],UXFR'S]C6:*RC=CND_#D,?/Z&amp;#&quot;MY7NDL_0+PA
MNF4]$GR,&amp;9R!G6N8!WH;+*8_HVX='&gt;C]#G6]9Q8JD5VJJ0'7MX:K;3!&quot;S)+)
MT&lt;@D4D-5#4V3Q&gt;OKT&quot;DP0$K.P');4LW(S3^EM'N9R)CRKE[.&quot;#PE&quot;9:F4\&gt;3
M084A#B-6=XG&amp;_SR%&quot;^O8OO&gt;Y1]Z?3^38)6P6.2N.9&lt;#K;*1R,U$!Q*40_V)R
M_90I;EY-W+9&amp;%6L8;33]/9_[L$-MSN&lt;#(HQV9L(`$S6/#?%+&gt;H,UK,&quot;0+SSB
MDQ-$6=0F7*=9*$V5ND^C$.RH2P(0@8T$53)_1.M!QE+[#P3,\'80L(RK3.^C
MHV@AD@[&lt;$YW'DIF`IUIX'^3A([D4ZDCN&amp;;Z&amp;9'&lt;52$^&quot;.&gt;]A;P[Q7&lt;3C?*@&amp;
M5@74_EI&lt;4,LEI9V&amp;[&lt;FBB:8\'DZ1=W_GC&gt;)&amp;BJIEO'!OA`8/P`E3M$KY5_8N
M*2S`R\7&amp;6%M%7DJ8CY/U%H2:@I08#)H#0L%$Q$&gt;_XZD3&amp;:`L1[ON@A4(.:4.
M;0.S60_&amp;!Y%M@$I8'[UU\:'NK0R%.9P:/R5@Y1U3U#)]S!3J]$&quot;&amp;GRG/'R&quot;'
M6!5%Z[^9@KOG9VSK5=$_@&lt;MHSWLFR:^GJ!T]XNE-,%,&lt;!20=4T8%JF,L^:24
M-6S[9`O@862QG/D,$GK;Y*H(`1:5*&quot;.^\_M&amp;\FK$6M&amp;#$&amp;S1\'XT&amp;QX-X9'1
MD.E[=!C-_54\XS\G&quot;LDI0-!HJT\[95X@!18I-1=I&lt;H\2R#S0+;JR_L2`?8O0
MR9=/Q8ZDX+&quot;:%(-%V&gt;TDBD]P)B2&quot;/8[@/#4)V^A)'KZDB\&lt;3&amp;A^AU$4`3-ZL
MAJ;81$$(N)^[H5\,&quot;Z,(8AEG,*3N)]&lt;B[@2K`FTAUVW$1$='JZL_?W9VUM86
M%KYY\_JUKZ^SL^VUC(STS5&gt;1&amp;CDB`E]=)3&lt;B!Z@HCRY*2]\C^RDI^L[/M/2N
M^?CVMEBD+\(B6XML1RZ'$C:O-FM]%^MWYD^\`K_&lt;XYF^;IST+=DK]!MI'/%+
MW^-8O+.7X7_H13B)?ZHLMMK91)#+/9^0:VP&gt;.EANJ5]&lt;&quot;+8(N;5P&lt;A,[]_GU
MW6]G[_TMLDF`&lt;2T28#0++2%$X0&lt;7M`*XMM6`&quot;]K[B6WK-^&quot;UL(@,_7Y`X##D
M&quot;IV\@2JNT/F])7\E--F;UM#-`P)GRQ598VOHX=Y2&lt;&quot;.!J_**[!0$(B&amp;AH*&quot;A
MH:&gt;'0EE9.3BXN?GYA83$I*1D9144[MU3U=34T='7-S8VM[9^],C1U?7QX_^\
MO5^\&quot;`@.#@T-CXZ.3TY.2\O*R&lt;DO+BXKJZBI^5Q?W]S&gt;_JVO;^C[]_'IZ?GE
M]?6MW=V#OW]/+Z_`I)24M`P,3&amp;R&lt;G#RWA87%$7?N*&quot;JKJ6GI&amp;AB86-C8V#FY
MN7EX^;Q\&amp;8C&amp;8B-B$E)2TK-S&quot;TI*RBL_UM4UM'1T]_&lt;/_YB865A8V=C^&lt;_CO
MW]FU$8N\E7]FYM&gt;I4U8%ZX&quot;`K/KI,S9%F\#L[(:9&lt;_:[#U^];9R]@&quot;DIV0:]
M:YJ[Y+CW*#BG&gt;?Z*4]D.G=NR&lt;,V%M`_!M2X&gt;B5R^7D=?_M)'7RZ]0%].Y:`O
M1[^A+WM_[5^&amp;&amp;#S7?F`_QFGYEZSNVB@X(,0(G?7T+UE_78A18+U.C&lt;ZG[CZ=
MAM&amp;?.FVS.EVK.KT[UH-_=48O=28%%8=G#+8-S@PI#=D,A0T51W0-;48\1@)'
M8J4W:K?'SC\CQ0QG?&lt;]VD'O/B*Z0UX77_Y#7O%=^&gt;ZVEUZ&gt;)UU'7.&gt;&gt;+,\A+
MY^L?R$WTT6'B-&lt;OU?N+I8N-YX74=\OQ&amp;^*&gt;E]'HK\&gt;I_A;ALY*GS=&lt;J-&lt;'4E
M\8KE&gt;NE&amp;^.6D\/HE\H3WVNN&amp;GIE.O(S9F,M,7_C/B_53PT;_ZEOZV-PGJ$#K
MH;2&gt;.^F^_WG*,?F^I/&gt;]-'R^6YLC,IZK0SA&quot;&quot;E`0UBY&gt;HO4,.39Q+:BU\VTT
MLF5S]?P0;=B*6CT_0R-;VXA(=?024\:G8?8N:6+W[0.2/WR;_T&lt;KJ&amp;+S'.\J
M^Z\GRIIUNS%8S=WK^!P4F7&quot;++&gt;^]F'2##OB.6W;_M81S1@]!T#:N[:^J\*#^
MGC=#JNRDU5D0!XZGFX%+1%[#^)&amp;'W^M-]L9'JJC=XT`@(IZ1-&gt;^VZ,=ZI(ZX
M74KWB&lt;C#Q-9]/K.HKW]6&amp;&gt;_[E0EVD5'JFQ&amp;_JQO=(F*7U4&gt;%9-4.K%^(UOCH
M%&gt;I:.#\-BDHKJ&amp;P&lt;4WY/]L0X.C$=QE-:)=O8QZ#VLF1:\$3QGHIZ1/30+2#[
MX^#:-;/4`^?@M*J&gt;I5M.$SP2=[7-'+T&quot;(]_DX&gt;O'Q-.O[=O@45O&amp;#6S8U0?X
MI,*2;3%)WY?U36TR:3_BW,VTE&amp;3$A6_SP#EA[`/)LVD[WB&amp;)WK./&quot;&amp;Y7S#17
MA7=/H^@,NTB,0/[@X#`J&lt;\?Z91;U(A)I2N&lt;V+L!96^3Y)R*;S]6_M8F6V)RZ
M/R2;=X)U,O&lt;MO]Q.(&amp;[&lt;7%V&quot;68V;T`[TAG&gt;TR7A.ME&gt;\C7SA;*HJQ4T/[*^,
M=7\MSTT*$^AT!A&lt;8'^2K[.&lt;9T;4^%5_(-:`9BE&gt;Z:(K3HQIX^U!XNR%0EW6K
M+$&quot;'Y=?7*'=Y$KOF)L7ZKW*RGVH14A*5%?@/PD*&quot;`K?Y^7AYN.%&lt;G!RPM]E9
MF9G,3-#4-V\8Z),2$VEIXN*H8F(HR*/(2,/#B&lt;.(P)/13Z]/-A&lt;G1WI:J][C
M,A(C0_R&gt;HNPM#&gt;\CY20$N)CI2*_^[4J#/M?65%5\*&quot;M[+QG4&gt;RFDXQJ&lt;5ES?
M-[U^&lt;*5M5'T@E?R#P23EXY&amp;T:=S/&lt;UE@U4B&quot;1E5QC*JYN=9P^.51?,+0/9=U
M.2_\S[J7:'1$1$)&quot;2LC6E_\:&amp;F9FMJYKJ@&lt;C_OM/&amp;L[^-F[R@^S&quot;T/-]:&lt;\@
MT8E&amp;V8(A5_'+_B&amp;[6HN=UN?2YB*M+Z1-8UM?BE_.-)[X/K]J/,'N+8BT!LCI
MV&lt;6'5%[N_)Z\;K3?:0U2\E4['&quot;;JN;NX&lt;[)^LB9VX/*$==_GG#P(U@H[O/+M
M`O5`!&amp;Q5PW.YJAI1Y')&lt;50W&lt;3\G)E+@68%SO]D-0Y*3/0BT8V(01:KHV'C[8
ME(*/#?TSV^&gt;,O-+JIIZOWA2V.L;Q*9D]&quot;2MJ&amp;OM+(Z;I&amp;E[\;2-/&quot;B']_$7=
MR:GBJV;ED-:JQ'RKZ^9`9I)&amp;S)\ED3G0YW.JV2[@RSE[*=#@C:[Y=O7.`0(Q
M^DZ?_,/D#:/IF-FX&gt;3I3!G,F2Y;UC,WL.]B\'2?.)92,BIZ9@U]$2@ZIJ6_Z
MT-G3]]7KV+2&lt;]U7UG4.3RSO'0+A@9FSO6((:S0KM`C&gt;-FN(F0F5_:5MQF,[9
M0(KG-M_0$U*2+PQP!Q6NQ=80_:Y&quot;*&gt;&amp;Y!_)=C=ZB.QAU^]TBL97CU=@!_V;I
MV,7W5:T]DXM[1WLJ$D&gt;+=E^N]_\'4$L#!!0````(`-5=QQIIZ_YL?0```*4`
M```&amp;`!``;&amp;]A9&amp;5R55@,`-6,?C&lt;&quot;?Q,LG`]D`&amp;/D4.3@8G#&lt;Y+C*T*K;&lt;9.A
MPG*%R4HACDX^KH;&amp;2CH6.H8,CAPB#-T*CIN,P%*^`4'^7H;&amp;&quot;J:N!@80^1@.
M.;&quot;\,5C&gt;W\G+V$7/'R)5R:$!EC(!2P6'!/E[N@3#)&amp;=P&amp;($E3&lt;&amp;2/IY.QBYA
M1K[.,.E%'#8,\TP,+,T8&amp;!@`4$L#!!0````(`&amp;]*D28*MS&lt;TN0D``(`9```+
M`!``8FEG=&amp;5T&lt;RYB+G-56`P`FXE^-X*F&amp;#&gt;&lt;#V0`E5A+&lt;]O($&lt;XQE_D#&gt;T*5
M5+5^4%X\&quot;5**MP*1D(4U2&amp;`!T+1\3.*M').*4Y7DU^&quot;OX$69#D72)*60/NFG
MI'L&gt;P)&quot;27;N42**[O^[I[NGIF&gt;'O?O^,/%,6YS\9?25QXT3I!7V7(&amp;\]^Z28
M/W2[0)!TL;I.CS5550D!;+%-7Z8J?=K!DTZ?OL&quot;3B4^EDSCPW,;G:0E/'7RZ
MC=T(GKOP7+C#91`#H3$;VY4[0$IC%CG%K7+*0.K&amp;2?&quot;9CK+VWKE`&amp;/K]F:$K
MYU?@O)($B&gt;,3&lt;G_V:30(E&lt;0Y]UU&quot;ID,O,=&quot;-8PO\OS]#VG-\4%=\[]SHDZS?
M!WL`8,CGQOT9L)3@_&quot;&gt;WEX!-\&gt;1[&lt;4)*UV=@IH5@8+F)*U`743!@T+6;%*-H
M&lt;0Y@IH5@8&quot;J]412YPX1KD.L&amp;)U00&gt;?TH&lt;NZ^32CT^@`Z!('PP1LR#X#/G*T5
M!3H,O&amp;'B1DUT!-UE^65:B&quot;P&lt;OS?R'0C.&amp;?:5V*T'&amp;#A)Y+TE2R_I73*W014U
M*$&lt;Y42*8B28G3A2,P,#;$^&gt;M%Y.=,P8=BD05(!L%CKQBR%7@^P`%!`*1&gt;H!\
MQY`WP1MW[?6Q(A&quot;&amp;&lt;&amp;2)X/#Y-@2AP#TW*&amp;\21&amp;,GZL=&lt;&lt;AL&quot;'\)'Q)W;XUP!
M0J.+R(/Y&lt;!(O&amp;&quot;IOP'(0Q:AP&amp;S)XHXO@)[X[?)5&lt;OFR;3Q$TB8)A4N.H&quot;@R'
M&gt;5\ZT2!F;`$2M0+3WW&lt;C;_A*&quot;9W(&amp;4&quot;AP8@@N/-BH24,&quot;)4W7NR=&gt;[Z77,DZ
M.)=WGCMF&quot;D*]T7''M&quot;:4ER)GZR!&quot;&amp;.&quot;%*BV)8!&quot;.1$$`@HWFBTS'I(R&lt;&lt;&gt;;[
M3)/;H*L$^(H#,_B8`A8GTVC4:Z6ZLF4]5N&quot;K($$(U^-66*TDHFS[:(/'A*B)
MTV-E0E6?&amp;W20-(84@_$+$&quot;I/PL&quot;_&gt;A4,GQ)H@[1'*'$RNK@@I,AFQ4VV2=__
M_9_I&lt;:&lt;#[3`KBM5BLZTY!N?L:DZ;&lt;[[4G&quot;ZYGBUR8-6&lt;/Q.@EJO%IYKS&quot;UDN
M9KO)=#83+&amp;B(RQGH5)]O*6F1&lt;I7];S:=5S6K0^ZJU7JZF-&gt;&lt;G&quot;P_,P.JCLWO
M;SC'Z&lt;\C=P2=D3Q[^&gt;T7(8D[&quot;&amp;GK[-R?)&gt;.`]5E&quot;*X6R'9E-MAHRVS#.S!NZ
ML-Y[01#UR8ZQ=;+5Z8-)=NRAC3Y`CC=[&amp;\_&lt;@SD('2]2@@O8DZ!$8`=:Y&amp;M4
M43L8Q8*50.3VP#PLP&amp;HSG:-T,JE,0M!:@&lt;;269FEQZ4*&amp;PML8%EZ=*R#&lt;NXE
M`R=4!A2QWM0(!!_!`#7BY$&lt;%8H$YKE$=8;)$;C8O06'2$&lt;95V(IR9_A:T80&amp;
MA3&amp;['6%&amp;U3L9;#&quot;P$%Z[5S'$$+H.=-_TTWJ5\MF#/&gt;I&quot;&amp;8S\Q.L%?A&quot;]&gt;/&amp;&quot;
MI/EREIY&gt;&gt;A&amp;DN0ZK+4;6)!_;1,#08N%'1&gt;#?.&quot;'ACOP!$OD@@2#:I4&lt;_@HAI
ML8VP5ME4FS+;U%I]V-^%&quot;A,AM4V/5`T\+YD)MCVB6]OT;I'?GV$#J?&lt;:;AA\
M7G%U-&quot;:1:$U_:&amp;F%EE;RWL(&quot;7RZF\\9!OKFA:,=$SS4^AL5W8)&lt;&quot;3GV-&gt;K(H
MJGEKQTP]H0I/D2RK'4^\KQ%R&amp;D/K7E&lt;%6`A\KZ_P)A&amp;C(`F9S[3V&gt;?DXB2@?
M%NPRVT#FETX&quot;(P_YX80'CB(6K.CEX%H0A/4&lt;,I.$98:FL]F:L75S(._3W!3K
MO&gt;ANE-3=EHJ:)LM;K)&quot;R`6B6Z&gt;83\*U.Y)J[2`\&gt;D)&amp;QXR641U&lt;@Y*KZG%(F
M28N;97KTO?,]9X:XV_&gt;'@O]NCS\*!?]GP8]@$_&lt;%=RQS(\&amp;-!??*&amp;=?0OL2L
MD7\4S$'PYD(P?Y&quot;8YX+Y4C#'L(0$\YE@0@$(GH(\Z+PL6FE&gt;UF.8^GHW/&lt;@8
MRY4XB]6+`_A@E,TXH4.GQ:R``8HBI&lt;4%7(R'&lt;&lt;M)GA[K)F7Y6)#,+!R2]NWP
ME!\H\80W&gt;O0&lt;MJ])DW^@1U/?:.$A:U\)&lt;RMZJ&quot;T4&quot;\H_Y_Q)ERG+AZH](TVE
MLX6!BV&gt;SR]AB8!T.5Y18JL=M329TF3!DPI0)2R;:,F'+1$&lt;FNC*1R40N$X5,
ME#)1R&lt;1$(FPY'EN.QY;CL&gt;5X;#D&gt;6X['EN.QY7AL.1Y;CL&gt;6X['E&gt;&amp;PY'EN.
MQY;CL7D\T_F.+PK6NU;0U$B]`4%W'OI7&lt;)AS^WCKZ.%1,!CV7-'MZYT2SCG2
M?)N8GRT?R=1D0I&lt;)@Q'3^5;V86];Y;T\2O@6&gt;H1'B9MZF]T_$&gt;C-EJJ+PP%&lt;
M/$]]G;,[TNAE5R8RF&lt;@?^`7A@0LL.P16/UTJZ(J\0ZXDOC[LUQLG[E0I^(+\
M+3]&gt;&quot;7HGT&lt;&gt;JAJPOG$4&gt;VWS6BQF]GD.D'ZMM.CEXD7*Z^5BM\.RF,81E99G\
MY@B=_@1`$?MRRR)?IM=X;C.8N*K*,L]M6WR3+QD5FTQLVWE&gt;EE4EOE$;$`&quot;P
M2/K7]_]*\]RRJFHR$=\$SM7K]?J&amp;_MK`7:PJRV)R_&quot;;Y:EK\%^0VDZMJ15^J
MFM,767^^S5;5FOY*P=.09?*;3.=WZ\_TEPMNP;+D-_FXF%%]C&gt;&lt;Q+R$^N\S+
M'`*I\I)\7&amp;]6TR7#:&amp;(0597?Y$[&quot;U+G&lt;?_&amp;S\@&lt;\*_,[D':JQ-X@A'L+'),C
MY]+MP^T14.)41BOH_FP&gt;1`/'KS=QY)K`'0W.77K&amp;IEM5_(@`;T,Q7H*6]&amp;I(
MKUQH?,N@5@O^U1/^03Z\__!O(:!&lt;2?&quot;?/0&amp;7HF6\C7'#DZRH-(HS9&quot;?&gt;N!&amp;L
M4)?[1XOV_FSB0?L(63GS.%M:2V_A,A)X:E!G!AD&amp;JY$]&amp;8#56@;#&amp;#*&amp;EY2`
MJ0#D,%.&amp;T5D7(`U@AG25X=.CGRH.7&amp;L&amp;(?VE@C%;@(E#S.NE%YZ\]E``MYQ+
MO.$_&lt;&gt;,8#J8&gt;M,8K@,'2]95Q$/EX_72B^&quot;D,(([(?(/MJ.Q&amp;+@W`)-I7)[@M
M&quot;P+H`\F#&amp;:8X2X5IP@_^IUG-OWKRX$-,`@#;P-#;3(G^@YQ_'-&quot;-$OYU3534
M]P&lt;X'%&quot;C5;-`OZFWIW&quot;)N7`C=XAW1A9F7?&lt;3+X+):.^%K[$OG&lt;B3:?*0&amp;],:
MMZ)#NO0VO]^*!6(V&quot;X,]B*(U]X;BI5I7Z5]^^1/$VFG96*7_@!E-]5;Z`2[*
MP$W14&quot;I&amp;?5&quot;N*BA!1@_$62-NM[J'8MZ^!:(+(ZM-@/JO&quot;O`KD36.:2T-_F'.
M]L&gt;F7;=&amp;@-@X1/&quot;MH\88M#:^%J!&amp;I1H&quot;1`#&amp;K_%?ML8[/5&gt;#A((]?1]&quot;6[T`
MM`&amp;B?R.E.OK4?ARBUQ#JN=ZX;0JW1&gt;7M:1\T'\A&lt;!QO+5QM/!Z;U0&quot;YV$@'I
M8FX/,+0RZT'H.$;CHO5;,[N7%A-&amp;;+?,KPYH@A128GXC;2:=;&gt;,0\W$O,A,1
M7&lt;0(O]N_U6]VO.!K'W():;&quot;^-:1%2UD[!-T=@C2H'.L;\5D@[R&quot;&quot;?/?=_P%0
M2P,$%`````@`%J.V)OI$MTE!%@``0ST```L`$`!S=')O:61S+G,N&lt;U58#`#9
MB7XWZV9'-YP/9`&quot;U.]MRV\:2^[@O^`?DV%OQA5((\&quot;KK.+60,)00DP0#@):5
MAWW8G)S*5NW#V3W&gt;JN1\#7\%(&quot;F+7DJ424J1_*1/V;X-,*`N2;8J2FQC&gt;KI[
M9KI[^C(S^J=_?F&amp;]L%=)%`9^;/&amp;W&amp;MC.*WL_4EZB;*]O&gt;W&amp;BL-_N!*KK,]+\
MHUW_:F&lt;'&amp;M9HL?PP&gt;NI4JU7+6NQ],[X&gt;O1Y5Z&gt;L&amp;OESZ^@Q?=?R:&gt;(D'WTW\
MGDW@JXU?E[&amp;*X'L'OL&gt;J?Q'&amp;T'&quot;8Q_52];#E,$=I&quot;5=IU;!UYB7X3:.L@N\4
M-&amp;KN[6[-M?&gt;.$Q7;29AX7&lt;NZW?TX[`WLQ-OK*LN:]8.DAM-XVH#YW^YB._&quot;Z
M0&amp;YW@[V:;Z6^#_P`@3%?UFYW`62'&gt;]^H_01XZJ]N$&quot;?61'49F:D0&amp;4`*I&quot;A8
MG2CL,&gt;I*)&gt;-AM-@#9*9&quot;9`#:^\,H4OU$**P/!9XF0&lt;P/]V*&gt;JW&lt;)H7[80.U#
MAYY#T.&lt;9`)PGFQ-J[$$8]$'CQ&gt;HLG&quot;[+EZD0&lt;^QU]X==-A'?CE4^0,]+HN&quot;=
M=1$D^X&lt;\;2!%&quot;H+86W8$FBADXD7A$!B\V_+&gt;!;%UXQT!#6$B&quot;30+`L$\9LQE
MV.T&quot;*F`@(K;N8'['F&amp;?A6[4*?+0(1$-T!.G%X??E`#HUWLL:P4[&quot;Z,B+_%AZ
M+@&lt;`A^4CQI7:%ZA&amp;0J:+*`!]&gt;$D0]NVWP#F,8B2X'#!Z08O(S[JJ?Y`&lt;OF[6
MGR/2213VDQR/2&amp;`XE/N%%_5B!FLD;2N@?E]%0?_`'GB1UP-#@Q&amp;AXRJ(-95F
MH$G&gt;!G&amp;P%W2#Y-BD05U&gt;!&gt;J(&quot;31Y0:..R&quot;;LUUIFJS!&quot;-,#7I&amp;0286\PU`8!
M&amp;#Q:5TLZMB:1=Y1VNTPI/&amp;B7`-SV0(/W$:!Q,D5!GA/EEFW2L8$OPP11A$ZX
ML*TDVFQ]Y&quot;%K0JP3;Y_-A$A?UFB040PB!N8=Z+2?#&lt;+N\4'8?VZ!&amp;P3*FL^^
M)`;GEXVGY^1+6FT'I*%H%\F4GH#G.0\3]&lt;H^&quot;F&quot;A&gt;\,#.^C8CMO&amp;-2,2,/C^
M)Z)NHR?Z;YJD_U6D8(\%8$[$+;9^U$CMJO7]S_2Y`Y[W1_V-X'_09TI@^0:P
M];?__(^_O_]I],-__0]`,ASD;ZC5$4HK'CT;1&quot;'.5/G/&amp;?-GP1P#GXOY;+7^
M/)I^N@3`!#W]&quot;W:0=IP,.QW+&amp;J?S\5FZ9A*86]5*Q^/E8GV=0VH&quot;N&lt;DA38%\
MSB$[UH?Y(@-0#OG&gt;@M;%&lt;O$QA_S5NEC,;TYF\[D&amp;032XF`,-S0Z:#6NR3'^9
MS\ZG.:AM74V7J]GB/(=DUL4G9E!U&quot;U%\.U1#&quot;`O(_0)6`Z++,G!&lt;7@*R[[.B
MM7NTKF;37\X8J9Y:UO7BY&amp;0UI6:C5FB_8\&lt;0257?NC'ZZRB_M9C-V&gt;5\/5_P
MQ,8.SH7'`=)W_^92]^E,NNLH&gt;NO%Z\=_+&quot;N;IZ&lt;X4M6UK$3U!FPR%DV=OCT8
MY2CDT`AS=Q#8A*'G05^!+]X/P\BW;ACL6M&lt;N?=2M&amp;_YHXB1@&quot;:&gt;PAV&quot;FR:':
M2!*VJ7L-&lt;&amp;K:8.+[A^!OP+PB&quot;*X^#&amp;Q[]I]\U8_!%?VI8A\=!A`;?'1'/9A&quot;
M3#PI9$,\B6/&lt;:QV``1]P6PDWA/FV30.!O(/(&amp;*\?)O8;-8`@#&lt;.^`8I=._*`
M**H`LYS8#OO=8UN]PRV`H=&amp;SXQXZ(@^R'SN&amp;&quot;(N!!#TL4@RZWK&amp;*&gt;&amp;UI]R&quot;,
M@N2P9Q]Z.%O0,4TM?@6=MO/&lt;GG7L/=4-CVQ9)'+HZZRJKXYRB&lt;7;2.$^MR=1
MT$D*,$)KS^WQH8+I=\+(WH?@!?XQ[%.BAOYF13HF?[%@-Q.I?=!&lt;;*W3C)17
M;9%!@0F$D1&lt;=Z[SGPW0](U=U&lt;C(%8]3YW^CC:DF9CC6:3]+1$[&quot;VT6J=CL:7
MRXEEO&gt;J&amp;X8!Q:%(37AA#:/*:#X,@=BP]WXLLY'8]NEID9M:`446820@1*@X+
M$'HP@NA`(&amp;-H_R_&gt;7_&lt;6W7K`?)(G8!3&quot;^,@;9,..S&amp;:)LZ$@&amp;DK(EC&quot;@ITX)
M%,OA:CI?C&amp;?K&amp;^XSPSX(Y&lt;@+$L*:+3^=S-,/UBB;?AH1&gt;$.*&amp;H'9D`JLT?CL
M8O3D2^]+(1M@YN/W-?R[$GPXT/!O-3P&quot;F^AJZ)$)C30TUM!C[RA']0U@COFO
M&amp;ACT]]^J'/&lt;K#?:5&quot;7YI8*.-:_B6@6[&quot;7VOX$:F$@;8&amp;QJ`=#8SR=7@^:^OC
M`H2?@4-_]4UX'&quot;?!_AO!().TB+HP,M1TD;5L:I2$KW-&gt;U`Q1`1S&amp;UOQPBJ2\
MU6(^FT#`L4;3Q7+TY&amp;E;=%G`33(4YF@\'UNCR4DV&gt;NK6&quot;=0=K:9C'A&gt;RU3*%
MZ'6#2*R@H*.$N$Q)FM^@([T75)CMEHE$5:/9^7@TF9ZOV*AS!*TRZ+NWWQ++
M('IC5Y088#_2W]=OH4I)L,MTPKNE+-&lt;&lt;;-(4.E]?I]8H/9\`1=41B\BWC-GI
MFIVX;\S.NG3RAC![VD5/5)J#7@S)FO(?&lt;,^YP[&amp;WMFPS^:6T,B)7],+V@Q@#
M1P5C'KE_#&quot;&lt;&gt;A0#)#8\.PUCRBA@CCQT'O4&amp;7(@;0/XOWO2YD91I;,D$,0Q:(
M&quot;](*++/K8/98MD)DY(%%DC1A6!E$`9YJ$AX&lt;4.D+^EWK%37KE6H%ZU\?PR@$
M*RGB&gt;+D5[-;?V,+TA7PG&lt;&gt;0)8;F(&gt;TZ:5+NP-]8;&lt;W,CHK[7T[,+_+JAKY&lt;.
M(Y/+O(M\L9B=KQF;/AG]9O2D`;&amp;)K.H9&lt;GE&gt;N6'\9X1%S&lt;D4'&lt;C%'/1I09!V
M1\OU&quot;I*8(F24C3([FXT0;6,Z7/T^.!F9C3[$8)[&amp;)-;IM80$2CDA-,5)!1(C
ML`G*+T1R''(_5ZYO=\%DP*C(8@)(#1+[&amp;2H`J)_O8H*C1`-&lt;0:!Q5'7,P1(S
M#FU)ZC&amp;^4=UQ%$:0&quot;PW!BL((&lt;H4$K`QLUP_[7X(9&gt;N@L&lt;?!3'KVO#JCV$-/\
MXKG$SB=MD+?#04^LJ'+-E)(4(_6$F'J^#UL&quot;4RS(PXQ24H==5,VU5HTC`YQ?
MGBVRCROI0P^-AIY]?`EEU?FPM\&gt;)-&lt;]*-C`YPG0R'CWY,^!.TG5A7[&gt;[QYS0
MBD:&gt;?*TQ&quot;%^'9VV`[`^@1]NFZ/IV][L2&amp;XU?8K)A&quot;I2915&quot;D@XA5C/+H42VA
M&lt;RGD,[[6PKMV&amp;'+*(,II9E=M!(MOA%F#(0G=S5VZF_OH\DTA=)_OTN4@S!LK
M-^`K5$^1G./@H'\/R\*H9^&lt;W$'_?!`-1)+I/7-SM;A7MD@U4GR/1=GE$ESP?
M*:4@6SST^@&gt;P+U#J09\.C3J=6*'2+TY31I:ZRH`\8:\H:]2\+@&lt;#%6UU58=L
MOP\Y=EZ:$:+FL['EY2@`P!?SM(Q90*XU+:W&lt;)=T;JX0B8-&quot;%&lt;D1Y4.-(3D(.
M&quot;6=+I?6U=EE:)0Q]&quot;7&amp;QZ'EI]MUH^$T):E+&lt;Y!0B$2GOZ!2R&lt;-HR(1K#%4IW
M(W6]=E\ZNDNL&amp;WK_/%[,%TN7\^@.NI&lt;!5\J,*E6TWG2,7.K2\]-6=PEAT`\Z
M'44'FU#OX!$:.&gt;-7&amp;%)O=[$,ZN`IV%=['N8#QC2&lt;AP=U-@&gt;UB%U&gt;-*!4,*3)
M#X!M/%&quot;@QFX*\1RU]X5E45JC]6J8N@MI31)C2+G=_&gt;50'7TAZ4'P-O&quot;5?&gt;U4
MME,,_FW*#?IAU*,39L#16XK27LJ!EHLE_37Z_6!.85#+(+&quot;*#&gt;DQ%+=8VB;B
M7@=AC%L*R\D]E1R!Y=M;.XWM[9VZYHF;AE8%GG^G(9M1CUC=VFE&quot;]W@UPM5:
MC&quot;-F`EV@G*$/F]6S]V!$+1!,&lt;&lt;-8&lt;K$POL.468Z%)6$P2\3D&amp;&amp;T&lt;-'2PPH\'
M:C_PN@`W&quot;CRDH2*!I&gt;!4&gt;2%S+U:L_/EX&lt;0GQ&amp;H9QF&quot;\#\GR.,3&amp;O%4QBJ;\E
M/:QQU8%,K(T=PILMWR$;NP8W[^UN&amp;L?#'MXLZ$V(WJB\[Y\X.SOE??TD!\BF
M7(V7X^EYOF'U)@#+7O$.BL-NX#^Z%1'WSIZX;\%U7&lt;JA&quot;V3-N5)[TP*BX.`0
M5I&quot;NYK&gt;[[%%&gt;N,6&quot;EHLYNRW9;J!P8[O)`='9,&gt;0&quot;PX0.?2`5V?/B`/+=[C%T
M?S.,\0Q'#?(S'+NO(P:?OF+U;S\[5H.*'1^&amp;PZYO'WJ0KT&quot;5TAWZ&quot;C./_)2V
M,^QS'@0NSP_I+(E2:,DU&lt;D,X.^;;&amp;S:&amp;/!/!R4L'H/&quot;=#3N$$HIT\/Z7@Q\L
M#FC7!1W[2%&amp;&quot;+PD?B4\?$-$Q$!X;06)7&gt;?2T&quot;/)6KLUHTD[#PO,960#L&lt;+D7
M$K:653JL82T^G8RK6#&amp;H7K`5P=X*&gt;[G*6X:-8\8*+BU0I.4\Q:+C(-J_&gt;8V(
M;@%)\K2O&gt;^0=QWH!(2J\.$D2BUV=I?,YB$YRI:^+]O@&quot;(K`CML&lt;\&lt;CL_FTX,
M&amp;MTBBKKXD@V*;/8A7:TTA;0$B4]T1.6P5$4:@;QE-GDDS4&gt;B&lt;W4TIE-2G&gt;G=
MFQEQ-KG1428GM#^&gt;U%&quot;\Q`/0.U[&gt;INCXV_H486PAW#`&amp;0J@:Q0W=UM[N7JEN
MN$_'?YOC4-H$3(XE)WND3141I5'K]$:^I.X[\Q(L6=$V[;&quot;X6;-XGY5M&amp;G?;
M!P4Y'=WKW,T7\61W&amp;X9Z816R,V9!&quot;1\=*,Q72QV/PJ[N.)G2R0JZ,XE).![1
MXMXV!N:MI)W4$.^-[%[@0^C:BK\=PL;'D]MT.9^&gt;Y[OUS'MGQ^K;H&gt;KO0V2@
M.T$HW&lt;\GN3^2.9HE,GH=XB**/(A(E&lt;;&amp;7L*`2N7J=6B@-PI/M,&amp;=A/WOP)?H
MHN)&lt;;\B:F#&quot;S9JZ2RFH&lt;OHS0&quot;2872!H^7V`*MYU6$&amp;R_QLN+K^HD4D&amp;D;*74
MY-SXM&lt;@($B1('&gt;2\D,&gt;DO&quot;%./#DF^A&gt;GRO]9&quot;&quot;S-OY!.KJ'2D3292$@7&quot;Q!N
M#@[INC%WJA6[%[X%;0$2)&gt;D=.=_=MNU4X^@[&quot;N2*46687T/@\0[?&amp;*!OCQ3P
M4C[[Z?*IN%06D`FP&gt;QR`1:@[)Y244]X]IKS__(-V.A^6)G&amp;Q1V&gt;3.Z&lt;/E$9S
M9782]/&amp;B)H+P&amp;M/D-G;W!JVYV&gt;^&gt;@(O_&lt;W1N&quot;5&amp;.JJQ&lt;*G=G@D:[[^BS/\PZ
MB_(=MB'T2&lt;H)667*=_FU:K5J#_M@'_819M7\G(/345]U]2QJ#PSF/C*8JP&gt;[
MRZ[Q`+O:(^QJ)KMQ&lt;3#:-;6#6S091GV^W&gt;*ZG$+C*AN;PQ6W+]H@R$:XY-J6
M8K_(1XR3V#P!1\N?+3_I+`O:&lt;A&amp;A70SDS?KS9+:&lt;ZN_369X=3Z^A'IKD/&gt;O3
MY&gt;6J2)V!'2=+^0V(]D154TR2F4M=3LDZXN&amp;0.M([^@H(-$YY/5H&quot;G5#,UAK'
M-7!.L=+8=PE%YJC1:@;:]!T4&lt;+XBW5&quot;Y2?,7S+UC9:&quot;N#R-(.BV$DC&quot;?3M-6
M9EG%C/)Q2YQ-6J-LP:LTB$8^&quot;MWBO%U+35\@&lt;-C%ZWF++]Y6TYE.7$BP*&quot;RH
M/)RZ3MY+T`::GR9XVFKJ'D&lt;KH&gt;HX.@JXX'BR(.EY`_!VOM1%@L'TU7:.L?6U
M_;19U5D-8K4U2[S_U]5F6S.O0EV0&gt;?TWMJ,I&quot;(WYZM-]P&amp;JGZ/VZD-:#_XO4
M`)*PS5(J3ZCI0%'?(K&quot;2Y!K_=A?RY-ZPFP1T2+&quot;]O2T[\S#`()NOO5E$P&amp;(A
M31FOM6,D/40H)5A#*BY=:=%E8C&lt;:A]TS;Y&quot;GE8ML=&gt;?:57),Z&quot;KN4FN3G(3/
M#C16T;J6+5).1I?&amp;T5G^],:NYMS6T_4D7&gt;=S\+W$TZRY2[-NX\G^I,P^O_@&quot;
MYQ[D5Q$Y;UC^4CA0:EXTB:%S'S.Z4EV:C[M*IZ&lt;R3?U\XKYC?'D&quot;Q\?@^HAY
M`3IX_$3?T?&lt;1PP%F$&amp;&quot;^%3U,;*MD?QLV'U_^RMW@WA#/F&amp;(ZC]GO*GW\+S;+
M+@M#2&lt;F0&lt;&gt;'-8@M!&quot;4&lt;;!))3^VE*.T6R1P@AD',.-$U:Q0M*`)0N%/%^F\IT
M?DX4F\&lt;Z9D%?&gt;GNBU&lt;'UNR0-]%8+JKQNQ#.38@C'%5^(*_2*(VE(&amp;FY2R3)H
MA;@,+&gt;&amp;G3&lt;=LN&amp;:C9C;J9J-A-IIFHV4VVF9CQVRD9B,S&amp;V.S,3$;4[-Q8C1:
MYGI:YGI:YGI:YGI:YGI:YGI:YGI:YGI:YGI:YGI:YGI:YGI:YGI:YGI:YGI:
MLAZJYO*#1HDM6J/W*-1E\M240&amp;I*(#4ED)H22$T)I*8$4E,&quot;J2F!U)1`:DH@
M-260FA)(30FDI@124P*IJ=',7$]FKB&lt;SUY.9Z\G,]63F&gt;C)S/9FYGLQ&lt;3V:N
M)S/7DYGKR&lt;SU9.9Z,G,]V;T:=46E&gt;7@!/XDODOI0O&gt;%)%1Z%V2'4AL:U!,=4
MQS6W&lt;!T%)'&lt;X3^N.V7#-1LUHM$V:MDG3-FG:0C,[-Z]WRO%8/+&amp;4(&quot;D7.6=Y
M?&quot;[G&amp;VX1B]W\V+,.JQ'CG;2-T2&lt;[9B,U&amp;]F=&gt;;E&amp;VFM!;,NK;#/$+0VXV_?S
MR+&gt;@[&quot;PE^+6\@-/M&amp;Z,-R16&quot;/@O(NL]/DY&gt;G=_&quot;CT^GUZ&amp;3CQYK,UJ?3);[0
M&lt;ABCT4A3\X]@N/2&quot;GC#*_8V&amp;]7GV`=]_U;A[.IU,LJS5TO]:GU/JKG-WJY5E
MD\ETJO]%:L``!,@@?_SAIU&amp;6-1K3Z&lt;F)_M&lt;:+Q&gt;KU&gt;J,'NO+%*?31H/[\5\K
M6\[&amp;_PO]+&gt;ZO5J?T4ZUF]&amp;.M/EVFR^F*'OF+&amp;-+4_&amp;/-SJ]6G^CAOW!H-,P_
MUNEB3O2.R#&amp;;P/I:DVR2P4*FV&lt;0Z7:V7LPO&amp;&lt;?0@U:KYQ[HR&lt;')9EG]@_]$]
MD:RS_,-][@.$F.:_5W'^^MUYQ:\WH$)52&gt;0=*C\*^X`EQXXZ,2,#Q.,/O`S*
MLR6$UN^[XK[3@6^18TQ[+N@VG1X\(_-K0FVX%?B_NB5_6&gt;]_&gt;/^S[B&quot;HT?&amp;/
M4H?T(F=\&quot;RV,3]+QU&quot;&amp;\FCF)MRJ&quot;#:YD?F3S&gt;+9@W@/RFQ&amp;GXN+KDBN-3PQ=
M9L@X:,S\50-&lt;IU)CG)J)(Q:IT:J`*&amp;AU$XV,1B,Y@%:[JR7WE=U3?C#L:=&amp;_
ML/1)\A^B&amp;9X-3*4*$I:_&lt;B!![@5*SX8V?DT1XEQ^HRI,T8G3V5&quot;$B4%[?D,#
M9C\905GX*'O)_6NOY'EM+O7BS/^/D[L#JT99RE\YD&quot;#W`J7G=\H=;?C_(71T
MU(](7+NX1X1^M8$B1L]7;&amp;6KQ\/QWH!.U!B(KZ'C`&lt;KN,!ALO&lt;&amp;#07YIW3^P
MGZD8CR&lt;#N8Z#&gt;$&lt;/B+KXZM^+XN&gt;H/RD,+7V.P;\%8@P@DGU0B4VS(X3@F=RO
MQ0:J!?^2_YQ&amp;\3_H:_.OXKF:TP2`VV2BLBELM@LB_&amp;^GCH1N&gt;8#-`6$DLF^8
M-\WVE1TI&gt;K^PKXI'+6+;].#+;I:6[_`_;DFA=5ERP=H1+BZ(RVW*NWV]&quot;&gt;J%
M\?.'MM1Z:2AQT+EM_N6O_PYK;5=::)M_!XV.W,KH?=!7`!TAHY&amp;S8:FYDZX&quot;
M$4CT(4.N0N?.9K&gt;X)8VQ`R-7BP6ZOVF!#ZRLF)A3&lt;&gt;!_T-F#;HN[:YL8)=?G
M$$)U$Z=8H$.]3L4I%E#[+?,ON4I.CX0,!`K\W#(*Y4&lt;:H0DH[B,B=7%.S?M1
MW!R%9NX6TZ[K:6O+*U%OA%R07/N.?S+#;1O4^BO.:0=E^VC4H'%JQ10;OU&gt;R
M);'48&lt;1FI?[@@'7H!9'4'Q%;G;1=V\0I&gt;^8Z8NQ4ZL6\F[]WWIR3R]X'68(8
M&amp;H\-V2!3=C:1KC:1'+&quot;&lt;QB/K:T!_&amp;S'X7K,X=&lt;1?K9'7$O+4M(*_$*Q_DS2V
MAS&amp;4J0\\7Y9?LX$DN!_C;WSX=-S&amp;OZ'I;SYFQM_A*5ZQ!C&amp;_?\A_)0UX\6TJ
M&lt;N3W'/K12(78TC4&lt;SP`?:R5\_Z9/6!_.+:H/A:7JK^86\HC4^C]02P,$%```
M``@`:S?;)C8,@GJC#@``9&quot;(```L`$`!L:6(S9'8R+G)E9E58#`!$@WXW*2!V
M-YP/9`&quot;]6FUSVL86_JS]%9M&gt;9BZX0L;X)3B==`9C2-PAQF.[J9T/]0BQ@&amp;HA
M44D8R*^_SSF[*PGL]KY\N)DF-F+/GK?GO*I1.#Z&gt;N/)%I5F8Q++MM&lt;3=\!=Y
M&lt;GA^+D2S*&lt;3]7,EPHGR93&amp;6.WX\G&lt;I;ZRWD89#(*QZF?;F68R3R1RS1YP4F9
M)0LEIWZ6RS19Y6&amp;L,E=.DU1,DC&quot;&gt;X0[\2Z3/&quot;M_G?@ZVF?3CB9RD_II.+)-H
M.\-#3XBOI5B6O^49)''NAT0JX]5BK%(ZD(6S.)R&amp;@1_G,IC[\4SQU4+%^!&quot;H
MA8IS&quot;!/&amp;,O+3F9)+/\U)\FRU7&quot;;X-1G_0&lt;8P:N*3&quot;G++T!,]&lt;V$8!]%JHCX(
MX23R6JWE0BT22+3PEWPWW1H&amp;*[&quot;0J4K2F1^'W]5$?E&lt;I;.3/E$=TMT9UZ0?!
M:H'#_,$:3,;)6N8^3.3+IR7LEJOT23B2A&quot;7I%GZ&gt;AAOZ-%;E#6!2AZ$7*HVV
M&lt;I41SZ4YVF&quot;&gt;H_N;V]$O$H?S&lt;!F%X#/&gt;RG&amp;2SV62AK&quot;-D0B^&gt;`G5FOD24\-M
MK'&quot;Y(C&gt;37&gt;&quot;IGZ0?9;!&gt;CL&gt;9=B;Q;`9)DDXRHH0U;H97=_??AJ/#SU&gt;R#J&amp;F
MJXC0(&quot;=JF&lt;^;&amp;&lt;Q./M&gt;VSAK6I(4A;H:C&gt;Y;H\K;[V_#JNB\CE&lt;MMLG+E6D61
M*Y=1DDL6E3E:(,%M(&amp;=3?R%U@R1*TG=2`L[0(=069M5].0]3C1/\OB@.TVTV
M+':QY_$US.&amp;0V!\28J=A%!5BLR3XS,+!&quot;.6M+O.QG@B2-&quot;6]V2+@0'19D&quot;H%
M+V1+0E]*/F$UOO9O[ZY&amp;UY8'V2$C0\&quot;20,&gt;&quot;'JT1E?-J5((U3&quot;Y$-\KGR6HV
MEXL$8;E4R3+&quot;:9(8WAS[8XT7HCPFW_LV$L*&lt;;O%CH38!_`530*NMG&quot;7)1&quot;&lt;%
MDIO/$GW*:2!5_@2ZI,P/T9[)20*``EZ&gt;SBC=S,+82,I\$,]9F$$EV'H:OJA&quot;
MSQE^668?2DB`./&quot;C@!$O;`K1(`THU_@%*4G#J)2!HA#*9/WHK#D&amp;-TH4P&quot;HC
M-8QQ(FNXXBU&quot;`TQ9!T2(`2'&lt;$'?X)@UV5XY7.2&gt;]AB`'FR`A+1&lt;DD&lt;EI,$X\
M42DAWK#2&gt;&amp;#\'A*@;!845EVOXCVR66$&amp;'S@&gt;^Q3EN)&gt;^,3S\Q;9R*-:.RH1?
M@2=&quot;!\0DR`O(Z&lt;PZ#?,&lt;J)NFR8(0Z.?!7,-\RXSBA'41I*$B&quot;&quot;59%HXC54GQ
M9(`K)`GD%7@O)TJ2RE(4O*D4X(LPA1V_*^8^C=0F'(=1F&quot;/-BOM*EB?T*&amp;-O
M.&amp;6=I,_`+45MO)5?KWJP0/PLFTUBI&gt;/:C];^-D/&amp;9XNE&quot;?0AD/H2SN(,30Q7
MV8J!O']*A;,YP+&amp;$-928J&amp;D8AUR?O*(6@@G9@VQE-:)&quot;T.L.&gt;U^Z]X[3E#V+
M309B%9T;X71[/&lt;3^`YWK3B;5$Q9RKT\_VE^^&quot;&gt;?3&lt;'2!WXC&gt;(+D@JB-P#,R1
M1DV&amp;H8.W&amp;LE56!I4&quot;^=F-'P&lt;7`V'.'9)61,1C:R@)A9,.#'4[&amp;XHE?GP63R+
ME#2UP2;EDIPP+!R3JYB[RE=I7/8*)J4*\8C4M5@!&amp;1D2.O&lt;,6;Z:3N5J:;/A
M0CN+H81,1O?HI!5$R9@J/E,EY'HI-#%1(B&lt;&quot;NEV9+0CS?ZP62Y12PBI$3G9C
MB/&quot;2RUJGTVK!Q5^*.@YOVS]&quot;?+.%&amp;XZNG1PU:R?G#GQ]&gt;P4WCBIULQXER$N%
M0QK6C;63;K-VV@9&lt;^[\Q1K[:XFI/B-KIL?,P&amp;@SN^OAZB&amp;MR4W50EV=0'1],
M6:@K;^;!]RWWJ-5J@/#$&gt;=2$=,MIL_:^[5P1&quot;!9J$I+;7_PT).TS'&lt;Z4Y&lt;W]
M.H6D:D:M&quot;H)AGB&quot;9&quot;&amp;&gt;\W;$1R`9*H6:#/8&amp;4ZH3V#07\LU)++G`A.\H')J@D
ML9&gt;BQ!Q]!]'.6LW:V7OY&lt;.0^'KD/;?&gt;QC:`ILR\[[G6MKR3!6N&gt;B6&gt;L,'-M/
MN*:S^'PEG(O]SL0M*JQI3D@CTY@P0[*M\H.Y&lt;+0C+#2X&quot;*(*F1*O2YN%+E3/
MS*$\$8[N8/PTI;80=6&quot;Q3%:Q;1MUSRO5QE^@UI+\W&gt;-FK=MW&gt;JT'$AX_/E_1
MCT?ZY'F&gt;1*CI1B\KRT_1A)K`1J7TE(&lt;Z3WDHGY?E&quot;9X43JJHC7QA-^D@Z)FR
M1X[&gt;K7SU]C\SECGBKKC!$@Z:M8L6I0[`]',A3]%TFK;1H%/'%(5/K]V&quot;=WO'
M@P'=&lt;H$(N3AW;G&gt;36?%-Q_GRZ_!^.#IRI?ZEK7_Y?'5D?VGOF@(7S#4W':V]
M$V9W/A@(&gt;Y=L_HSGIZV6?=+63T[L$]RNGW3*)VV'G[RG)_51'&amp;G&lt;SU$&quot;T!83
M)DW7M[2RD!7](-&gt;E`\96+[ZQ'/2]N(+5;H3SV=(3N:XY7*:E/YD`B0SE&quot;T#Y
MHN=0XKWIWN\8FMO(I8]BG%*P&lt;SUB:5S9V71HJ$DA@DH;=,TES-#2$?%01`1P
M)6H]F+IWHA\\%E\]4K#\#&lt;IT&amp;^U*SC$\0&quot;`9[+8N*D4S&gt;LT#UPZL=N$$)&lt;50
M1PTES18#I-5^/]#&lt;Y9\KM&gt;*@Z+`OX&lt;H!`&amp;,[&quot;&gt;UKB)$'GN#D[#B_[*7QHM-&amp;
M5&gt;;CQ.&gt;T3[&gt;=\FT:Q*[Q'G&lt;/4,9@'&amp;=[+491&amp;V&lt;U9%X=';QOU@8=3DBUP3E^
M[X+JF*E.#16%\#X5?#OH&amp;2HX:-`'U1E3G8&amp;J=]D?&amp;@VYTZUO&amp;A\W!T&amp;2U2&lt;J
MRGUD=`(D#K\WAV_[7R1LO\&quot;L&quot;_,+1C&quot;^[N#K.WSM;`Y0DDOB&lt;QL;_&quot;V(\:S+
MS[IX1BGQOGOA%JG2QK&amp;K)9D&lt;;FB$S=4,:*0Y%M073'UAJ''C6]3MT[.#JI`]
M)NJ!:#CZY*(4S%&quot;&amp;\OE&quot;G\&gt;!2SYPB0/]AQNX&gt;K-,8@`G1`&amp;U1]B9O3Z.7/&lt;_
M_&gt;6I`9\BEZ,B?ZJ8]KC-EFD?+,.#S&gt;%1N].@/A&amp;54\&gt;3:31-7N&amp;^U_H)ES&amp;T
MI^'&amp;M,?&lt;IU`/C'%[D:!IUO5!&amp;.H&quot;;!9)1*/Q89MSW:7,&gt;&lt;C$U0G2C&lt;#@CH0`
M%K!:2'-@M+4=SRI#VML2.^09JM&gt;&amp;Y2HK.EU1Z6UYM*3&amp;A&lt;FK7:RL=+%4J*M]
MLYGJ=`^--*S+BAX&quot;T1D9OF@LXS=:95^8Y,;R-&quot;H1+VTD5[HHVTMQ-$O;+?]=
MJRSNN*&amp;C[0SZP]7R@[Q.&gt;'&lt;$3J,8XN3(+=)[D-ZC]+KR(\F1^T\;\W-K?G[G
MPYLP_R#W*A*I:)9([`(I&gt;ML@HD*^BG'Z^+PE`WJ`1(2Q`_X/D,5)3=+A6-I.
M_IXF7.YW?B@7,3^\5HB2`\!;/!:.XZ?&lt;,!`\-DU_$_(ZAC[YW&amp;-S3'\D_!)Z
MX?X+%?@TSCL.C]7X+UL%M,#0G:ZFXIF+:@0/ZQS$F&lt;8O+6M`.U:Z*9H4#&gt;'.
M2!DK`B6Y$::?)(1-M:343_V^`V242[LZ-R-F4#;*Z!Z8E&amp;GL.&quot;I`G[1%XZ[\
M])`&lt;FO/-U$M0@&lt;U&quot;ZEL.8S73#4S!PZ.-B-=]A']-_:30UA;]L4@XKQ=AI=&gt;[
ME&gt;V8IGNWZ^@[#!%K,]BQ&quot;D&gt;G+1&gt;3+('MV=/N/C/N?G3NPD5(FSUS=LM^TX?.
MS:%O^X&gt;^FT-\JB?M#'&gt;C4MK6P7\SS#.5R8%4_,L]!9Q0O]U9:C1&gt;QTK9&amp;-EV
MR#9!IO6!/4T[)M[N2/%#?_JF/Z'/)IHS-+%G?7)*M8W0?8/Q@NDI@&quot;X$K-(K
M0IH,JL1SG_:V&lt;Y]4A+(SE?,6D&quot;&lt;0&amp;P0Z8Y83@-/38FHIM9!:1BVBD5&quot;WV?L2
M:@?;=L?(RU%;AL-.7B'$E7OE4D&amp;#]GK+\QZ;1\#X;GHI+Z=8TA=3;B'9673=
MU&amp;@H#.R4XOSEB&amp;YOJV-LSFF]U?&quot;,8CJH=3R#@1Y&quot;FN=GGG=^BC._+GF=K`'E
MZAF:^]?)A'L53B)J=[PH&quot;KN:Z#I4RE_TP:&quot;C`0DJ.,Y-J&gt;DT3+.\L*_U8&amp;4X
M-DF08'!RY&amp;KNL3WXLC&lt;0ZV-=%CLN1-8+4F='9#.G54&gt;[?=-7%M#$UVP4JFYB
M+A75&gt;&lt;'$,[#*,/-DYC(0V^L&gt;]#Z;[K(M-CZS44B&lt;ITC%LWS^1-#Q:&gt;.1JPU^
M!+A&amp;UK,_T[R^^;TM?Y1;_O?[[^U&amp;H^+-B+(&lt;(B:6\.1;L5TL'?9V]=9Z'R6O
M*4[;PK;!'.X8&lt;VY:#_*F]8B_WSB:S_^+:.YFVC`F?;EF$K;3$=W&quot;`85@M@L:
M#86]0&quot;[P2Z;O5+(&lt;W1&quot;;R&gt;(5HD4QYA13#D_-I!B-02=NX6AZQLL&quot;UNPW/2N;
MUQ1FM&lt;$Z_5BXW*AL&lt;HR.4W-YF4Z&amp;@#VO9'8F\F+(+K))`=&gt;=;$,W[+U`26(P
M-%L?5YHM#O$\/7;QSPDS?7,71$KH?1#YQ?+;5Z?&quot;DG2G!&amp;OQ&quot;S*S0I(SU-O,
M:,.OT/2]&gt;TW61SFJJLU=P4;6[2&lt;&gt;S#D_/^@$_&lt;!YKJ'+-^72Z_\EE[JO=&quot;HU
MT#GTJ&quot;V+%29O(,WHW-Q=8^J943&gt;L;X24%/_!4J):,O6PST_.A9WC^2-/]N*-
MF=Q]8Q@OT2NJ@S$]II$97NK#`Z%):4_&lt;,*GLJ5QD\D5H4/DM'?5X8\JZ$XZ\
M)^YO8',$8_&quot;\#C/UY);#S%-`ZSEDJ)C?T^69BJ:R;M95'^2)/))M&gt;=)XC8-7
MCJ0WGA79Z\/+!_F/8YXUQAB5[`JL47KW4Y+.5+*B&quot;2-YKKSQ)1HS5`!.VL;6
MSZ=Z.VC7T)JCL8*FP3Q7R9&amp;['N*U(V&gt;\EEL[(U?6=&lt;YIV$:K4C^\-SQ*HZ/9
M%&amp;:R&gt;WW9O]3)L+JNX&gt;RM(QQ&quot;YCRJ%#J3W`6,WQFE.N6FL[H_AQ?S-2U[\W52
MI&quot;;A&lt;#O%G91M_\U;F?UW+*;O_(E&gt;JZW]C#:5IH]&lt;D'0TO=&amp;J!C-&quot;7)0:-9V&amp;
M`&lt;I*L)5U6NS2&lt;)%#.=HJ^AE&amp;&quot;7I'2'S&gt;$2;^C:7U@K&gt;T-_Z&gt;X._9_\_NI&gt;&amp;+
MEVKFY9:&amp;`I##,MHNE&lt;V:3*=-LV;?:;BY;XJB9,U-XL'!]&gt;B^?W`@KV+]`OG5
MVEK_'P3['&lt;F!UC@[()T6_K,2TO[)5J8R59:/W,10*=6OB*.M!&lt;U%\2:X&gt;+=B
M7U.7#:M965&gt;CMS3)WO&amp;4;]'-DM&gt;U&amp;\Q0OYAI_KSS\AJ]?+&quot;&quot;0#$$*N3@RJ=&quot;
M*O,$%WY/@P2&amp;3(1&quot;W/;$OP!02P,$%`````@`VC;;)J[1$H%;#@``_B8```D`
M$`!O8FHS9&quot;YR96956`P`*X-^-QL?=C&gt;&lt;#V0`U5K;;MM($GT6OZ(W$##R1)+O
MCAW#&quot;TBT%3NP(Z_M9*V\#-I22^(,Q=:2E&quot;^!/WY/55](2G)V%CLO*R`&amp;V5U5
MW5W74\WT'W[?'8EYJB&gt;IG,U4^DLF4C56J4J&amp;*FC1+XAEEHO%?&quot;1S]5'L;6X?
M;!X=!8\JS2*=B)WV5A`$OXH^RY')2,31`YYF:J;3%S&amp;3\X]!\-IZ?7YMF3^5
MW^LS?J^EY^K;,CE/!$*\&quot;F'_5'ZO;SSC#4SUO6W\V=K9VJI,U?=Z?J1^N%&gt;:
MK8=;6W0X,+;J&gt;T=^O)]&amp;*LEE3L&gt;?R3R-GD'2:=7W=SS)MT@]S764Y)Y@?[=9
MW]_S!/=Z/,Y4WA0#\R`:V3!5*A'F-1.MEGB:P@QBJ[DEHDQ@+4.Q`5G[K?J'
MTF(RC?0B$[F:S74JH75&gt;&amp;@9B&gt;SQB6C[$*@OJ!UNM^L&amp;'6NU^NSG8;M[O-`&lt;[
MM%`631(U$ML'K8&lt;H%T.MTU&amp;4P-J9&amp;.M47%_V[UC0Z4WGGY&lt;77\Z&quot;^F&amp;W53\\
MJ]6N+R]N[[Y?]IO&quot;/)U?D#B_&gt;JY%JJ$HR/[18K&amp;29K&quot;1SFZKWCGS)PCO249X
M?WZ!OP-^'O`SRPZMW.M5N&lt;&amp;R&quot;PP5D[2Q1*]5[Q;&amp;O.G?777NSDO[\V*L':&lt;B
M)S4%]2[,W3WTG%=?+^\N^]OBLK\CSB^V\6]G^92S19Q'\WAH9.56V]VCRM:Z
M48YH$(UI-)F*AY=&lt;P9)=*+(;&gt;I+&gt;Q&gt;7E=&gt;=N:9/C*([%7.9X340CT;E9@=A/
M6_6P&lt;&quot;HV`JN2-&lt;F*'+QIDTT$_&gt;]J2-;AV2RHU1K.HN($P=!M&quot;OF@'[%2L!PW
M;`OQKX5:0&amp;$40;4:N088L=B-&amp;L+68I3*IP3I(($C18EXBI!8D&amp;28X&gt;#0,)Q?
MT-LIV/O=R[.[6V*_U2EM2N.,.=BS'!Z_55E=4[+!Z,$6''K_U,[QJ-7^QZ#&amp;
MTQ#[&amp;9LBL&lt;A0.&quot;T+%`VGCPVF.V0Z[`4O'\#T[&gt;(6[\3T+&lt;HBR&quot;/9CIF)#K?!
M$9Y]8&lt;DA.YVC21:S!Y42U2%$A?&gt;UEKA+99+%'`@N(*RC,AF6/V&gt;ZLF]@XHCX
M!_S$)/S8H&lt;'O_,2#_-C%H+%^S&lt;:).Z&gt;S,0OL@J-8PQP^=*PL/:Q0&amp;(\:,-VI
MH^,%3T'GR6&quot;),[9$K]=;#C8?86P7T4A5K!$G]-*T7CDBIWQX$0A9^#2EX%;]
MR(GB:A)P*H:O[]A1$Y,K`GH?6O7&gt;(2&gt;K&gt;N\(SQUP[C+G?HF3@F.9$X'8&quot;RTG
MHJJ'+!&gt;R&gt;X5N)U&lt;:V=AX%T5A4CE)II39:CM7SSD&quot;IH;?&lt;ND*@EO=I!7GBUP@
MTTK$,G*\&gt;)(O33%&amp;&lt;A&lt;R51*Y?BQN.E?T\I$C#]5GRV?]1I'F=1*_'-.R_/:D
MTS^*9`]-'F'WG1V&lt;`XR]'DMZ?H8L'(A*`1WN&lt;)&gt;&gt;._S&lt;Y?%3?N[1\_]WV29S
M(7&gt;E4/A4&quot;03@1`GG1N0,0YF(!X7$/X+:'V44LW_&quot;%ZQ=HV1&quot;G(&amp;U.!E*M86X
MFZ(8L\'J9Y249O*%Q&quot;PR^!),)\4#I_DFTATJBDKT`D$&quot;ETAED&amp;H]XXIZ*+)Y
M&amp;B&amp;\1FH&lt;)1&amp;%1\:B%UG3\F=D_=*^D#\EJL&quot;#3/Y`&lt;;.`B[)-RKDV&quot;/`:WM/Q
M3P22Z;%)22@$INX&quot;7I1K_`:3#PSY#L@'AHR'OYOA/0S_*(9/X&gt;DT?(#AZZ(V
M97FZ&amp;.8+[!7P4!+AQ:GA1X(__IJ!BE,-S=!;#3-'&gt;,'^KG6&amp;E^TM%IBQ%NB8
M)C&amp;:3,N'NE$SHMOVI\*99P`2(TJ??`Y+L6.V;]]VZ&gt;U*YKR9;3K-,BAK&quot;GI^
M3^*(]C;ZH8AV=Z?D9L=XXP/@L+F,6?.?%[.YQ0K!!&lt;RW&gt;VIH43*K=:IV3-.1
MC$FR262=T0A+.7K#_7[7TV/:E1$HMUQT3E5&lt;8C1B2HR85KDO4^,4GL9LMRH/
M%VG_P;`9(24V3(OA(@7:SRUO\*G&quot;X?@M3^WXTUJ.+_!P9CD1GRH&lt;AB'!M-M;
ME)B=8;QT(&quot;^CS%;&quot;0'8I.H^QJ&gt;.JGB&gt;4\7!!A98S.&gt;%JNZJ%X==1/IP*QVZ$
ME=C-M&quot;U:7ILRU0M(&gt;V[)YR@+!O+)&amp;_A$,(&gt;7`!$T[058SA?#&gt;:,1P9X3A`4?
M&lt;?+T,NL/PWJ%3'8;(5,Q*U&amp;6&gt;&amp;O'-.U41,]?YVX5Q_A^ER=Z.GV2Z2BS,U_G
M&amp;(&lt;2B&gt;*;&amp;CH&amp;1X4U:L?E;N&lt;1&quot;VA$'5B^SIG!6L$*X$W5CANQ2B;Y].1@;X-(
M&gt;ZE.&lt;J)F4F;$LF3*:YG.,B_$T9$4XYKP,D0Y9&gt;*Y).3(B(D8`&lt;L,+QN1']_O
M&amp;IY'0FQ1'.4O929R#(I_;W@GH5CLT:&gt;'$Z=+0J(@M+IT,GPLA'J&amp;2FY]#:1F
M;8\6L^`4&quot;+@3QRSB1%AISL-IDI/Z,I&gt;-!&lt;M5R&amp;!S,)&gt;/IU5P&gt;J-S)JF$E5V5
M?&quot;QWP4'HW)V3.'IRZ-V+14&quot;A=KD,%L`R8Z(`&lt;HY?)AIM*#*A:?6S?#$&gt;!T'8
MN0R!^H0X^\=7E&amp;2`WZ`3AH&quot;&quot;]\70KAT:%$,'=NA[,704?+KL=S%6#(4!7J]O
M^I^+H5YPW;\&lt;4,ODAE`!N%FEGQO:#US;ZH&lt;.@V]G-[&lt;7_2\%51&gt;)_48O4/2I
M**/1CN9&lt;E8,U2*;ELC[`23]!B&lt;_3EX^BW1E`=2L9R]9GZ`B0;6(`GN5[CG+`
M.XLH4KLX'AE*0$!4U(Y'V^'KI4N6&lt;I\/21[\-8U+3O4B'A$Z&amp;&lt;+-%#V-&quot;&lt;/*
M!-&quot;1@:==U8`-0]2&amp;G&quot;\:/I)/D6&gt;CL5#M2=O!7F`7`E/VJL)6:N*=(6N,;,YB
MP`4I.'&gt;JLKE.1A3`?F^E;5%^_E6.(&gt;177IWHC&amp;H!&lt;4R)^U,Z7@(AHO1KWY-'
M:[:FC$FWJ0!&quot;X:ZE,(-X2_0Z694NKSP?\H$`3*(A7YZH-(7&quot;&amp;D:!6J,&amp;D&gt;)-
MD/]M@TQOT4#)Z-(#`.J9,4#Z!K*/1P&quot;(%RB),8*0T:BO3K1)&gt;A]'*3H^-`?(
M?%`[5UH:E\,\&gt;JPD&quot;&gt;,&gt;4+@V&amp;Y5BQ5SH,#CCHQ6Q-WE6FE=YX&lt;]-`KYSF65\
M'X,]&gt;QLZ]%&quot;UXEHU_N^F`(%'.R6-DDUHXU70PG!;B7&lt;5$&gt;_`!RG2OB)VX52$
MFM$5&amp;%.UWPA7&amp;UG6B2'#&amp;'UJ(F-&amp;Z[I80V&lt;PC8`R8!:ZU%NSM&lt;!CL++&gt;_BH=
M?5JCH\E:'3DUD+/8I&lt;S&gt;_B*#FLU@)Q.Z\)1E&quot;O1F5AZU4=`&lt;F=&amp;V9-+O+]&lt;0
M\:#6Z]!@W?]JHR:`9THFL+#D#)G(#.'$D4S[M2B\I+J1`=[%AAE[KX\[HSV#
M&lt;]\R[7](,D:7=MHJK#P?4K,C6G\OMER@&lt;U8S[6P)CK^5)+)&lt;IJQS.I)-,BM1
M9#?&gt;7.&lt;_4!-'G\:I;.1`C(N=&lt;N&lt;,DN'+,&quot;93IMPQDS2^P4(&quot;JNRMVOTBI49S
M`OR4JUR$!:Y-6&amp;-\R4BFBN@K03-8H;+HO6;4OS+]PPDIUW3;IBRE(5FY;T8_
MPK&lt;!:]7:H25(ZD0;C]IJM[=W/K3+Q=DN8AJ&amp;S.W'E()GK/H;UXW?!.VO22F&gt;
MKHZ]H_Z2&quot;&lt;K_&lt;&gt;F^GRF/:&lt;O4G6QR;[/);8F_-:8+X86K.(:?F&amp;`4&lt;)CVBON&lt;
MBNI#`=/*E-QRSIT^K.DTL::&quot;&quot;B),U$0N$WH-&quot;SH-%FR:_LO4,]ZHVZ4/1Z1N
M:?4A9U!0+AJ[&quot;-H)$`SCF4QO4,JG4Y7.M*03J+UQ]]:D,P#$\)U/424WVH%M
MQWP#5^G&quot;EL`-N=8(/B\3PMGFPF9CR;&amp;,N$T2M&gt;F;.4)@SL^HWI2.+V.-`([R
M56/3J=DQ2$.)4\X\U;;T2[9ZNW-&lt;F.)1Q@O%UY/8[!-]E&gt;#5HL3Z@YZS&gt;0'#
M(L!&gt;$F(R'K=\I3ZSW!2^E0&lt;;[?MF&gt;]!L=S:@%7MYU7ANOC1_;%2^4&amp;$S&gt;J5#
MM7F/&gt;LY2&quot;(ZC&quot;6%$LO03Q8_?Y?K&lt;!1F&lt;8&quot;D#1HD%#+8#9I6;71GGPS9,TRL.
M]DR&amp;0L^U(/2^+C=QY_ES:.N^]YA[IEI1T.UG)`!%P+6L^LE@*88R'4=4NKEA
MR]RTC\7B@\Q*\C+-]5+Z&amp;JHTEZ@7Z[IRJY[JK@E4)AD\FLTD?4(_?#YTE%F[
MTL^OT&lt;D5O'2VF/E^BBYRR_JX0I^T,K]R(']AL`89FKMA^D)E@%E2JE]\`)R6
MH&gt;T[VZF_XP1=Y%';&quot;-G;4I,9F'&lt;&amp;!9FUL$[F`NC8AHM=-S-Y&amp;:^C:$'Z&lt;/&lt;,
M:\I7&lt;87I`5_YH/Z68VAN)DRYIXN-`I8\+HG@!)#;#U0&amp;O))#F[0+&amp;]L/570M
M;K*`;4J6Y5@/&lt;&amp;2!_Q9K8@51`TU8M!'&gt;BW/\4_FPS4Z!HD/#_EH8F(HQ&lt;Y%9
M*LUT1`TO-5KJV35)&amp;+((R]ZRO)%7V!WLK8Y7DN3;&amp;S7R#KIT(T,PQ_9D=!8[
M&quot;TEHC[&amp;[%QZEW$^W]&amp;)OW]87&lt;AY%)=YD:3U&gt;KW^K&lt;,O//4.4;,[D&lt;_DJBWW%
MM0X6.0VG-&amp;@XJU[&gt;+KG&quot;;($SK=P!N'8[+W4S;:L;3GCP2H5.,Z,O2]&quot;P2C+*
MG27TC0,]JC1&amp;*J)3VD]9KH\&lt;YO&amp;+ZV[,;&lt;&amp;?AHKF\L`TLV6,6EBXN!'[B9%+
M5V]TTY6MNVFC#P&quot;H'B/Z4((6=D29#+HW#9_UD@*SO[V&gt;2T5A]5Z\5@#VZY7F
MAR&gt;_\*&amp;1BJ%59:L(7&gt;(5L)WV/T:&lt;3-6;T/UQ]1-UT[5+Y*-.J^LZX/4W3^9J
M,*E&gt;,4B11S.XX,/&quot;KTQ@@;Y[DP;;@;MZ7$Y;)PZLKW9&lt;H=:Q+2?*%RHZO;O%
M-'-9*2?;LQBGXMSE,Q7WJ&gt;9[MSEZ*7/`5?.(;DZD@&lt;@)'Y*;&amp;[I0:0H5F4^Q
MKB8:;(CZV0Z6/-=]P2\MY_\+!3RJK=J52[(&quot;JT&quot;0S0$N\U8SH_F`SW+-=_=C
M^]]J*)%0Y&lt;UL&lt;+@=-,@65#R*K_R5(I398*&amp;KW9^C#;[:M9=G/VG&lt;V?N(UD48
M7QI[(SD++AOII[J]`!IS%X*$0Y_&amp;BQC)8Z(UE#)2DH1-Y:.JZ-YHVRN-&lt;JA1
MO.;,YOWGI]D.OW\#4$L!`A4#%`````@`-&amp;/'&amp;A.VWFK4!````08```&lt;`#```
M````````0*2!`````&amp;]B:C-D+F]56`@`?(Q^-R2($RQ02P$&quot;%0,4````&quot;``V
M8\&lt;:2Z8,XO,+``#H&amp;P``&quot;0`,``````````!`I($)!0``;&amp;EB,V1V,BYO55@(
M`(&amp;,?C&lt;GB!,L4$L!`A4#%`````@`,V/'&amp;C&lt;H/C1(#```\QL```L`#```````
M````0*2!,Q$``&amp;QI8C-D=C)M8RYO55@(`'N,?C&lt;AB!,L4$L!`A4#%`````@`
MUEW'&amp;GLS&gt;+4/`0```@(```P`#````````0``0*2!M!T``&amp;UP&lt;F]J,3,@-64P
M,%58&quot;``#K%&lt;W!'\3+%!+`0(5`Q0````(`--=QQJ];9!:&lt;P,``%,%```)``P`
M`````````$&quot;D@?T&gt;``!P=&amp;%B9V5N,3-56`@``ZQ7-_U^$RQ02P$&quot;%0,4````
M&quot;`&quot;O2)$FGLOA\D@&quot;`````P``&quot;P`,``````````!`I(&amp;G(@``8FEG=&amp;5T&lt;RYB
M+F]56`@``ZQ7-SJC&amp;#=02P$&quot;%0,4````&quot;``Q8\&lt;:8&quot;8;@',%```D!P``&quot;0`,
M``````````!`I($H)0``&lt;W1R;VED&lt;RYO55@(`':,?C&lt;&gt;B!,L4$L!`A4#%```
M``@`L8+C)KDA5+G`(@``PR(```&lt;`#```````````0*2!TBH``'-T&lt;F]I9'-5
M6`@`[8Q^-^V,?C=02P$&quot;%0,4````&quot;`#57&lt;&lt;::&gt;O^;'T```&quot;E````!@`,````
M```!``!`I(''30``;&amp;]A9&amp;5R55@(`-6,?C&lt;&quot;?Q,L4$L!`A4#%`````@`;TJ1
M)@JW-S2Y&quot;0``@!D```L`#```````````0*2!&gt;$X``&amp;)I9W1E=',N8BYS55@(
M`)N)?C&gt;&quot;IA@W4$L!`A4#%`````@`%J.V)OI$MTE!%@``0ST```L`#```````
M````0*2!:E@``'-T&lt;F]I9',N&lt;RYS55@(`-F)?C?K9D&lt;W4$L!`A4#%`````@`
M:S?;)C8,@GJC#@``9&quot;(```L`#````````0``0*2!Y&amp;X``&amp;QI8C-D=C(N&lt;F5F
M55@(`$2#?C&lt;I('8W4$L!`A4#%`````@`VC;;)J[1$H%;#@``_B8```D`#```
M`````0``0(&quot;!P'T``&amp;]B:C-D+G)E9E58&quot;``K@WXW&amp;Q]V-U!+!08`````#0`-
+`&amp;T#``!2C```````
`
end

.......
....
..
.                                    - fin -

</pre></td></tr></table></center>
</body>

</html>